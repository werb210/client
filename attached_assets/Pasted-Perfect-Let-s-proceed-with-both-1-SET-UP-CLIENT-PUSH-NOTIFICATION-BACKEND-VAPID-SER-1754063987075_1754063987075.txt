Perfect. Let’s proceed with both:

---

## ✅ 1. SET UP CLIENT PUSH NOTIFICATION BACKEND (VAPID + SERVER ROUTES)

### 📦 Goal:

Allow the **staff backend** to send push notifications to **Client App users** — e.g., "Document Rejected", "Lender Response", "Chat Escalation".

---

### 🔐 Step 1: Generate VAPID Keys

> These keys authenticate your push server with browsers.

**Replit agent must run this once:**

```bash
npx web-push generate-vapid-keys
```

It will return:

```txt
Public Key:  BNf...
Private Key: K74...
```

**Save these keys to environment variables** in the **staff backend**:

```env
VAPID_PUBLIC_KEY=BNf...
VAPID_PRIVATE_KEY=K74...
VAPID_EMAIL=mailto:admin@boreal.financial
```

---

### 📁 Step 2: Backend Push Service (Node.js – staff app)

**Create `services/pushService.ts`:**

```ts
import webPush from "web-push";
import { VAPID_EMAIL, VAPID_PUBLIC_KEY, VAPID_PRIVATE_KEY } from "../config/env";

webPush.setVapidDetails(
  VAPID_EMAIL,
  VAPID_PUBLIC_KEY,
  VAPID_PRIVATE_KEY
);

export async function sendClientNotification(subscription: any, payload: object) {
  try {
    await webPush.sendNotification(subscription, JSON.stringify(payload));
    return { success: true };
  } catch (error) {
    console.error("Push Notification Error:", error);
    return { success: false, error };
  }
}
```

---

### 🌐 Step 3: Push Endpoint in Staff API

**Create route: `POST /api/notifications/push`**

```ts
import express from "express";
import { sendClientNotification } from "../services/pushService";

const router = express.Router();

router.post("/push", async (req, res) => {
  const { subscription, payload } = req.body;

  if (!subscription || !payload) {
    return res.status(400).json({ success: false, error: "Missing fields" });
  }

  const result = await sendClientNotification(subscription, payload);
  res.json(result);
});

export default router;
```

* Mount this at: `/api/notifications` in `server/index.ts`

---

### 🗂 Step 4: Store Subscriptions in Database

In the **Client App**, when the user subscribes to push (via `PushManager.subscribe()`), send the object to:

```http
POST /api/public/push-subscription
{
  applicationId: "uuid",
  subscription: { ... }
}
```

Then store in a `push_subscriptions` table:

```sql
CREATE TABLE push_subscriptions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  application_id UUID REFERENCES applications(id),
  subscription JSONB NOT NULL,
  created_at TIMESTAMP DEFAULT now()
);
```

---

### 📤 Step 5: Trigger Notification

Example (from document rejection logic):

```ts
await sendClientNotification(subscription, {
  title: "Document Rejected",
  body: "Please upload a new Bank Statement.",
  type: "document-required",
  documentType: "Bank Statement",
  url: "/step5-document-upload"
});
```

---

## 🧪 2. REAL-WORLD PWA INSTALLATION & OFFLINE TESTING

### 📱 Android (Chrome, Samsung Internet)

1. Open `https://clientportal.boreal.financial`
2. Tap **⋮ Menu → "Add to Home Screen"**
3. Launch from icon
4. Disconnect Wi-Fi, fill out Step 1–3
5. Reconnect and verify sync

### 📱 iOS (Safari)

1. Open the URL
2. Tap **Share → Add to Home Screen**
3. Launch app
4. Upload a document via camera while offline
5. Reconnect, verify upload completes

### 🖥️ Desktop (Chrome or Edge)

1. Open portal
2. Install via **PWA icon in address bar**
3. Disconnect network, fill form
4. Watch console log for:

   * `✅ Form data saved offline`
   * `✅ Submission queued`
   * `✅ Sync triggered` after reconnection

---

## ✅ Summary for Replit Agent

You must now:

1. 🔐 Generate VAPID keys and save to env
2. 📦 Implement `pushService.ts` + `/api/notifications/push`
3. 🗃️ Create `push_subscriptions` table
4. 🚀 Confirm push delivery to client app (document rejection test)
5. 🧪 Validate offline PWA usage on Android, iOS, Desktop

---

Once you're done, I’ll help test production push delivery, and we’ll wire up the **Sales Pipeline → Push Notification triggers** automatically.
