# =========================================
# CLIENT APP — E2E AUDIT & FLOW VALIDATION
# =========================================
# What this does (read first):
# - Does NOT modify existing app code (no duplicates created)
# - Writes reports only to ./reports/
# - Scans for duplicate files/components/env keys
# - Verifies Step 1 → Step 2 (category) → Step 5 (required docs) flow
# - Confirms category is persisted & included in submission payload
# - Runs a Playwright test that clicks a category and walks to Step 5

mkdir -p tools reports && cat > tools/client_e2e_audit.sh <<'BASH'
#!/usr/bin/env bash
set -euo pipefail

AUDIT_AT="$(date +%F_%H-%M-%S)"
R="reports/client-e2e-$AUDIT_AT"
mkdir -p "$R"

echo "== CLIENT E2E AUDIT @ $AUDIT_AT ==" | tee "$R/00_summary.txt"

# 1) DUPLICATE SCANS (safe, read-only)
echo "STEP 1: Scanning for duplicates..." | tee -a "$R/00_summary.txt"

find client/src -type f \( -name '*.tsx' -o -name '*.ts' -o -name '*.js' -o -name '*.mjs' \) \
| sed -E 's/\.(tsx|ts|js|mjs)$//' | sort | uniq -d | tee "$R/10_parallel_ext_bases.txt" >/dev/null || true

find client/src -type f \( -name '*.tsx' -o -name '*.ts' -o -name '*.js' -o -name '*.mjs' \) -print0 \
| xargs -0 md5sum | sort | awk 'prev==$1{print} {prev=$1}' | tee "$R/11_hash_dups.txt" >/dev/null || true

rg -n --no-heading -S 'export default function ([A-Za-z0-9_]+)\s*\(' client/src \
| sed -E 's/.*export default function ([A-Za-z0-9_]+)\(.*/\1/' \
| sort | uniq -d | tee "$R/12_component_name_dups.txt" >/dev/null || true

ls -1a | grep -E '^\.env' | tee "$R/13_env_files.txt" >/dev/null || true
node - <<'NODE' | tee "$R/14_env_dups.tsv" >/dev/null || true
const fs=require('fs');
const files=fs.readdirSync('.').filter(f=>f.startsWith('.env'));
const map=new Map();
for(const f of files){
  try{
    const s=fs.readFileSync(f,'utf8');
    for(const line of s.split(/\r?\n/)){
      const m=line.match(/^\s*([A-Z0-9_]+)\s*=\s*.+$/); if(!m) continue;
      const k=m[1]; if(!map.has(k)) map.set(k,[]); map.get(k).push(f);
    }
  }catch{}
}
for(const [k,arr] of map) if(arr.length>1) console.log(`${k}\t${arr.join(',')}`);
NODE

echo " - Parallel bases: $(wc -l < "$R/10_parallel_ext_bases.txt" 2>/dev/null || echo 0)" | tee -a "$R/00_summary.txt"
echo " - Hash dup lines: $(wc -l < "$R/11_hash_dups.txt" 2>/dev/null || echo 0)" | tee -a "$R/00_summary.txt"
echo " - Component name dupes: $(wc -l < "$R/12_component_name_dups.txt" 2>/dev/null || echo 0)" | tee -a "$R/00_summary.txt"
echo " - ENV dup keys: $(wc -l < "$R/14_env_dups.tsv" 2>/dev/null || echo 0)" | tee -a "$R/00_summary.txt"

# 2) BUILD CHECK (no code changes)
echo "STEP 2: Building client..." | tee -a "$R/00_summary.txt"
if npm run -s build >/dev/null 2>&1; then
  echo " - Build: PASS" | tee -a "$R/00_summary.txt"
else
  echo " - Build: FAIL (see $R/20_build_error.txt)" | tee -a "$R/00_summary.txt"
  npm run build 2>&1 | tee "$R/20_build_error.txt"
fi

# 3) API PROBES (counts only)
echo "STEP 3: Probing APIs..." | tee -a "$R/00_summary.txt"
BASE="${VITE_STAFF_API_URL:-http://localhost:5000/api}"
TOK="${VITE_CLIENT_APP_SHARED_TOKEN:-${CLIENT_SHARED_BEARER:-}}"
probe(){ [ -n "$2" ] && [ -n "$TOK" ] && curl -s -H "Authorization: Bearer $TOK" "$BASE$1" || curl -s "$BASE$1" ;}
{
  echo "Products: $(probe "/v1/products" "" | jq 'if type=="array" then length else (.items|length // 0) end' 2>/dev/null || echo "?")"
  echo "Lenders:  $(probe "/lenders" "auth" | jq 'if type=="array" then length else (.items|length // 0) end' 2>/dev/null || echo "?")"
  echo "ReqDocs:  $(probe "/required-docs" "" | jq 'if type=="array" then length else (.required_documents|length // 0) end' 2>/dev/null || echo "?")"
} | tee "$R/30_api_counts.txt"

# 4) PLAYWRIGHT TEST — Step 2 clickable + Step 5 uses category
echo "STEP 4: Running Step2→Step5 E2E test..." | tee -a "$R/00_summary.txt"
mkdir -p client/tests && cat > client/tests/step2_step5_e2e.spec.ts <<'TS'
import { test, expect } from '@playwright/test';

test('Step 2 selection persists & Step 5 shows category-driven docs', async ({ page }) => {
  await page.addInitScript(() => {
    localStorage.setItem('bf:intake', JSON.stringify({
      amountRequested: 500000, country: 'CA', industry: 'construction', structure: 'corp'
    }));
    localStorage.removeItem('bf:step2'); localStorage.removeItem('bf:step2:category');
  });
  await page.goto('http://localhost:5000/apply/step-2');
  await page.waitForSelector('[data-step2-card], [data-testid^="cat-"]', { timeout: 10000 });

  // Click a category card/button
  const hit = page.locator('[data-step2-card] button, [data-step2-card] .step2-hit, [data-testid^="cat-"]').first();
  await hit.click();

  // Verify persistence
  const saved = await page.evaluate(() => ({
    legacy: localStorage.getItem('bf:step2'),
    category: localStorage.getItem('bf:step2:category')
  }));
  expect(saved.legacy || saved.category).toBeTruthy();

  // Continue forward to Step 5
  const continueBtn = page.getByRole('button', { name: /continue/i });
  await continueBtn.click().catch(()=>{});
  await page.waitForTimeout(300);
  if (await continueBtn.count()) await continueBtn.click().catch(()=>{});
  await page.waitForTimeout(300);
  if (await continueBtn.count()) await continueBtn.click().catch(()=>{});

  // Step 5 should render docs list
  const docsList = page.locator('[data-step5-required], [data-testid="required-docs"]');
  await expect(docsList).toHaveCount(1, { timeout: 10000 });
  const items = docsList.locator('li, [role="listitem"], .doc-item');
  await expect(items).toHaveCountGreaterThan(2);
});
TS

npx -y playwright install --with-deps >/dev/null 2>&1 || true
if npx -y playwright test client/tests/step2_step5_e2e.spec.ts >/dev/null 2>&1; then
  echo " - Playwright: PASS" | tee -a "$R/00_summary.txt"
else
  echo " - Playwright: FAIL (see $R/40_playwright_output.txt)" | tee -a "$R/00_summary.txt"
  npx -y playwright test client/tests/step2_step5_e2e.spec.ts 2>&1 | tee "$R/40_playwright_output.txt"
fi

# 5) Optional submission payload shape check (if app exposes it)
echo "STEP 5: Submission payload shape (optional)..." | tee -a "$R/00_summary.txt"
if curl -s "http://localhost:5000/debug/last-submit" | jq '.' >/dev/null 2>&1; then
  curl -s "http://localhost:5000/debug/last-submit" | tee "$R/51_last_submit_preview.json" >/dev/null
  node - <<'NODE' | tee -a "$R/00_summary.txt"
const fs=require('fs');
const Ajv=require('ajv'); const ajv=new Ajv();
try{
  const data=JSON.parse(fs.readFileSync('reports/$(ls -t reports | grep client-e2e- | head -1)/51_last_submit_preview.json','utf8'));
  const schema={
    type:"object",
    required:["answers","meta"],
    properties:{
      answers:{
        type:"object",
        required:["amountRequested","country"],
        properties:{ amountRequested:{type:"number"}, country:{type:"string"}, selectedCategory:{type:"string"} }
      },
      meta:{ type:"object", required:["traceId"], properties:{ traceId:{type:"string"} } }
    }
  };
  const validate=ajv.compile(schema);
  console.log(validate(data)?'PAYLOAD_SCHEMA: PASS':'PAYLOAD_SCHEMA: FAIL');
  if(!validate(data)) console.log(validate.errors);
}catch(e){ console.log('PAYLOAD_SCHEMA: UNKNOWN', e.message); }
NODE
else
  echo " - Skipped (no /debug/last-submit endpoint)" | tee -a "$R/00_summary.txt"
fi

echo "== DONE ==" | tee -a "$R/00_summary.txt"
BASH
chmod +x tools/client_e2e_audit.sh

# HOW TO RUN (from client app repo root):
# 1) Start the client dev server so http://localhost:5000 is live
# 2) Run the audit:
tools/client_e2e_audit.sh
