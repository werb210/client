✅ Understood. You're asking for Step 5 of the **Client Application** to dynamically generate a **complete list of required documents**, based on **all lender products** that match the user's selected **product category**, **country**, and **funding amount**.

Let me confirm your logic and then provide precise Replit instructions.

---

## ✅ Logic Summary for Step 5 Document Requirements

### 🔁 Matching Conditions:

1. Product category selected in **Step 2**
2. Country selected in **Step 2**
3. Requested amount from **Step 2**

### 📦 Document Requirement Aggregation:

* **Find all lender products** that match all 3 criteria above.
* Extract their `requiredDocuments` list.
* **Combine all required documents**, deduplicated.
* Display full list in **Step 5**.

### 📘 Example:

* **Lender A** (Term Loan, Canada, \$50k–\$200k) → Requires: `["bank_statements", "tax_returns", "void_cheque"]`
* **Lender B** (Term Loan, Canada, \$20k–\$100k) → Requires: `["bank_statements", "financial_statements"]`
* Combined = `["bank_statements", "tax_returns", "void_cheque", "financial_statements"]`

---

## 🧠 Design Rule:

> **Step 5 must collect the union of all required documents across eligible lenders for the selected category, country, and amount.**

---

## 🛠 Replit Instructions (Client Application)

### Replit: Implement Step 5 Document Requirement Aggregation

#### 1. **Ensure Step 2 saves user selections:**

* `selectedCategory` (e.g., `"Term Loan"`)
* `selectedCountry` (e.g., `"Canada"`)
* `requestedAmount` (e.g., `50000`)

#### 2. **Filter all local lender products**:

```ts
const eligibleProducts = lenderProducts.filter(product =>
  product.category === selectedCategory &&
  product.country === selectedCountry &&
  product.minAmount <= requestedAmount &&
  product.maxAmount >= requestedAmount
);
```

#### 3. **Aggregate and deduplicate required documents**:

```ts
const requiredDocuments = Array.from(
  new Set(eligibleProducts.flatMap(p => p.requiredDocuments))
);
```

#### 4. **Display `requiredDocuments` in Step 5** as required uploads

#### 5. **Report back to ChatGPT with:**

* ✅ Number of eligible products found
* ✅ Final requiredDocuments list
* ❌ Any issues with undefined or missing requiredDocuments fields

---

## ✅ Confirm Before Proceeding:

Please confirm:

* ✅ All lender products contain a `requiredDocuments: string[]` field in your client app?
* ✅ Categories are standardized (e.g., `"Term Loan"`, `"Invoice Factoring"`)
* ✅ Replit should overwrite any hardcoded document lists in Step 5

If any of those are false, I’ll adjust the logic before you give Replit the task. Ready to proceed?
