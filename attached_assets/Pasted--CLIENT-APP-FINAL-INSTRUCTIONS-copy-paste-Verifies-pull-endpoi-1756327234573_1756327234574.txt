# ============================
# CLIENT APP — FINAL INSTRUCTIONS (copy/paste)
# Verifies pull endpoints, field exposure, default/hardcode heuristics,
# then performs Step 2 (validation) + Step 5 (required docs) via an
# end-to-end submission and writes /tmp/submission_continuity.json
# ============================
set -euo pipefail
need(){ command -v "$1" >/dev/null || { echo "Missing $1"; exit 1; }; }; need curl; need jq

# ---- Config (override if needed) ----
CLIENT_BASE="${CLIENT_BASE:-http://localhost:5000}"
STAFF_BASE="${STAFF_BASE:-https://staff.boreal.financial}"
TRACE="${TRACE:-/tmp/submission_continuity.json}"

echo "== CLIENT: Endpoints to expose =="
echo "Pull from Staff (internal):  POST $CLIENT_BASE/internal/pull-staff-products (if wired)"
echo "Serve to UI (primary):       GET  $CLIENT_BASE/api/v1/products"
echo "Serve to UI (legacy compat): GET  $CLIENT_BASE/api/lender-products"
echo

# ---- 1) Ask Client to pull/refresh from Staff (best-effort) ----
echo "== CLIENT: Pull latest catalog from Staff =="
if curl -fsS -X POST "$CLIENT_BASE/internal/pull-staff-products" -H 'content-type: application/json' -d '{}' >/dev/null; then
  echo "Pulled from Staff ✔"
else
  echo "Pull endpoint not available or failed (continuing with current cache)…"
fi
echo

# ---- 2) Field exposure + default/hardcode heuristics on CLIENT /api/v1/products ----
echo "== CLIENT: Field exposure & heuristics =="
C_RAW="$(curl -fsS "$CLIENT_BASE/api/v1/products" || echo '[]')"
# Normalize to array if server ever returns {items:[]}
if echo "$C_RAW" | jq -e 'type=="array"' >/dev/null 2>&1; then C_LIST="$C_RAW"; else C_LIST="$(echo "$C_RAW" | jq -c '.items // []')"; fi

echo "-- Fields (union of keys) --"
echo "$C_LIST" | jq 'reduce .[] as $p ({}; . + ($p|keys|map({(.):true})|add)) | keys'

echo "-- Country distribution --"
echo "$C_LIST" | jq 'group_by(.country // .countryOffered // "NULL") | map({country: (.[0].country // .[0].countryOffered // "NULL"), count: length})'

echo "-- Heuristic default/hardcode checks --"
echo "$C_LIST" | jq '[
  { field:"country",
    all_null: (map(.country // .countryOffered) | all(.==null)),
    all_us:   (map(((.country // .countryOffered // "NULL")|ascii_upcase)=="US") | all),
    mixed:     ((map(.country // .countryOffered) | unique | length) > 1)
  },
  { field:"min_amount", many_zeros: ([ .[] | select((.min_amount // .minimumLendingAmount // 0)==0) ] | length) > (length/2) },
  { field:"max_amount", many_zeros: ([ .[] | select((.max_amount // .maximumLendingAmount // 0)==0) ] | length) > (length/2) },
  { field:"required_documents", not_array: ( [ .[] | select((.required_documents|type)!="array") ] | length ) > 0 }
]'

echo

# ---- 3) End-to-end test covering Step 2 (validation) & Step 5 (docs) ----
# Select a Staff product (prefer US then CA), tolerate field-name variants
echo "== CLIENT: Build intake from Staff V1 truth =="
S_RAW="$(curl -fsS "$STAFF_BASE/api/v1/products")"
PID="$(echo "$S_RAW" | jq -r ' ([.[] | select((.countryOffered // .country_offered // .country)=="US")][0].id)
                              //([.[] | select((.countryOffered // .country_offered // .country)=="CA")][0].id)
                              // .[0].id ')"
[ -n "$PID" ] && [ "$PID" != "null" ] || { echo "No Staff product found"; exit 1; }

SPROD="$(echo "$S_RAW" | jq -c --arg id "$PID" '.[]|select(.id==$id)')"
SCNTRY="$(echo "$SPROD" | jq -r '.countryOffered // .country_offered // .country // empty')"
[ -n "$SCNTRY" ] || { echo "Selected product missing country"; exit 1; }

# Derive constraints (amount from min/max when present, else safe mid; prefer Staff TIB/REV when present)
SMIN="$(echo "$SPROD" | jq -r '.minimumLendingAmount // .min_amount // empty')"
SMAX="$(echo "$SPROD" | jq -r '.maximumLendingAmount // .max_amount // empty')"
if [[ -n "${SMIN:-}" && -n "${SMAX:-}" && "${SMIN//[^0-9.]}" != "" && "${SMAX//[^0-9.]}" != "" ]]; then
  AMOUNT="$(( ( ${SMIN%.*:-0} + ${SMAX%.*:-0} ) / 2 ))"
else
  AMOUNT="25000"
fi
STIB="$(echo "$SPROD" | jq -r '.min_time_in_business // empty')"
SREV="$(echo "$SPROD" | jq -r '.min_monthly_revenue // empty')"
TIB="$([ -n "${STIB:-}" ] && echo "${STIB%.*}" || echo 120)"
REV="$([ -n "${SREV:-}" ] && echo "${SREV%.*}" || echo 100000)"

INTAKE="$(jq -n --arg pid "$PID" --arg c "$SCNTRY" \
  --argjson amt "$AMOUNT" --argjson tib "$TIB" --argjson rev "$REV" \
  --arg ind "Technology" \
  '{product_id:$pid,country:$c,amount:$amt,timeInBusinessMonths:$tib,monthlyRevenue:$rev,industry:$ind}')"

echo "-- Intake to submit --"
echo "$INTAKE" | jq '.'

echo
echo "== CLIENT: Step 2 validation (/api/applications/validate-intake?diag=1) =="
VRESP="$(curl -s -X POST "$CLIENT_BASE/api/applications/validate-intake?diag=1" -H 'content-type: application/json' -d "$INTAKE")"
echo "$VRESP" | jq '.'
[[ "$(echo "$VRESP" | jq -r '.ok // false')" == "true" ]] || { echo "❌ Validation failed"; exit 1; }

echo
echo "== CLIENT: Submit application (/api/applications) =="
SRESP="$(curl -s -X POST "$CLIENT_BASE/api/applications" -H 'content-type: application/json' -d "$INTAKE")"
echo "$SRESP" | jq '.'
APP_ID="$(echo "$SRESP" | jq -r '.id // .application_id // .applicationId // empty')"
[ -n "$APP_ID" ] && [ "$APP_ID" != "null" ] || { echo "❌ No application id returned"; exit 1; }

# ---- 4) Write continuity trace for Staff verification ----
jq -n --arg app_id "$APP_ID" --argjson intake "$INTAKE" --argjson staff_product "$SPROD" \
      --arg client_base "$CLIENT_BASE" --arg staff_base "$STAFF_BASE" \
      '{meta:{timestamp:(now|todate),client_base:$client_base,staff_base:$staff_base},
        app_id:$app_id,intake:$intake,staff_product_at_submit:$staff_product}' > "$TRACE"

echo
echo "✅ CLIENT COMPLETE — trace saved to $TRACE (APP_ID=$APP_ID)"
