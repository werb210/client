[CLIENT APP]

Goal: lock down the 3 critical issues (esbuild vuln, production console noise, unsafe innerHTML) with code + QA that you can copy/paste.

1) FILE: client/package.json  (PIN SAFE ESBUILD)
{
  "overrides": {
    "esbuild": "0.25.9"
  },
  "scripts": {
    "build": "vite build"
  }
}

2) FILE: client/vite.config.ts  (STRIP console.log/info/debug IN PROD)
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig(({ mode }) => ({
  plugins: [react()],
  esbuild: {
    // keep warn/error; strip log/info/debug only in production
    pure: mode === "production" ? ["console.log", "console.info", "console.debug"] : [],
  },
  build: {
    sourcemap: false,
  },
}));

3) FILE: client/src/lib/console-guard.ts  (RUNTIME GUARD â€” PRODUCTION ONLY)
if (import.meta.env.PROD) {
  const noop = () => {};
  try {
    console.log = noop;
    console.info = noop;
    console.debug = noop;
    // keep warn/error for observability
  } catch {}
}

4) FILE: client/src/main.tsx  (LOAD GUARD FIRST)
import "./lib/console-guard";
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
ReactDOM.createRoot(document.getElementById("root")!).render(<App />);

5) FILE: client/src/lib/safeHtml.tsx  (SANITIZED HTML HELPERS)
import DOMPurify from "dompurify";
import React from "react";

export function setSafeHtml(el: HTMLElement | null, html: string) {
  if (!el) return;
  el.innerHTML = DOMPurify.sanitize(html, { USE_PROFILES: { html: true } });
}

export function SafeHtml({ html }: { html: string }) {
  const ref = React.useRef<HTMLDivElement>(null);
  React.useEffect(() => setSafeHtml(ref.current, html), [html]);
  return <div ref={ref} />;
}

6) SCRIPT: client/scripts/replace-innerhtml.sh  (ASSISTED MIGRATION)
#!/usr/bin/env bash
set -euo pipefail
rg -n "\.innerHTML\s*=" client/src || true
echo "âž¡ Replace raw innerHTML with setSafeHtml() or <SafeHtml html={...} />"

7) SCRIPT: client/scripts/sec-qa.sh  (ONE-SHOT SECURITY QA)
#!/usr/bin/env bash
set -euo pipefail
echo "ðŸ”’ SECURITY QA"
echo "esbuild version:"
npm ls esbuild | head -n 5
echo
echo "innerHTML occurrences (should be 0 outside safeHtml.tsx):"
rg -n "\binnerHTML\b" client/src | grep -v "safeHtml" || echo "0"
echo
echo "console.* in source (guard + build will mute in prod):"
rg -n "console\.(log|info|debug)\(" client/src | wc -l
echo
echo "Building productionâ€¦"
npm run build >/dev/null && echo "âœ… build ok"
echo "Done."

8) REPLACEMENTS  (EXAMPLES)
- BEFORE: someEl.innerHTML = htmlString;
+ AFTER:  import { setSafeHtml } from "@/lib/safeHtml";
          setSafeHtml(someEl, htmlString);

- BEFORE: <div dangerouslySetInnerHTML={{ __html: html }} />
+ AFTER:  <SafeHtml html={html} />

9) QUICK COMMANDS  (RUN THESE)
# install deps
npm ci
# run assisted scan for innerHTML
bash client/scripts/replace-innerhtml.sh
# build & QA
bash client/scripts/sec-qa.sh

Expected outcomes:
â€¢ esbuild pinned to â‰¥0.24.4 (0.25.9 in overrides).
â€¢ Production bundles drop console.log/info/debug; warn/error remain.
â€¢ All HTML injection goes through DOMPurify (no raw innerHTML).
â€¢ sec-qa.sh prints âœ… build ok and shows 0 raw innerHTML usages (outside safeHtml.tsx).
