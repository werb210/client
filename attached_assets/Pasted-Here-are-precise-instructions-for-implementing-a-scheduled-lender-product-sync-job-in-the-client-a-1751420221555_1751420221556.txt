Here are precise instructions for implementing a **scheduled lender product sync job in the client app** to pull from the staff API and:

1. **Compare** against local product data
2. **Update** any changed products
3. **Add** any new ones
4. Run the job **twice daily at noon and midnight MST**

---

## ðŸ§¾ REQUIREMENTS

### Client Assumptions

* The client app has a writable **local database or persistent storage** (such as IndexedDB, SQLite, or local backend)
* You already have:

  * `fetchLenderProducts()` fetching from:
    `https://staffportal.replit.app/api/public/lenders`
  * A local function like `saveProduct(product: LenderProduct)`
    and `getAllLocalProducts(): Promise<LenderProduct[]>`

---

## âœ… IMPLEMENTATION INSTRUCTIONS

### 1. Add a Sync Script (client/src/jobs/syncLenderProducts.ts)

```ts
import { fetchLenderProducts } from "@/api/lenderProducts";
import { getAllLocalProducts, upsertProduct } from "@/db/lenderProducts";

export async function syncLenderProducts() {
  try {
    const remote = await fetchLenderProducts(); // 43+ products
    const local = await getAllLocalProducts();  // local DB copy

    const localMap = new Map(local.map(p => [p.id, p]));
    let changes = 0;

    for (const product of remote) {
      const existing = localMap.get(product.id);
      const isChanged = !existing || JSON.stringify(existing) !== JSON.stringify(product);

      if (isChanged) {
        await upsertProduct(product);
        changes++;
      }
    }

    console.log(`[SYNC] ${changes} products added or updated at ${new Date().toISOString()}`);
  } catch (err) {
    console.error("[SYNC ERROR]", err);
  }
}
```

---

### 2. Schedule with a Cron Job (client/src/jobs/schedule.ts)

Use a lightweight in-app scheduler like [`node-cron`](https://www.npmjs.com/package/node-cron):

```ts
import cron from "node-cron";
import { syncLenderProducts } from "./syncLenderProducts";

// MST (UTC-7): Run at 12:00 PM and 12:00 AM MST daily
cron.schedule("0 7,19 * * *", async () => {
  await syncLenderProducts();
});
```

> `7,19 UTC` = `12 AM` and `12 PM` MST
> (adjust to `6,18` if you're observing MDT daylight saving)

---

### 3. Initialize in Client App Entry Point

In `main.ts` or your backend/init script:

```ts
import "@/jobs/schedule"; // just import to trigger the cron
```

---

### 4. Confirm Logging (for audit / testing)

Logs will show:

```
[SYNC] 3 products added or updated at 2025-07-01T19:00:00.000Z
```

You can later:

* Extend this to include **deletion detection**
* Emit a webhook to notify the staff portal of local sync status
* Write audit logs to a table or file

---

## âœ… Summary

| Item           | Value                                                         |
| -------------- | ------------------------------------------------------------- |
| Source         | `https://staffportal.replit.app/api/public/lenders`           |
| Sync Schedule  | 12:00 PM and 12:00 AM MST                                     |
| Trigger Method | `node-cron` inside client app                                 |
| Sync Logic     | Compares remote vs. local by `id`, updates changed or missing |
| Storage        | Uses local DB upsert function `upsertProduct(product)`        |
| Audit          | Logs change count + timestamp                                 |

---

Let me know if your client runs serverless (Replit-only frontend) â€” I can adjust this to run via webhook + backend instead.
