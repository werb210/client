### Client-Side Next Step: **Draft-Before-Sign Flow**

To pre-populate SignNow Smart Fields and keep staff in sync, the client must create a **Draft Application** before the user reaches the Sign step. Below is a complete, copy-paste-ready instruction set for the **client Replit AI** (and the matching endpoints the staff app already exposes).

---

## 🟧 1.  Add a Draft-Creation API helper

`src/lib/api/applications.ts`

```ts
import { apiFetch } from '../apiFetch';

export const Applications = {
  /* Create draft and get signUrl */
  createDraft: (formData: Record<string, any>) =>
    apiFetch('/applications/draft', {
      method: 'POST',
      body: JSON.stringify({ formData }),
    }),

  /* Complete application after docs */
  complete: (id: string, payload: any) =>
    apiFetch(`/applications/${id}/complete`, {
      method: 'PATCH',
      body: JSON.stringify(payload),
    }),
};
```

---

## 🟧 2.  Hook “Continue to Sign” Button (Step 4 of your wizard)

`src/pages/Step4_FinancialInfo.tsx`

```tsx
const handleContinueToSign = async () => {
  try {
    const draftRes = await Applications.createDraft(allFormValues);
    const { applicationId, signUrl } = await draftRes.json();

    // Store draft ID in context for later steps
    setApplicationId(applicationId);

    // Redirect user to SignNow
    window.location.href = signUrl;
  } catch (err) {
    toast.error('Unable to start signature. Please try again.');
  }
};
```

---

## 🟧 3.  Capture SignNow Redirect and Resume Flow

Create a tiny landing page that SignNow redirects to after signing:

`src/pages/SignComplete.tsx`

```tsx
import { useSearchParams, useNavigate } from 'wouter';

export default function SignComplete() {
  const [params] = useSearchParams();
  const navigate = useNavigate();
  const appId = params.get('app');

  // Immediately route to document-upload step
  if (appId) {
    navigate(`/upload-documents?app=${appId}`, { replace: true });
  }

  return <p className="text-center mt-10">Redirecting…</p>;
}
```

Add route in `App.tsx`:

```tsx
<Route path="/sign-complete" component={SignComplete} />
```

*(Staff backend must have set `redirect_uri` to `/sign-complete?app=<id>` in the SignNow invite.)*

---

## 🟧 4.  Document-Upload Page Uses Existing Draft ID

`src/pages/UploadDocuments.tsx`

```tsx
import { useParams, useNavigate, useLocation } from 'wouter';
const [location] = useLocation();           // ?app=<id>
const appId = new URLSearchParams(location.split('?')[1]).get('app');

const handleFinalSubmit = async () => {
  const payload = { extraFields, documents };
  const res = await Applications.complete(appId!, payload);
  if (res.ok) navigate('/review');
};
```

---

## 🟧 5.  UI Copy Updates

Update any Step-4 button text to: **“Review & Sign”** instead of “Submit”.

Replace “Check your e-mail” strings with “Check your **SMS**”.

---

## 🟧 6.  Testing Checklist for Client

1. **Fill Steps 1-4** ⇒ click **Review & Sign**

   * Should call `POST /applications/draft` (200 JSON)
   * Browser redirects to SignNow

2. **SignNow completes** ⇒ redirected to `/upload-documents?app=<id>`

3. **Upload docs** ⇒ click **Submit**

   * Sends `PATCH /applications/:id/complete`
   * Receives 200 → confirm success toast

4. Verify dashboard shows application status “Submitted”.

---

## 🟢 What’s Needed from Staff (already queued)

* `POST /applications/draft` returns `{ applicationId, signUrl }`
* SignNow invite sets `redirect_uri` to `/sign-complete?app=<id>`
* `PATCH /applications/:id/complete` accepts docs + marks stage “new”

---

Tell the **client Replit AI** to implement the above files and route changes.
Once done, you can test an entire real flow:

`Step 1–4 → SignNow → Upload Docs → Staff Pipeline (“New”)`.

Let me know when you want backend route scaffolds or SMS rejection logic next.
