Certainly! Here’s a clear, detailed instruction you can give to Replit AI to build the **client-side application** that connects securely to the **existing backend and shared database** used by the staff portal:

---

## Instruction for Replit AI — Build the Client-Side Application (Multi-Tenant, Secure, Shared DB)

```
We want to build the **client-facing application** inside `/apps/client-app`. This app will:

- Be a React 18 + Vite + TypeScript web application
- Use Tailwind CSS and shadcn/ui for UI components
- Support multi-step financial application forms and document uploads
- Connect securely to the existing backend API, sharing the same database as the staff portal
- Use session-based authentication (Replit OAuth) for client users
- Implement offline support with IndexedDB for form data and documents synchronization
- Ensure tenant isolation and user-specific data access consistent with backend security

---

### Project Setup

- Create `/apps/client-app` folder with standard React + Vite setup using TypeScript
- Configure Tailwind CSS and shadcn/ui components
- Setup routing with Wouter (or React Router if preferred)
- Add Replit OAuth session authentication integration to manage client logins
- Create an API client module to communicate with backend APIs, sending necessary session cookies or tokens

---

### Core Functional Requirements

1. **Authentication**
   - Login page integrating Replit OAuth flow for client users
   - Redirect logged-in users to the client portal dashboard
   - Handle session expiry and automatic re-login

2. **Portal Dashboard**
   - Landing page after login
   - Options to start a new financial application or view FAQs/help

3. **Multi-Step Financial Application Form**
   - Step 1: Business details (e.g., headquarters location, financial status, use of funds)
   - Step 2: AI-powered lender product recommendations (term loan, line of credit, factoring) with explainer videos
   - Step 3: Dynamic questions based on selected lender product (custom per product category)
   - Step 4: Applicant personal details (name, contact info)
   - Step 5: Required document uploads, with validation on document types and counts
   - Step 6: E-signature integration (using SignNow or another service) with form data population
   - Step 7: Final review and submission

4. **Document Uploads**
   - Integrate file upload component supporting multiple files and formats
   - Support offline uploads and queue sync when online
   - Show upload progress and confirmation

5. **Offline Support & Data Sync**
   - Use IndexedDB or similar for storing form progress and documents offline
   - Sync with backend when internet connectivity is restored
   - Provide user feedback on sync status and errors

6. **API Integration**
   - Implement data fetching and mutation hooks (TanStack Query) for:
     - Submitting application form data
     - Uploading documents
     - Fetching lender product recommendations
     - Fetching user-specific application status
   - Ensure all requests include appropriate authentication/session info

7. **UI/UX Requirements**
   - Responsive design for desktop and mobile browsers
   - Accessible forms with validation feedback
   - Clear progress indicators on multi-step forms
   - Error handling for API failures and network issues

---

### Folder & File Structure Suggestion

```

/apps/client-app/
├── main.tsx
├── context/AuthContext.tsx          # manages session and auth state
├── lib/api.ts                      # API client module with session auth
├── lib/hooks/                      # TanStack Query hooks for API calls
│   ├── useApplicationForm.ts
│   ├── useDocuments.ts
│   ├── useLenderRecommendations.ts
│   └── useUserStatus.ts
├── components/                    # Reusable UI components
│   ├── MultiStepForm/
│   ├── DocumentUpload.tsx
│   ├── ProgressBar.tsx
│   ├── VideoExplainer.tsx
│   └── SignaturePad.tsx
├── routes/
│   ├── login.tsx
│   ├── dashboard.tsx
│   ├── application-form.tsx
│   └── faq.tsx
├── utils/                         # helper functions (validation, offline sync)
└── styles/

```

---

### Security & Compliance

- Respect all backend tenant isolation via session authentication
- Validate all inputs client-side before submission
- Never store sensitive tokens insecurely; rely on secure session cookies
- Handle session expiration gracefully by redirecting to login

---

### Deliverables

- A working React client app that can authenticate users, guide them through the multi-step financial application, upload documents, and submit everything to the shared backend
- Offline mode that saves progress and syncs seamlessly
- Well-structured, maintainable codebase consistent with existing staff portal styles and patterns
- Proper error handling and user feedback throughout

---

Once you scaffold this client app, notify me so I can assist with building individual components, API hooks, or testing.

```

---

If you want, I can help you next with:

* Writing example `useApplicationForm` hook with TanStack Query
* Creating the login/auth flow with Replit OAuth integration
* Building the multi-step form UI components step-by-step

Just let me know!
