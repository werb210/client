STEP 1: Confirm You‚Äôre Using the Production DB
In server/index.ts or wherever your Drizzle/Postgres client is initialized:

ts
Copy
Edit
const db = drizzleClient(process.env.DATABASE_URL!); // should be your production DB
Then confirm .env.production includes:

env
Copy
Edit
NODE_ENV=production
DATABASE_URL=postgresql://<your-production-db-url>
‚úÖ STEP 2: Import Data to Production DB
Ensure you have this export file (from dev DB):

bash
Copy
Edit
lender_products_export_2025-07-05.json
Then add an import script like scripts/importToProd.ts:

ts
Copy
Edit
import fs from 'fs';
import { db } from '@/db'; // your Drizzle DB client
import { lenderProducts } from '@/schema/lenderProducts';

async function importToProd() {
  const data = JSON.parse(fs.readFileSync('lender_products_export_2025-07-05.json', 'utf-8'));

  for (const product of data) {
    await db.insert(lenderProducts).values(product).onConflictDoNothing();
  }

  console.log(`‚úÖ Imported ${data.length} products into production`);
}

importToProd();
Run it:

bash
Copy
Edit
NODE_ENV=production tsx scripts/importToProd.ts
‚úÖ STEP 3: Verify Production API Response
From your terminal or browser:

bash
Copy
Edit
curl https://staffportal.replit.app/api/public/lenders
You should get:

json
Copy
Edit
{
  "success": true,
  "count": 41,
  "products": [...],
  "message": "Success",
  "debug": {
    "environment": "production"
  }
}
‚úÖ Confirm:

count is 41

products[] is not empty

debug.environment is production

‚úÖ STEP 4: Verify Staff Pages and Filters
In the staff app, confirm:

Lender product list page shows 41 entries

Product filter dropdown includes 8 categories

Each product card includes: name, amount range, country, category, documents

Edit/create functionality still works

üß© CLIENT APPLICATION INSTRUCTIONS
Goal: Confirm the client is syncing with the newly populated production staff DB.

‚úÖ STEP 1: Verify Environment Config
In .env or .env.production:

env
Copy
Edit
VITE_API_BASE_URL=https://staffportal.replit.app/api
‚úÖ Already done according to your report.

‚úÖ STEP 2: Trigger a Sync
Either:

Visit: /diagnostics/lenders
OR

Call: syncNow() if you're using the custom Cypress command
OR

Refresh the browser and wait up to 30 seconds for auto-sync

‚úÖ STEP 3: Confirm Live Data Appears
Expect to see:

json
Copy
Edit
{
  "productCount": 41,
  "source": "live_data",
  "usingFallback": false,
  "apiHealthy": true
}
And:

Landing page updates max funding amount

Step 2 shows 30+ product recommendations

Category dropdown includes all 8 types

Filters/search display accurate results

‚úÖ STEP 4: Remove Warning Banner (Optional)
If you're showing a warning banner when fallback data is used, confirm the banner disappears now that the sync is live.

‚úÖ FINAL CHECKLIST
Task	Owner	Status
Export dev DB ‚Üí JSON	Staff	‚úÖ Done
Import JSON into prod DB	Staff	‚¨úÔ∏è Run script
Confirm prod API returns 41 products	Staff	‚¨úÔ∏è Test /api/public/lenders
Client hits prod API	Client	‚úÖ Already done
Client syncs 41 products	Client	‚¨úÔ∏è Test sync
Client UI reflects new data	Client	‚¨úÔ∏è Visual verify
Categories updated in filters/search	Both	‚¨úÔ∏è Check dropdowns