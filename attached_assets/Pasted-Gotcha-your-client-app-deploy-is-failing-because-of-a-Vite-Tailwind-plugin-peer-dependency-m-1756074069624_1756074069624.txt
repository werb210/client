Gotcha—your **client app deploy is failing** because of a **Vite ↔ Tailwind plugin peer-dependency mismatch**. You’re on **Vite 7.x**, but `@tailwindcss/vite@4.1.x` only supports **Vite ^5.2 || ^6**. The installer bails before the build even starts, so Deploy shows a red “Build failed”.

Here’s a clean, safe fix you can paste into the **client app** right now.

---

# CLIENT APP – Deployment hotfix (Vite 6 lane)

### 1) Align versions in `package.json`

Set Vite to 6 and make sure the React plugin matches.

```json
{
  "devDependencies": {
    "vite": "^6.3.5",
    "@vitejs/plugin-react-swc": "^3.7.1",
    "@tailwindcss/vite": "^4.1.3",
    "typescript": "^5.5.4"
  }
}
```

> Keep your existing `react`, `react-dom`, `tailwindcss` versions as-is; the critical piece is **Vite 6 + plugin-react-swc 3.7+** to satisfy `@tailwindcss/vite`.

### 2) Clean install locally (or in the Replit shell)

```bash
rm -f package-lock.json pnpm-lock.yaml yarn.lock
rm -rf node_modules
npm i
```

### 3) Reconfigure Deploy (important)

In the Deploy → **Edit commands and secrets**:

* **Install**: `npm ci`
* **Build**: `npm run build`
* **Run**: your current start command (e.g., `node dist/index.js` or `npm start`)

Also toggle **“Enable dev dependencies in deployment”** ON (Vite/Tailwind plugin are devDeps).

### 4) Redeploy

That should turn the build bar green.

---

## Why this fixes it

* `@tailwindcss/vite@4.1.x` declares `peerDependencies: { vite: "^5.2.0 || ^6" }`.
* With Vite 7, `npm` refuses to install (no compatible peer), so the whole deploy fails pre-build.

---

## Fast fallback (only if you can’t touch versions)

Use one of these in Deploy **Install** (not recommended long-term):

```bash
npm ci --legacy-peer-deps
```

or set env var `NPM_CONFIG_LEGACY_PEER_DEPS=true`.

This forces install despite the mismatch, but the proper fix is the version alignment above.

---

## Bonus: why preview sometimes “doesn’t show the app”

If you see **“Refused to frame … because an ancestor violates ‘frame-ancestors ’none’”** in the console, that’s your **CSP** doing its job (great for prod) but it blocks Replit’s preview iframe.

Two ways to view during dev:

* Click **External page** (opens your app in a new tab; not inside an iframe).
* Or—dev-only—allow Replit in CSP:

```ts
// server/security/headers.ts (client app)
const isDev = process.env.NODE_ENV !== "production";
const frameAncestors = isDev
  ? ["'self'", "https://replit.com", "*.replit.com", "*.replit.dev", "*.id.repl.co"]
  : ["'none'"]; // keep strict in prod
```

(Prod stays `'none'` for A+ security; only dev is relaxed.)

---

## After deploy sanity checks

1. Open `/__version` (or your build badge) to confirm a fresh timestamp.
2. Load the site (External page) → no red CSP or build errors.
3. Chatbot launches with the welcome prompt.
4. Application → document upload still routes to Staff as before.

If anything still blocks, tell me the exact error from Deploy’s “View all failed builds” and I’ll zero in on it.
