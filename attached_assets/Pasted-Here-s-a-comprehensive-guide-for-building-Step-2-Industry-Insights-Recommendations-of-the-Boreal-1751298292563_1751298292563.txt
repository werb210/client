Here's a comprehensive guide for building Step 2 (Industry Insights & Recommendations) of the Boreal Financial application:

Step 2: Industry Insights & Product Recommendation System
Overview
Step 2 is a display-only stage that shows industry-specific insights and intelligent product recommendations based on user inputs from Step 1. It has no input fields but requires sophisticated backend logic.

Visual Layout & Structure
// Step 2 Card Structure
<Card>
  <CardHeader>
    <CardTitle>Industry Insights & Recommendations</CardTitle>
    <CardDescription>Based on your business profile, here are the best loan products for you</CardDescription>
  </CardHeader>
  <CardContent>
    {/* Profile Summary Section */}
    <div className="bg-blue-50 p-4 rounded-lg">
      <h3 className="font-semibold text-blue-900 mb-2">Your Profile Summary</h3>
      <div className="grid grid-cols-2 gap-4 text-sm">
        <div>Headquarters: <span className="font-medium">{headquarters}</span></div>
        <div>Funding Amount: <span className="font-medium">{fundingAmount}</span></div>
        <div>Industry: <span className="font-medium">{industry}</span></div>
        <div>Purpose: <span className="font-medium">{fundsPurpose}</span></div>
      </div>
    </div>
    {/* Geographic Filter Indicator */}
    <div className="bg-green-50 p-3 rounded-lg border border-green-200">
      <p className="text-sm text-green-700">
        <strong>Country Filter Active:</strong> Showing loan products available in {headquarters}
      </p>
    </div>
    {/* Product Selection Instructions */}
    <div className="bg-amber-50 p-4 rounded-lg border border-amber-200">
      <div className="flex items-start space-x-3">
        <Target className="w-5 h-5 text-amber-600 mt-0.5" />
        <div>
          <h4 className="text-sm font-semibold text-amber-800">Select Your Preferred Loan Product</h4>
          <p className="text-sm text-amber-700">
            Please click on the lender product below that best matches your business needs.
            Each option shows availability, terms, and match percentage.
          </p>
        </div>
      </div>
    </div>
    {/* Dynamic Product Categories */}
    <div className="space-y-4">
      {productCategories.map((category, index) => (
        <ProductCategoryCard 
          key={category.category}
          category={category}
          index={index}
          isSelected={selectedProduct === category.category}
          onSelect={setSelectedProduct}
        />
      ))}
    </div>
  </CardContent>
</Card>
Product Category Card Component
function ProductCategoryCard({ category, index, isSelected, onSelect }) {
  const categoryName = formatCategoryName(category.category);
  const matchScore = Math.max(95 - index * 5, 60); // Decreasing match scores
  
  return (
    <div 
      className={`border rounded-lg p-4 cursor-pointer transition-all duration-200 ${
        isSelected 
          ? 'border-blue-500 bg-blue-50 shadow-lg' 
          : 'hover:shadow-md hover:border-gray-300'
      }`}
      onClick={() => onSelect(isSelected ? '' : category.category)}
    >
      {/* Header with title and match score */}
      <div className="flex justify-between items-start mb-3">
        <div>
          <h4 className="font-semibold text-lg flex items-center">
            {categoryName}
            {isSelected && <CheckCircle className="w-5 h-5 ml-2 text-blue-600" />}
          </h4>
          <p className="text-gray-600">
            {category.count} products available ({category.percentage}%)
          </p>
        </div>
        <div className="text-right">
          <div className={`px-2 py-1 rounded text-sm font-medium ${
            index === 0 ? 'bg-green-100 text-green-800' : 
            index === 1 ? 'bg-blue-100 text-blue-800' : 
            'bg-yellow-100 text-yellow-800'
          }`}>
            {matchScore}% Match
          </div>
          {index === 0 && <div className="text-xs text-blue-600 mt-1">Best Match</div>}
        </div>
      </div>
      {/* Product statistics grid */}
      <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-3 text-sm">
        <div>
          <span className="text-gray-500">Available Products:</span>
          <div className="font-medium">{category.count} options</div>
        </div>
        <div>
          <span className="text-gray-500">Market Share:</span>
          <div className="font-medium">{category.percentage}% of portfolio</div>
        </div>
        <div>
          <span className="text-gray-500">Category:</span>
          <div className="font-medium">{categoryName}</div>
        </div>
      </div>
      {/* Selected state confirmation */}
      {isSelected && (
        <div className="mt-3 p-3 bg-gray-50 rounded">
          <p className="text-sm text-gray-600">
            Click "Continue" to see specific {categoryName.toLowerCase()} products 
            and detailed terms from our {category.count} available lenders.
          </p>
        </div>
      )}
    </div>
  );
}
Backend API Integration
1. Product Categories API Call
const { data: productCategories } = useQuery({
  queryKey: ['/api/loan-products/categories', headquarters, lookingFor, accountsReceivableBalance, fundingAmount, fundsPurpose],
  queryFn: async () => {
    const params = new URLSearchParams();
    if (headquarters) params.append('country', headquarters);
    if (lookingFor) params.append('lookingFor', lookingFor);
    if (accountsReceivableBalance) params.append('accountsReceivableBalance', accountsReceivableBalance);
    if (fundingAmount) params.append('fundingAmount', fundingAmount);
    if (fundsPurpose) params.append('fundsPurpose', fundsPurpose);
    
    const response = await fetch(`/api/loan-products/categories?${params.toString()}`);
    return response.json();
  },
  enabled: !!(headquarters && lookingFor && fundingAmount)
});
2. Backend Route Structure
// /api/loan-products/categories
router.get('/loan-products/categories', async (req, res) => {
  const { country, lookingFor, accountsReceivableBalance, fundingAmount, fundsPurpose } = req.query;
  
  // Apply multi-layer filtering
  let filteredProducts = await getAllActiveProducts();
  
  // 1. Geographic filtering
  filteredProducts = applyGeographicFilter(filteredProducts, country);
  
  // 2. Product type filtering (capital vs equipment)
  filteredProducts = applyProductTypeFilter(filteredProducts, lookingFor);
  
  // 3. Funding amount range filtering
  filteredProducts = applyAmountFilter(filteredProducts, fundingAmount);
  
  // 4. Accounts receivable filtering (removes factoring if no AR)
  filteredProducts = applyAccountsReceivableFilter(filteredProducts, accountsReceivableBalance);
  
  // 5. Purpose-based filtering
  filteredProducts = applyPurposeFilter(filteredProducts, fundsPurpose);
  
  // Group by category and calculate percentages
  const categoryStats = groupByCategory(filteredProducts);
  
  res.json({ success: true, data: categoryStats });
});
Multi-Layer Filtering Logic
1. Geographic Filtering
function applyGeographicFilter(products, country) {
  return products.filter(product => {
    if (country === 'canada') return product.offeredInCanada;
    if (country === 'united_states') return product.offeredInUs;
    return product.offeredInUs; // Default to US
  });
}
2. Product Type Filtering
function applyProductTypeFilter(products, lookingFor) {
  if (lookingFor === 'equipment') {
    return products.filter(p => p.productType === 'equipment_financing');
  } else if (lookingFor === 'capital') {
    return products.filter(p => 
      p.productType === 'term_loan' || p.productType === 'line_of_credit'
    );
  }
  return products; // 'both' shows all
}
3. Funding Amount Range Filtering
function applyAmountFilter(products, fundingAmount) {
  const { minAmount, maxAmount } = parseFundingAmountRange(fundingAmount);
  if (!minAmount || !maxAmount) return products;
  
  return products.filter(p => 
    p.minLoanAmount <= maxAmount && p.maxLoanAmount >= minAmount
  );
}
4. Purpose-Based Conditional Filtering
function applyPurposeFilter(products, fundsPurpose) {
  const purposeFilters = {
    'business_expansion': ['line_of_credit', 'factoring', 'working_capital', 'term_loan'],
    'working_capital': ['line_of_credit', 'working_capital', 'term_loan'],
    'equipment_purchase': ['equipment_financing'],
    'inventory': ['line_of_credit', 'factoring', 'purchase_order_financing', 'term_loan', 'working_capital'],
    'marketing': ['line_of_credit', 'term_loan', 'working_capital'],
    'debt_consolidation': ['line_of_credit', 'factoring', 'term_loan', 'working_capital'],
    'other': null // No filtering
  };
  
  const allowedTypes = purposeFilters[fundsPurpose];
  if (!allowedTypes) return products;
  
  return products.filter(p => allowedTypes.includes(p.productType));
}
Industry Insights System
function generateIndustryInsights(industry) {
  const insights = {
    manufacturing: {
      title: "Manufacturing Industry Insights",
      trends: ["Equipment financing is popular", "Working capital for inventory", "Export financing opportunities"],
      recommendations: ["Consider equipment loans for machinery", "Invoice factoring for cash flow", "SBA loans for expansion"],
      riskFactors: ["Commodity price fluctuations", "Supply chain disruptions", "Regulatory compliance"]
    },
    retail: {
      title: "Retail Industry Insights", 
      trends: ["Seasonal funding needs", "E-commerce expansion", "Inventory management"],
      recommendations: ["Line of credit for seasonal inventory", "POS financing programs", "Merchant cash advances"],
      riskFactors: ["Consumer spending patterns", "Competition from online retailers", "Inventory obsolescence"]
    },
    // ... additional industry profiles
  };
  
  return insights[industry] || null;
}
Navigation Logic
// Continue button logic
<Button 
  onClick={() => setCurrentStep(2)}
  disabled={!selectedProduct}
  className={`${!selectedProduct ? 'opacity-50 cursor-not-allowed' : ''}`}
>
  {!selectedProduct ? (
    <>
      <AlertCircle className="mr-2 h-4 w-4" />
      Select a Product to Continue
    </>
  ) : (
    <>
      Continue to Application
      <ArrowRight className="ml-2 h-4 w-4" />
    </>
  )}
</Button>
Key Features
Real-Time Data: All product categories come from live database of 42 authentic lender products
Dynamic Filtering: Five-layer filtering system reduces products based on business profile
Visual Feedback: Color-coded match scores, selection states, and best match indicators
Progressive Disclosure: Selected products show additional information
Responsive Design: Mobile-optimized grid layouts and touch-friendly interactions
Validation: Requires product selection before allowing progression to Step 3
State Management
const [selectedProduct, setSelectedProduct] = useState<string>("");
const [productCategories, setProductCategories] = useState(null);
// Validation for step progression
function canContinue(step) {
  if (step === 1) return selectedProduct !== "";
  return true;
}
This Step 2 implementation provides a sophisticated recommendation engine that intelligently filters and displays relevant loan products while educating users about their industry landscape and funding options.