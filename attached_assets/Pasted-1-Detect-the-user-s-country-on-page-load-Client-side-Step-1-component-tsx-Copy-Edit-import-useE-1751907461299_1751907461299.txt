1. Detect the user’s country on page load
Client-side (Step 1 component)
tsx
Copy
Edit
import { useEffect } from "react";
import { useFormContext } from "react-hook-form";
// ① tiny helper that calls your new API route
import { fetchUserCountry } from "@/lib/location";

export const Step1FinancialProfile = () => {
  const { setValue, watch } = useFormContext<ApplicationForm>();
  const current = watch("businessLocation");           // RHF field

  useEffect(() => {
    if (current) return;                               // user already chose
    fetchUserCountry().then(country => {
      if (country === "CA" || country === "US") {
        setValue("businessLocation", country === "CA" ? "Canada" : "United States");
      }
    });
  }, [current, setValue]);

  /* … render form … */
};
2. Add a minimal API route that returns the country code
Staff (or Client) backend
ts
Copy
Edit
// GET /api/user-country
export const userCountryRoute = async (req, res) => {
  try {
    // Use request IP if behind a proxy / Cloudflare
    const ip = (req.headers["cf-connecting-ip"] || req.ip) as string;
    // Free geo lookup (EdgeWorkers, Cloudflare, or your own table/cache)
    const country = await geoLookup(ip);               // returns "CA", "US", etc.
    res.json({ country });
  } catch (e) {
    res.json({ country: null });                       // graceful fallback
  }
};
If you’re on Replit without a geo-IP service, you can proxy to ipapi.co or ipinfo.io (they allow free low-volume lookups) or deploy a Cloudflare Worker to do it.

3. Light helper in the client
ts
Copy
Edit
export const fetchUserCountry = async (): Promise<"CA" | "US" | null> => {
  try {
    const r = await fetch("/api/user-country");
    const { country } = await r.json();
    return country === "CA" || country === "US" ? country : null;
  } catch { return null; }
};
4. Keep the dropdown editable
RH Form will still let the user change the value. The auto-selection only runs the first time, when businessLocation is empty.