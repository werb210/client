### Here’s the fastest, most bullet-proof way to **force the portal back to the exact landing page you showed** and stop Replit (or anyone) from automatically swapping it out again.

---

## 1. Roll back to the last *known-good* commit

```bash
# In the Replit shell
git log --oneline -- client/src/pages/LandingPage.tsx | head -5
# Pick the commit hash that still has your screenshot design
git checkout <GOOD_HASH> -- client/src/pages/LandingPage.tsx
git commit -m "Revert LandingPage to professional design (lock-in)"
git push
```

*That instantly restores the component exactly as it was.*

---

## 2. Route **only** that page at `/`

```tsx
// client/src/App.tsx   (or MainLayout.tsx — wherever your <Routes> live)
import LandingPage from '@/pages/LandingPage';

<Route path="/" element={<LandingPage />} />
```

*Delete or comment-out any other route that uses `/`, `Home`, `Portal`, etc.*

---

## 3. Delete the “new” placeholder components

```bash
rm client/src/pages/Home.tsx client/src/pages/Portal.tsx 2>/dev/null || true
# if there are index/Home exports:
sed -i '/Home/d;/Portal/d' $(git ls-files | grep -E '\.tsx?$')
git add .
git commit -m "Remove rogue Home/Portal pages"
git push
```

---

## 4. **Lock the file** so future agents (or careless commits) can’t overwrite it

Add a simple Husky pre-commit hook:

```bash
# .husky/pre-commit
pattern="client/src/pages/LandingPage.tsx"
if git diff --cached --name-only | grep -q "$pattern"; then
  echo "❌  LandingPage.tsx is locked; revert changes before committing." >&2
  exit 1
fi
```

*(You can lift the lock later by editing the hook.)*

---

## 5. Keep the build small & stable

* **Icons** – keep using the new lightweight `@/lib/icons.tsx`
* **Bundle check** – run `npm run build` locally once; if it succeeds, `replit deploy --with-cache` will reuse artifacts and stop trying to “optimise” the homepage again.

---

## 6. Verify in the browser

1. `npm run dev` → open `http://localhost:5173/`
2. You must see **exactly**
   *Professional Business Financing Solutions* → click *Start Your Application* → goes to `#/apply/step-1`.
3. If that passes, **deploy**:

   ```bash
   replit deploy --with-cache
   ```

---

### What this achieves

| Problem                         | Fix                                                     |
| ------------------------------- | ------------------------------------------------------- |
| Wrong page keeps appearing      | Only one component (`LandingPage`) is routed& committed |
| Replit “auto-creates” new pages | Deleted placeholders, added a pre-commit lock           |
| Build variations                | Re-use cache, no lucide-react, small bundle             |

After these steps, Replit (or any future agent) **cannot change the root page** without manually removing the hook and editing `LandingPage.tsx`, so your design stays untouched.

If you’d prefer a static, non-React HTML for `/` as an extra safeguard, let me know and I’ll generate it — but 99 % of teams find the **git-lock + single route** approach is all that’s required.
