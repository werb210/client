Perfect — let's now do **duplicate system detection and cleanup for the Replit Client application**, just like we did for Staff.

---

### ✅ REPLIT CLIENT INSTRUCTIONS – DUPLICATE DETECTION & CLEANUP

You must report findings back to **ChatGPT** in this format:

> **Client Duplicate System Cleanup Report** with ✅/❌ status and summaries.

---

## 🔍 PART 1: Search for Duplicate Components, Logic & Flat Field Usage

#### 1. **Detect multiple Step 4 components**

```bash
find src/routes -name "Step4*.tsx"
```

✅ Confirm which `Step4_ApplicantInfo_Complete.tsx` is active in routing
❌ Delete or disable legacy files like:

* `Step4_ApplicantDetails.tsx`
* `Step4_ApplicantDetails_Fixed.tsx`

Then check which ones are imported in:

```bash
grep -r "import.*Step4" src/
```

---

#### 2. **Search for legacy flat field usage (❌ Must be removed)**

We want only `state.step4?.firstName` etc., **never** `state.firstName`

Run:

```bash
grep -r "state\." src/routes | grep -v "step"
```

✅ Only allow step-based access (like `state.step1?.requestedAmount`)
❌ Remove all direct `state.firstName`, `state.email`, `state.businessName`, etc.

---

#### 3. **Search for duplicate submission logic**

```bash
grep -r "submitApplication" src/
grep -r "initiateSignNowDocument" src/
```

✅ Ensure all final submission routes use **only** `submitApplication()` from `staffApi.ts`
❌ Delete any calls to outdated or renamed API methods (e.g., `submitToStaff()`, `createLegacyApp()`)

---

#### 4. **Validate Smart Field handling in Step 6 and Step 7**

Run:

```bash
grep -r "smartField" src/
```

✅ There should only be one function that builds `signNowFields`
❌ Remove hardcoded or duplicate logic in Step 6 or Step 7

---

## 🧪 PART 2: Run Flat Field Violation Script (Optional)

Run this Node script to **auto-detect flat field violations**:

```bash
cd client && node -e "
const fs = require('fs');
const files = fs.readdirSync('./src/routes').filter(f => f.endsWith('.tsx'));
let total = 0;
files.forEach(file => {
  const content = fs.readFileSync('./src/routes/' + file, 'utf8');
  const matches = content.match(/state\.(firstName|email|businessName|lastName|title|phone)(?!\?)/g);
  if (matches?.length) {
    console.log(file, '❌', matches.length, 'violations');
    total += matches.length;
  }
});
console.log('\\nTotal violations:', total);
"
```

✅ You should see `0 violations`
❌ If not, fix or delete the listed components

---

## 📣 REPORT BACK TO CHATGPT

Please summarize the results like this:

```md
# Client Duplicate System Cleanup Report

✅ Step4 Component in Use: Step4_ApplicantInfo_Complete.tsx
❌ Deleted: Step4_ApplicantDetails.tsx, Step4_ApplicantDetails_Fixed.tsx

✅ Only using submitApplication()
❌ Removed legacy function initiateSignNowDocument()

✅ All state access now uses step-based model
❌ Removed 12 violations from 3 legacy files

✅ One smartField generator used for SignNow

🧪 Flat Field Violation Script:
- Total violations: 0 ✅ Fully compliant

Client now clean and 100% aligned with ChatGPT step-based structure
```

Once you’ve submitted the client cleanup report, we’ll proceed to final testing:
→ Do the documents populate correctly in the SignNow template?
→ Is Step 6 → Step 7 redirection triggered automatically after webhook?

Let me know when Replit has completed this.
