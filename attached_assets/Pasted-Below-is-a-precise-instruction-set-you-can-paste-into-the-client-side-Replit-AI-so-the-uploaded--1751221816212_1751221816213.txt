Below is a precise instruction set you can paste into the **client-side Replit AI** so the uploaded HTML becomes the new **default landing page** and the rest of the routes keep working.

---

## üüß CLIENT-APP INSTRUCTIONS

### 1  Replace the existing `LandingPage.tsx`

1. **Create** `src/pages/LandingPage.tsx` (overwrite if it already exists).
2. **Paste** the uploaded HTML inside a React component:

```tsx
import React from "react";

/* Important: remove <html>, <head>, <body> wrappers.  
   Keep only the main div inside `return (‚Ä¶)` and
   convert `class=` ‚Üí `className=`  */

export default function LandingPage() {
  return (
    <>
      {/* ======  Paste converted HTML HERE  ====== */}
    </>
  );
}
```

> *Tip:* VS Code ‚ÄúHTML ‚ûú JSX‚Äù extensions or [https://magic.reactjsx.com/](https://magic.reactjsx.com/) make conversion quick (class ‚Üí className, self-closing tags, etc.).

3. **Link buttons**:

```html
<button onClick={() => navigate("/login")}>Sign In</button>
<button onClick={() => navigate("/register")}>Get Started</button>
<!-- Any ‚ÄúStart Your Application / Apply Now‚Äù  -->
<button onClick={() => navigate("/application/step-1")}>Apply Now</button>
```

Import `useNavigate` from `react-router-dom`.

---

### 2  Set it as the **default route**

In `src/App.tsx` (or your router file):

```tsx
import LandingPage from "@/pages/LandingPage";

<Routes>
  <Route path="/" element={<LandingPage />} />
  {/* keep existing auth & wizard routes */}
  <Route path="/login" element={<Login />} />
  <Route path="/register" element={<Register />} />
  <Route path="/application/*" element={<ApplicationWizard />} />
</Routes>
```

Remove or comment any previous test/home pages.

---

### 3  Clean entry-point

`src/main.tsx` should only mount `<App />`:

```tsx
ReactDOM.createRoot(document.getElementById("root")!).render(<App />);
```

Delete any dev-bypass or test-page overrides.

---

### 4  Static assets

If the uploaded HTML references local CSS/JS bundles, delete those lines; your React app already has Tailwind+Vite. Only keep:

* Lucky Orange script (if still required)
* Custom `<style>` brand variables (convert to Tailwind config later)

---

### 5  Smoke-test checklist

| Action                            | Expected                                 |
| --------------------------------- | ---------------------------------------- |
| Visit `/`                         | New landing page renders                 |
| Click **Sign In**                 | Navigates to `/login` form               |
| Click **Get Started / Apply Now** | Goes to application wizard step 1        |
| Hard refresh                      | Still lands on new page (no HMR overlay) |

---

### 6  Tell Replit AI (exact wording)

> **‚ÄúOverwrite `src/pages/LandingPage.tsx` with the uploaded landing-page HTML converted to JSX, make it the `/` route, remove any test pages, and ensure buttons route to `/login`, `/register`, and `/application/step-1`. Then run the dev server.‚Äù**

---

## (Nothing to change on Staff-side for this task.)

Once this is merged you‚Äôll have the exact page the user sees in the screenshot as the first thing every visitor loads. Let me know when you want the **Sign-In page** or **Portal dashboard** refactor next!
