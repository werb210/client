Thanks — let’s clarify the roles based on your setup:

---

## 🔁 Architecture Recap (Hybrid System)

* **Staff App** (📦 **Data owner** + **API provider** = **Sending API**):

  * Owns the **PostgreSQL database** (43 lender products, real-time source of truth)
  * Hosts API routes like:

    * `GET /api/lenders/products` — internal
    * `GET /api/public/lenders` — CORS-enabled for the client
  * No client-facing UI

* **Client App** (🖥️ **Frontend-only consumer** = **Receiving API**):

  * Fetches data from staff APIs (not a true backend — only API client)
  * Uses **TanStack Query** + `fetchLenderProducts()` to call `/api/public/lenders`
  * Displays product matches in Step 2 of the multi-step application form

---

## ✅ Confirmed Working

From both reports:

| Component                         | Status                                                         |
| --------------------------------- | -------------------------------------------------------------- |
| `fetchLenderProducts()` in client | ✅ implemented and typed                                        |
| `/api/public/lenders` in staff    | ✅ CORS-enabled, returns real 43 products                       |
| Test UI at `/lender-test`         | ✅ shows real lenders with clean UI                             |
| Matching engine                   | ✅ intelligent scoring logic (amount, industry, location, etc.) |

---

## ❌ So what’s the actual issue?

Based on your wording:

> “Given the hybrid system… what is the issue and how do we fix it…”

There are only **three possible remaining issues**, depending on where you are in the flow:

---

### ✅ If the client is **already receiving live data**, and it displays properly:

**There is no issue to fix. The system works.**

BUT… double-check the **target location of the endpoint** in client code:

```ts
// WRONG (internal-only path):
fetch("/api/lenders/products");

// CORRECT (public-facing CORS-enabled path):
fetch("https://staff-app.replit.app/api/public/lenders");
```

Make sure you’re not using a local-only endpoint (`/api/lenders/products`) that works in dev but fails in production.

---

### ⚠️ If the client works in dev, but not in production (CORS issue):

#### Problem:

Client browser blocks fetch to `https://staff-app.replit.app/api/lenders/products` due to missing CORS headers.

#### Fix:

Ensure the **staff app CORS middleware** is allowing requests from your client domain.

```ts
import cors from "cors";

app.use(cors({
  origin: ["https://client.replit.app", "http://localhost:5173"], // add all frontends
  methods: ["GET"],
  credentials: false
}));
```

> Also verify this is set **before** your route declarations.

---

### ❌ If the data is still fake or placeholder in Step 2:

You may have:

* Fetched real data in `/lender-test` ✅
* But left Step 2 wired to the old `/api/recommendations` ❌

#### Fix:

Make sure **Step 2** calls the **real** hook:

```ts
// In StepTwoForm.tsx
import { useQuery } from "@tanstack/react-query";
import { fetchLenderProducts } from "@/api/lenderProducts";

const StepTwoForm = ({ applicationData }) => {
  const { data: products } = useQuery(["lenderProducts"], fetchLenderProducts);
  const matches = computeMatches(products, applicationData);

  return <ProductRecommendationList matches={matches} />;
};
```

---

## ✅ Final Checklist

| Item                                                           | Confirm |
| -------------------------------------------------------------- | ------- |
| Client calls **public** staff API (`/api/public/lenders`)      | ✅       |
| CORS on staff allows client origin                             | ✅       |
| Step 2 uses real `fetchLenderProducts()` logic                 | ✅       |
| No leftover mock `/api/recommendations` or `fakeData.ts` files | ✅       |
| Dev + Prod environments both tested                            | ✅       |

---

If you send me your full `fetchLenderProducts.ts`, I can verify that the URL and fallback logic are correct for both dev and prod.

Would you like me to generate:

* A shared `.env` system for API URLs?
* A test script to verify the real product fetch in CI or live?
