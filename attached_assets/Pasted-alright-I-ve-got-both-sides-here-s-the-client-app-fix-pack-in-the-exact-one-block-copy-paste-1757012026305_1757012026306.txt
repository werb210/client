alright — I’ve got both sides. here’s the **client app** fix pack in the exact one-block, copy/paste format we use.

---

# ALL-IN-ONE COPY/PASTE INSTRUCTION BLOCK — **CLIENT APP** (CSP / Permissions-Policy / sandbox / fonts)

**GOAL:** remove invalid CSP sources (`'unsafe-dynamic'`, `report-uri` inside `default-src`, path with `?`), allow required vendors (GTM/GA, reCAPTCHA, Twilio), drop invalid iframe sandbox flag, silence “unrecognized feature” warnings, and fix Google Fonts 404s.

---

## 0) QUICK CHECK (copy/paste)

```bash
# see where headers/meta are defined
rg -n "Content-Security-Policy|Permissions-Policy|Feature-Policy" -S .
rg -n "sandbox=" -S .
rg -n "fonts\.gstatic\.com|fonts\.googleapis\.com|Inter" -S .
```

---

## 1) NEXT.JS HEADERS: **authoritative CSP + permissions** (copy/paste)

> If you’re not on Next.js, skip to §2.

Create/replace **`next.config.js`** (or merge the `headers()` export):

```js
/** @type {import('next').NextConfig} */
const isProd = process.env.NODE_ENV === 'production';

const SCRIPT_INLINE = isProd ? "" : "'unsafe-inline'";
const STYLE_INLINE  = isProd ? "" : "'unsafe-inline'";

const csp = [
  "default-src 'self';",
  // scripts used by client (GTM/GA, Twilio, reCAPTCHA)
  `script-src 'self' ${SCRIPT_INLINE} https://www.googletagmanager.com https://www.google-analytics.com https://sdk.twilio.com https://media.twiliocdn.com https://static.twilio.com https://www.recaptcha.net https://www.gstatic.com https://www.google.com;`,
  // styles + fonts
  `style-src 'self' ${STYLE_INLINE} https://fonts.googleapis.com;`,
  "font-src 'self' https://fonts.gstatic.com data:;",
  // images + blobs
  "img-src 'self' https: data: blob:;",
  // XHR/fetch/websockets — add your API origins here if not same origin
  "connect-src 'self' https://*.replit.dev https://*.janeway.replit.dev https://*.picard.replit.dev https://www.googletagmanager.com https://www.google-analytics.com https://www.recaptcha.net https://www.google.com https://www.gstatic.com https://*.twilio.com wss://*.twilio.com;",
  // iframes (reCAPTCHA, google)
  "frame-src 'self' https://www.google.com https://www.recaptcha.net;",
  "frame-ancestors 'self';",
  "base-uri 'self';",
  "form-action 'self';",
  "object-src 'none';",
  "upgrade-insecure-requests;",
  // NOTE: report-uri is a separate directive, NEVER inside default-src
  "report-uri /csp-report;"
].join(" ");

const permissions = [
  // remove unknown/legacy features to silence warnings
  "accelerometer=()",
  "ambient-light-sensor=()",     // harmless if present; can be removed
  "autoplay=()",
  "battery=()",
  "camera=()",
  "display-capture=()",
  "encrypted-media=()",
  "fullscreen=*",                // if you need fullscreen
  "geolocation=()",
  "gyroscope=()",
  "magnetometer=()",
  "microphone=()",
  "midi=()",
  "payment=()",
  "publickey-credentials-get=()",
  "screen-wake-lock=()",
  "usb=()",
].join(", ");

const nextConfig = {
  async headers() {
    return [
      {
        source: "/(.*)",
        headers: [
          { key: "Content-Security-Policy", value: csp },
          { key: "Permissions-Policy", value: permissions },
          { key: "Referrer-Policy", value: "strict-origin-when-cross-origin" },
          { key: "X-Content-Type-Options", value: "nosniff" },
          { key: "X-Frame-Options", value: "SAMEORIGIN" },
          { key: "X-DNS-Prefetch-Control", value: "off" }
        ],
      },
    ];
  },
};

module.exports = nextConfig;
```

> **Why this fixes your errors**
>
> * Removes **`'unsafe-dynamic'`** (invalid).
> * Moves **`report-uri`** to its own directive.
> * Eliminates any path/query sources (origins only).
> * Adds Twilio (HTTP + **WSS**), reCAPTCHA, Google Tag Manager, GA.
> * Allows Google Fonts (styles+fonts) and blocks inline except in dev.

---

## 2) VITE/STATIC FALLBACK (if not on Next) (copy/paste)

Add a `<meta http-equiv="Content-Security-Policy" content="...">` to **`index.html`** with the same policy string as above **(use dev `'unsafe-inline'` only while developing)**, or set headers on your reverse proxy/Express wrapper.

---

## 3) REMOVE INVALID IFRAME SANDBOX FLAG (copy/paste)

```bash
# find and edit all occurrences
rg -n "allow-downloads-without-user-activation" -S .
# change e.g.:
#   sandbox="allow-scripts allow-same-origin allow-downloads-without-user-activation"
# to:
#   sandbox="allow-scripts allow-same-origin"
```

---

## 4) GOOGLE FONTS 404 FIX (copy/paste)

Prefer the CSS API over hardcoding `.woff2` URLs.

**A.** In your global CSS or `_app.tsx`:

```css
/* styles/globals.css (or similar) */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
```

**B.** Ensure CSP allows:

* `style-src … https://fonts.googleapis.com`
* `font-src … https://fonts.gstatic.com data:`

**C.** If you need to self-host Inter, use `next/font`:

```ts
// pages/_app.tsx (Next 13-12) or app/layout.tsx (Next 13+)
import { Inter } from 'next/font/google';
const inter = Inter({ subsets: ['latin'] });
```

Remove any hard-coded `https://fonts.gstatic.com/s/inter/v12/...` links that 404.

---

## 5) OPTIONAL: TWILIO READY (copy/paste)

```ts
// call from a user gesture before Device.setup()
await navigator.mediaDevices.getUserMedia({ audio: true }).catch(() => {/* show prompt */});
```

---

## 6) VERIFY (copy/paste)

```bash
# rebuild & run
npm run build && npm run start

# confirm headers
curl -s -I http://localhost:3000 | grep -iE "content-security-policy|permissions-policy"

# in browser DevTools:
# - No messages about: 'unsafe-dynamic', report-uri in default-src, or path '?'
# - Twilio WS connects (Network → WS)
# - reCAPTCHA/GTM scripts load
# - Fonts load without 404
# - No "unrecognized feature" spam (or minimized)
```

---

## 7) GOTCHAS

* **Don’t** place full URLs or `?query` in CSP; only **origins** belong there.
* Keep **WSS** (`wss://*.twilio.com`) in `connect-src` for Twilio.
* Chrome extension errors (`chrome-extension://…`) are external; ignore.
* “Non-passive listener” warnings are **performance**, not CSP.
* Use `'unsafe-inline'` only in **dev**; switch to nonces/hashes for prod.

---

## 8) SUCCESS CRITERIA

* Console no longer shows:

  * **invalid source** `'unsafe-dynamic'`
  * **report-uri** inside `default-src`
  * **invalid path** with `?` in CSP sources
  * **invalid sandbox flag** messages
* Twilio, reCAPTCHA, GTM/GA, and Fonts work as expected.

---

if you want, I can also provide the **nonce-based prod CSP** snippet next so you can drop `'unsafe-inline'` entirely.
