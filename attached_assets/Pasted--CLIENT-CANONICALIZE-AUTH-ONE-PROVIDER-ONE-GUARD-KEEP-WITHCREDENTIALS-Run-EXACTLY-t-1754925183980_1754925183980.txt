# === CLIENT: CANONICALIZE AUTH (ONE PROVIDER + ONE GUARD), KEEP WITHCREDENTIALS ===
# Run EXACTLY this. Only the changes below.

set -euo pipefail

echo "⏱ Git HEAD (before):"
git log -1 --pretty=oneline || true

# 1) Create canonical axios instance with withCredentials ON
mkdir -p client/src/lib
cat > client/src/lib/api.ts <<'TS'
import axios from "axios";
export const api = axios.create({ baseURL: "/api", withCredentials: true });
TS

# 2) Canonical AuthProvider (single source)
mkdir -p client/src/auth
cat > client/src/auth/AuthProvider.tsx <<'TSX'
import React, { createContext, useContext, useEffect, useState } from "react";
import { api } from "../lib/api";
type User = { id: string; email: string; role: string } | null;
type Ctx = {
  user: User;
  loading: boolean;
  login: (email: string, password: string) => Promise<{ mfa: "required" }>;
  requestOtp: (email: string) => Promise<{ cooldownSeconds?: number; debugCode?: string }>;
  verifyOtp: (email: string, code: string) => Promise<void>;
  logout: () => Promise<void>;
};
const C = createContext<Ctx>(null as any);
export const useAuth = () => useContext(C);
export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User>(null);
  const [loading, setLoading] = useState(true);
  async function load() {
    try { const { data } = await api.get("/auth/session"); setUser(data?.ok ? data.user : null); }
    catch { setUser(null); } finally { setLoading(false); }
  }
  useEffect(() => { load(); }, []);
  async function login(email: string, password: string) {
    const { data } = await api.post("/auth/login", { email, password });
    if (!data?.ok) throw new Error(data?.error || "LOGIN_FAILED");
    return { mfa: "required" as const };
  }
  async function requestOtp(email: string) {
    const { data } = await api.post("/auth/request-otp", { email });
    if (!data?.ok) throw new Error(data?.message || data?.error || "OTP_SEND_FAILED");
    return { cooldownSeconds: data.cooldownSeconds, debugCode: data.debugCode };
  }
  async function verifyOtp(email: string, code: string) {
    const { data } = await api.post("/auth/verify-otp", { email, code });
    if (!data?.ok) throw new Error(data?.error || "OTP_VERIFY_FAILED");
    await load();
  }
  async function logout() { await api.post("/auth/logout"); setUser(null); }
  return <C.Provider value={{ user, loading, login, requestOtp, verifyOtp, logout }}>{children}</C.Provider>;
};
TSX

# 3) Canonical RequireAuth guard
cat > client/src/auth/RequireAuth.tsx <<'TSX'
import React from "react";
import { Navigate, useLocation } from "react-router-dom";
import { useAuth } from "./AuthProvider";
export default function RequireAuth({ children }: { children: JSX.Element }) {
  const { user, loading } = useAuth();
  const loc = useLocation();
  if (loading) return <div className="p-6 text-sm">Checking session…</div>;
  if (!user) return <Navigate to="/login" state={{ from: loc }} replace />;
  return children;
}
TSX

# 4) Disable duplicate AuthProviders/RequireAuth implementations (non-destructive)
for f in $(rg -l --glob "client/**" -e "export .*AuthProvider" -e "createContext\\(" -e "RequireAuth" | grep -v "client/src/auth/AuthProvider.tsx" | grep -v "client/src/auth/RequireAuth.tsx" || true); do
  mv "$f" "${f}.disabled" && echo "Disabled duplicate auth file: $f"
done

# 5) Ensure app entry wraps with AuthProvider (only if file exists)
for entry in client/src/main.tsx client/src/main.jsx client/src/App.tsx; do
  if [ -f "$entry" ]; then
    cp "$entry" "$entry.bak"
    # Insert wrapper if not present
    if ! rg -n "AuthProvider" "$entry" >/dev/null; then
      awk '
        BEGIN{s=0}
        /createRoot\\(|ReactDOM\\.createRoot\\(/ && s==0 {print; print "import { AuthProvider } from \\"./auth/AuthProvider\\";"; s=1; next}
        /<Router>|<BrowserRouter>/ && !p { print; print "<AuthProvider>"; p=1; next}
        /<\\/Router>|<\\/BrowserRouter>/ && p { print "</AuthProvider>"; p=0; print; next}
        {print}
      ' "$entry" > "$entry.tmp" && mv "$entry.tmp" "$entry"
    fi
  fi
done

# 6) Report current state & compile (read-only check)
echo "🔎 axios baseURL/withCredentials:"
rg -n --glob "client/**" -e "axios\\.create\\(" -e "baseURL" -e "withCredentials" || true

echo "🔒 Auth files present:"
ls -la client/src/auth/AuthProvider.tsx client/src/auth/RequireAuth.tsx

echo "🧪 Typecheck/build:"
npm run -s typecheck || echo "typecheck failed"
npm run -s build:client || echo "build:client failed"

echo "=== REQUIRED REPORT (paste below this line) ===
[CLIENT REPORT - AUTH CANONICALIZED]
- Disabled duplicate auth files: $(ls client/src/**/*disabled 2>/dev/null || echo none)
- axios config matches '/api' + withCredentials=true: $(rg -n --glob "client/**" "axios\\.create\\(")
- AuthProvider/RequireAuth now canonical: client/src/auth/AuthProvider.tsx, client/src/auth/RequireAuth.tsx
- Typecheck/build: (see above lines)
[END CLIENT REPORT - AUTH CANONICALIZED]"
