# ┏━━━━━━━━ CLIENT: prove same instance + reconcile counts (NO-DUP) ━━━━━━━━┓
# • Calls Staff /api/_int/state and /api/v1/products using client env/token
# • Compares DB host, instance headers, counts, and shared-token fingerprint
# • Flags env/token drift if Client ≠ Staff
# • Keeps single canonical paths; no legacy endpoints
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
set -euo pipefail

echo "== CLIENT ENV =="
echo "VITE_STAFF_API_URL=${VITE_STAFF_API_URL:-https://staff.boreal.financial/api}"
echo "VITE_CLIENT_APP_SHARED_TOKEN set? $([ -n "${VITE_CLIENT_APP_SHARED_TOKEN:-}" ] && echo yes || echo no)"
BASE="${VITE_STAFF_API_URL:-https://staff.boreal.financial/api}"

# 1) Create reconciliation probe
mkdir -p scripts reports
cat > scripts/reconcile_staff_instance.mjs <<'JS'
import crypto from "crypto";
const BASE=(process.env.VITE_STAFF_API_URL||"https://staff.boreal.financial/api").replace(/\/+$/,'');
const TOK =process.env.VITE_CLIENT_APP_SHARED_TOKEN||"";

async function j(u,opt={}) {
  const r=await fetch(u,{...opt,headers:{Authorization:`Bearer ${TOK}`,...(opt.headers||{})}});
  const headers=Object.fromEntries([...r.headers.entries()].map(([k,v])=>[k.toLowerCase(),v]));
  let body=null; const ct=r.headers.get("content-type")||"";
  try{ body=ct.includes("json")? await r.json() : await r.text(); }catch{}
  return {status:r.status, headers, body};
}
function fp(s){ return crypto.createHash("sha256").update(s).digest("hex").slice(0,12); }

(async()=>{
  const wantFp = fp(TOK);
  const state = await j(`${BASE}/_int/state`);
  const prod  = await j(`${BASE}/v1/products`);
  const count = Array.isArray(prod.body)? prod.body.length : null;
  const hdrDb = prod.headers["x-db-host"] || null;
  const hdrInst = prod.headers["x-instance"] || null;
  const hdrSha = prod.headers["x-git-sha"] || null;

  const out = {
    env_base: BASE,
    prod_status: prod.status,
    prod_count: count,
    prod_headers: { x_db_host: hdrDb, x_instance: hdrInst, x_git_sha: hdrSha },
    state_status: state.status,
    state_body: state.body,
    client_token_fp: wantFp,
    token_fp_match: !!(state.body && state.body.token_fp && state.body.token_fp===wantFp)
  };
  console.log(JSON.stringify(out, null, 2));

  // Simple exit codes: 0=ok, 2=mismatch
  if (prod.status!==200 || state.status!==200) process.exit(2);
  if (typeof count!=="number") process.exit(2);
  if (!state.body || state.body.ok!==true) process.exit(2);
  if (!out.token_fp_match) process.exit(2);
})();
JS

# 2) Run reconciliation
node scripts/reconcile_staff_instance.mjs | tee reports/reconcile_client.json

# 3) Interpret quickly
echo "== QUICK INTERPRET =="
node -e 'const o=require("./reports/reconcile_client.json"); const ok=(o.prod_count===o.state_body.products_count); console.log({prod_count:o.prod_count, staff_products:o.state_body.products_count, x_db_host:o.prod_headers.x_db_host, staff_db_host:o.state_body.db_host, token_fp_match:o.token_fp_match, instance:o.prod_headers.x_instance}); if(!ok) process.exit(2);'

# 4) Enforce single canonical path; delete legacy helpers (NO-DUP)
rm -f src/services/lenderProducts.ts src/services/lender-products.ts 2>/dev/null || true
if command -v rg >/dev/null 2>&1; then
  echo "Scanning for legacy endpoints…"
  if rg -n "/lender-products|/api/products(?!/v1)" src; then
    echo "❌ Found legacy endpoint references above. Replace with '/v1/products' only."; exit 2;
  else
    echo "✔ No legacy endpoint references detected."
  fi
fi

# 5) Optional DNS sanity (should show the same IP from your local and server CI)
( command -v dig >/dev/null 2>&1 && echo "DNS staff.boreal.financial →" && dig +short staff.boreal.financial || true ) >/dev/null || true

echo "== CLIENT VERIFY =="
curl -sS -H "Authorization: Bearer ${VITE_CLIENT_APP_SHARED_TOKEN:-}" "$BASE/v1/products" | jq 'length'
curl -sS -H "Authorization: Bearer ${VITE_CLIENT_APP_SHARED_TOKEN:-}" "$BASE/required-docs" | jq 'length' || true

echo "✅ CLIENT: reconciled against Staff instance. If counts still differ, the token or base URL is not the same as Staff’s state."
