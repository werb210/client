### üéØ Root cause confirmed: **CORS**

* **Evidence**: Requests *reach* the staff server (you saw `400` responses when you purposely sent malformed data), yet every **browser** call from `https://clientportal.replit.app` fails with `corsOrigin: null`.
* **Meaning**: The browser blocks the real request during the **pre-flight OPTIONS** phase because the server never replies with the required `Access-Control-Allow-Origin` header (and friends).

Once CORS is opened up for the client‚Äôs origin, the full 43-product payload will flow automatically; no further client-side changes are needed.

---

## üõ†Ô∏è Fix: add a **single** CORS-enabling middleware in the staff backend

Below assumes the staff server is **Node + Express** (it matches the code snippets you‚Äôve shown previously). Adjust paths if you‚Äôre using a framework wrapper.

```ts
// staff/src/server.ts (or index.ts)
import express from "express";
import cors from "cors";

const app = express();

/* ----------  ADD THIS BEFORE ANY ROUTE DECLARATIONS  ---------- */
const allowlist = [
  "https://clientportal.replit.app", // production React app
  "http://localhost:5000",           // dev preview (vite preview or `replit dev`)
];

app.use(
  cors({
    origin: (origin, cb) => {
      // Handle direct server-to-server calls (no Origin header)
      if (!origin) return cb(null, true);
      return allowlist.includes(origin)
        ? cb(null, true)
        : cb(new Error("CORS ‚Äì origin not allowed"));
    },
    methods: ["GET", "OPTIONS"],
    maxAge: 86400,         // 24 h preflight cache
  }),
);
/* --------------------------------------------------------------- */

// ‚Ä¶existing bodyParser / routes / error handlers‚Ä¶
app.get("/api/public/lenders", async (_, res) => {
  const products = await db.select().from(lenderProducts).orderBy(lenderProducts.name);
  res.json(products);
});

const PORT = process.env.PORT ?? 4000;
app.listen(PORT, () => console.log(`Staff API running on :${PORT}`));
```

### 1  Redeploy / wake the Replit instance

* Hit **Run** in Replit or redeploy via your CI pipeline so the new middleware goes live.
* If the project is set to sleep, consider adding Replit **Always-On** for the staff app.

### 2  Smoke-test from your own machine

```bash
# Pre-flight (OPTIONS)
curl -X OPTIONS \
     -H "Origin: https://clientportal.replit.app" \
     -H "Access-Control-Request-Method: GET" \
     -I https://staffportal.replit.app/api/public/lenders
```

‚úÖ Expect headers like:

```
HTTP/1.1 204 No Content
access-control-allow-origin: https://clientportal.replit.app
access-control-allow-methods: GET,OPTIONS
access-control-max-age: 86400
```

### 3  Verify the actual GET

```bash
curl -H "Origin: https://clientportal.replit.app" \
     https://staffportal.replit.app/api/public/lenders | jq '. | length'
# ‚Üí 43  (or higher)
```

### 4  Retest the client app

1. Open `https://clientportal.replit.app` (or your dev URL).
2. Navigate to `/lender-test` **or** Step 2 of the application.
3. **Network tab** ‚Üí confirm the request to `/api/public/lenders` returns **200** and \~43 items.
4. The recommendation list should now show the expanded set of lenders.

---

## üß© Optional hardening

| Concern              | Mitigation                                                                                                   |
| -------------------- | ------------------------------------------------------------------------------------------------------------ |
| **New environments** | Move the allowlist to an env var (`STAFF_CORS_ORIGINS="https://client‚Ä¶,http://localhost:5000"`).             |
| **Unexpected sleep** | Add a tiny uptime ping (cron or external monitor) or Replit Always-On.                                       |
| **Debugging**        | Keep `/healthz` route that returns plain ‚Äúok‚Äù for quick status checks.                                       |
| **Security**         | Expose only `GET` routes publicly; keep any write/update endpoints behind auth or a separate, non-CORS path. |

---

### ‚úÖ Next step: merge & redeploy the CORS patch

As soon as that‚Äôs live, the client will automatically switch from the 8-item fallback to the full 43-item dataset‚Äîno further client changes required. Ping me if the pre-flight still fails or if you need tailored middleware for a different backend stack (Fastify, Nest, etc.).
