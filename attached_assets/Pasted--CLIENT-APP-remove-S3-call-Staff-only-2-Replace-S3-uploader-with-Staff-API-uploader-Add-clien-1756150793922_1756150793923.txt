🟩 CLIENT APP — remove S3, call Staff only
2) Replace S3 uploader with Staff API uploader

Add client/src/lib/api.ts:

const BASE = ""; // same-origin
function assertSameOrigin(url: string) {
  if (/^https?:\/\//i.test(url)) {
    const u = new URL(url);
    const allowed = [location.origin];
    if (!allowed.includes(`${u.origin}`)) {
      throw new Error(`External fetch blocked in client: ${u.origin}`);
    }
  }
}

export async function apiFetch(input: RequestInfo | URL, init: RequestInit = {}) {
  const url = typeof input === "string" ? input : input.toString();
  assertSameOrigin(url);
  const res = await fetch(url, { credentials: "include", ...init });
  if (!res.ok) {
    const body = await res.text().catch(() => "");
    throw new Error(`API ${res.status} ${res.statusText}: ${body}`);
  }
  return res;
}

export async function uploadDocument(appId: string, file: File, documentType: string) {
  const fd = new FormData();
  fd.set("file", file);
  fd.set("document_type", documentType);

  const res = await apiFetch(`/api/applications/${appId}/documents/upload`, {
    method: "POST",
    body: fd,
  });
  return res.json() as Promise<{ ok: boolean; id?: string; file_key?: string }>;
}

export async function listDocuments(appId: string) {
  const res = await apiFetch(`/api/applications/${appId}/documents`);
  return res.json() as Promise<{ ok: boolean; data: any[] }>;
}

export async function setDocumentStatus(docId: string, status: "accepted"|"rejected"|"pending") {
  const res = await apiFetch(`/api/documents/${docId}`, {
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ status }),
  });
  return res.json() as Promise<{ ok: boolean }>;
}

export async function getDocumentViewUrl(docId: string) {
  const res = await apiFetch(`/api/documents/${docId}/view`);
  return res.json() as Promise<{ ok: boolean; url?: string }>;
}


Deprecate the S3 helper so it can’t be called by mistake.
Edit client/src/lib/s3Upload.ts to hard-fail:

// DO NOT USE: client-side S3 uploads are forbidden.
// Any import here will immediately throw in DEV so we can find stragglers.
export function s3Upload() {
  throw new Error("s3Upload() called from client — forbidden. Use uploadDocument() to Staff API.");
}
export default s3Upload;


Update the upload widget to use Staff API.
Edit client/src/components/upload/DocumentUploadWidget.tsx:

// import s3Upload from "@/lib/s3Upload";  // ❌ remove
import { uploadDocument, listDocuments } from "@/lib/api"; // ✅

async function handleUpload(appId: string, file: File, type: string) {
  const resp = await uploadDocument(appId, file, type);
  if (!resp.ok) throw new Error("Upload failed");
  // optional: refresh list
  return listDocuments(appId);
}

3) Block ALL external URLs at runtime (belt & suspenders)

Create client/src/lib/fetch-guard.ts and import it once (e.g., in main.tsx):

// Hard guard: prevent any fetch to external origins from client bundle.
(function patchFetch(){
  const _fetch = window.fetch.bind(window);
  window.fetch = (input: RequestInfo | URL, init?: RequestInit) => {
    const url = typeof input === "string" ? input : (input as any).toString?.() || "";
    if (/^https?:\/\//i.test(url)) {
      const u = new URL(url);
      const allowed = [location.origin];
      if (!allowed.includes(`${u.origin}`)) {
        throw new Error(`[BLOCKED] External fetch from client: ${u.origin}`);
      }
    }
    return _fetch(input, init);
  };
})();


(Optional) Replace any https://staff.boreal.financial/... or https://staffportal.replit.app/... with relative paths (e.g., /api/...). The guard will catch any that remain.

🔎 One-shot audits (run in Replit shell)
A) Find and fail on S3 & external calls in the client
echo "== S3 references in client =="
rg -n "s3|AWS|presign|presignedUrl|S3_" client/src || true

echo "== External URLs in client =="
rg -n "https?://(?!localhost|127\.0\.0\.1)" client/src || true


Expected: no matches beyond the deprecated s3Upload.ts (which throws).

B) Sanity test the Staff upload flow end-to-end
BASE="http://localhost:5000"
APP_ID="<PUT_A_REAL_APPLICATION_ID_HERE>"
TMPFILE=$(mktemp) && echo "hello" > "$TMPFILE"

echo "1) Upload"
curl -s -F "file=@${TMPFILE};type=text/plain" -F "document_type=bank_statements" \
  "$BASE/api/applications/$APP_ID/documents/upload" | jq

echo "2) List"
curl -s "$BASE/api/applications/$APP_ID/documents" | jq

DOC_ID=$(curl -s "$BASE/api/applications/$APP_ID/documents" | jq -r '.data[0].id // empty')

echo "3) Accept"
[ -n "$DOC_ID" ] && curl -s -X PATCH "$BASE/api/documents/$DOC_ID" \
  -H "Content-Type: application/json" -d '{"status":"accepted"}' | jq

echo "4) View URL"
[ -n "$DOC_ID" ] && curl -s "$BASE/api/documents/$DOC_ID/view" | jq


Pass = upload returns { ok:true }, list shows the file, patch returns { ok:true }, view returns a URL.