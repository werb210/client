# ===========================
# CLIENT: REAL SUBMISSION + DOC UPLOAD + TRACE
# ===========================
set -euo pipefail
req(){ command -v "$1" >/dev/null || { echo "Missing $1"; exit 1; }; }
req curl; req jq

# --- Config (override via env) ---
CLIENT_BASE="${CLIENT_BASE:-http://localhost:5000}"
STAFF_BASE="${STAFF_BASE:-https://staff.boreal.financial}"
TRACE="${TRACE:-/tmp/submission_continuity.json}"

# Real files to upload (must exist)
: "${DOC1:?Set DOC1 to a real file path}"; [ -s "$DOC1" ] || { echo "DOC1 not found or empty"; exit 1; }
: "${DOC1_TYPE:?Set DOC1_TYPE (e.g., 'bank_statements' or 'driver_license')}"
# (Optional second doc)
DOC2="${DOC2:-}"; DOC2_TYPE="${DOC2_TYPE:-}"

echo "📦 Pulling client catalog…"
C_RAW="$(curl -fsS "$CLIENT_BASE/api/v1/products")"
C_LIST="$(echo "$C_RAW" | jq -c 'if type=="array" then . else .items // [] end')"
TOTAL=$(echo "$C_LIST" | jq 'length')
[ "$TOTAL" -gt 0 ] || { echo "No products available on client"; exit 1; }
echo "✅ Client products: $TOTAL"

# Choose a US product first; fallback CA; fallback first
PID=$(echo "$C_LIST" | jq -r '[.[]|select((.country // .countryOffered)=="US")][0].id // [.[]|select((.country // .countryOffered)=="CA")][0].id // .[0].id')
SPROD=$(echo "$C_LIST" | jq -c --arg id "$PID" '.[]|select(.id==$id)')
SCNTRY=$(echo "$SPROD" | jq -r '.country // .countryOffered // "US"')
PRODUCT_NAME=$(echo "$SPROD" | jq -r '.name // .productName // "Unknown"')
LENDER_NAME=$(echo "$SPROD" | jq -r '.lenderName // "Unknown"')

echo "🎯 Selected: $PRODUCT_NAME ($LENDER_NAME) [$SCNTRY] — $PID"

# --- Build an intake from real values (adjust as needed for your test case) ---
AMOUNT="${AMOUNT:-25000}"
TIB="${TIB:-120}"      # time in business (months) — ensure this mirrors Step 1 mapping
REV="${REV:-100000}"   # monthly revenue
IND="${INDUSTRY:-Technology}"

INTAKE="$(jq -n --arg pid "$PID" --arg c "$SCNTRY" \
  --argjson amt "$AMOUNT" --argjson tib "$TIB" --argjson rev "$REV" \
  --arg ind "$IND" \
  '{product_id:$pid,country:$c,amount:$amt,timeInBusinessMonths:$tib,monthlyRevenue:$rev,industry:$ind}')"

echo "🧪 Validating intake…"
VALIDATION="$(curl -fsS -X POST "$CLIENT_BASE/api/applications/validate-intake" \
  -H 'content-type: application/json' -d "$INTAKE")"
echo "$VALIDATION" | jq '{ok,received:{country,amount,timeInBusinessMonths,monthlyRevenue,industry}}'
[ "$(echo "$VALIDATION" | jq -r '.ok // false')" = "true" ] || { echo "Validation failed"; exit 1; }

echo "📤 Submitting application…"
APP="$(curl -fsS -X POST "$CLIENT_BASE/api/applications" -H 'content-type: application/json' -d "$INTAKE")"
APP_ID="$(echo "$APP" | jq -r '.id // .application_id // .applicationId // empty')"
[ -n "$APP_ID" ] || { echo "No application id returned"; echo "$APP" | jq .; exit 1; }
echo "✅ Submitted: APP_ID=$APP_ID"

# --- Determine required docs snapshot (from Staff application after submission) ---
echo "📑 Fetching required_documents snapshot from Staff…"
APP_READ="$(curl -fsS "$STAFF_BASE/applications/$APP_ID?diag=1" 2>/dev/null || \
            curl -fsS "$STAFF_BASE/api/applications/$APP_ID?diag=1" 2>/dev/null)"
REQ_DOCS="$(echo "$APP_READ" | jq -c '.required_documents // []')"
echo "$REQ_DOCS" | jq '.'

# --- Upload documents via CLIENT API (try common endpoints; stop on first success) ---
echo "📎 Uploading documents…"
upload_once(){
  local ep="$1"; shift
  echo "→ trying $ep"
  curl -fsS -X POST "$CLIENT_BASE$ep" \
    -F "file=@${DOC1}" -F "doc_type=${DOC1_TYPE}" >/dev/null && { echo "  OK: $ep (DOC1)"; return 0; }
  return 1
}

# Try typical client routes
upload_once "/api/applications/${APP_ID}/documents" || \
upload_once "/api/applications/${APP_ID}/files"     || \
{ echo "No known client upload endpoint worked. Adjust the endpoint above to your API."; exit 1; }

# Optional second doc
if [ -n "${DOC2:-}" ]; then
  [ -s "$DOC2" ] || { echo "DOC2 path invalid"; exit 1; }
  curl -fsS -X POST "$CLIENT_BASE/api/applications/${APP_ID}/documents" \
    -F "file=@${DOC2}" -F "doc_type=${DOC2_TYPE:-additional}" >/dev/null || \
  curl -fsS -X POST "$CLIENT_BASE/api/applications/${APP_ID}/files" \
    -F "file=@${DOC2}" -F "doc_type=${DOC2_TYPE:-additional}" >/dev/null || \
  echo "⚠️ DOC2 upload skipped (no secondary endpoint matched)."
fi

# --- Write enhanced continuity trace (includes product snapshot & minimal doc info) ---
jq -n \
  --arg app_id "$APP_ID" \
  --argjson intake "$INTAKE" \
  --argjson staff_product "$(curl -fsS "$STAFF_BASE/api/v1/products" | jq -c --arg id "$PID" '.[]|select(.id==$id)')" \
  --argjson required_documents "$REQ_DOCS" \
  --arg client_base "$CLIENT_BASE" \
  --arg staff_base "$STAFF_BASE" \
  --arg timestamp "$(date -Iseconds)" \
  '{meta:{timestamp:$timestamp,client_base:$client_base,staff_base:$staff_base,test:"real_submission_with_docs"},
    app_id:$app_id,intake:$intake,staff_product_at_submit:$staff_product,required_documents:$required_documents}' \
  > "$TRACE"

echo "🧾 Trace written: $TRACE"
echo "Done."
