# ============================
# CLIENT APPLICATION — SINGLE BLOCK (copy/paste all)
# Feature: Analytics API scaffolding (shared prerequisites duplicated) — no client UI this step
# Replit Rules Header (for the agent):
# 1) Exact Execution; 2) Staff vs Client Separation; 3) Full Copy-Paste Blocks; 4) No Questions, No Delays;
# 5) Console Output & Reporting; 6) S3 is source of truth; 7) Office365 for staff email, SendGrid for system email.
# ============================
set -euo pipefail

# --- 0) Dependencies (none required for client UI here)

# --- 1) ENV (append)
mkdir -p .
if ! grep -q "ANALYTICS_DEFAULT_CURRENCY" .env 2>/dev/null; then
  cat >> .env << 'EOF'
# ===== Analytics =====
ANALYTICS_DEFAULT_CURRENCY=CAD
ANALYTICS_PDF_LOGO_S3_KEY=branding/logo.png
ANALYTICS_TIMEZONE=America/Edmonton
ANALYTICS_PDF_CRON=0 7 1 * *
EOF
fi

# --- 2) DB migration (duplicated shared schema)
mkdir -p server/db/migrations
cat > server/db/migrations/2025_08_14_analytics_kpis.sql << 'EOF'
CREATE TABLE IF NOT EXISTS analytics_daily (
  day date PRIMARY KEY,
  leads_new int DEFAULT 0,
  apps_created int DEFAULT 0,
  apps_funded int DEFAULT 0,
  funded_amount numeric DEFAULT 0,
  avg_hours_to_decision numeric,
  slas_breached int DEFAULT 0,
  messages_in int DEFAULT 0,
  messages_out int DEFAULT 0,
  esign_sent int DEFAULT 0,
  esign_completed int DEFAULT 0,
  kyc_approved int DEFAULT 0,
  updated_at timestamptz NOT NULL DEFAULT now()
);

CREATE OR REPLACE VIEW analytics_rolling_30d AS
SELECT
  (SELECT COALESCE(SUM(leads_new),0) FROM analytics_daily WHERE day > now()::date - 30) AS leads_30d,
  (SELECT COALESCE(SUM(apps_created),0) FROM analytics_daily WHERE day > now()::date - 30) AS apps_30d,
  (SELECT COALESCE(SUM(apps_funded),0) FROM analytics_daily WHERE day > now()::date - 30) AS funded_30d,
  (SELECT COALESCE(SUM(funded_amount),0) FROM analytics_daily WHERE day > now()::date - 30) AS funded_amount_30d;
EOF

# Apply migration
npm run db:migrate

# --- 3) Shared services & jobs (duplicated)
mkdir -p server/services server/jobs
cat > server/services/analytics.ts << 'EOF'
import { db } from "../db/client";
import { sql } from "drizzle-orm";

export async function computeDaily(dayISO: string) {
  const r1 = await db.execute(sql`
    SELECT
      (SELECT COUNT(*) FROM contacts WHERE DATE(created_at)=${dayISO}) AS leads_new,
      (SELECT COUNT(*) FROM applications WHERE DATE(created_at)=${dayISO}) AS apps_created,
      (SELECT COUNT(*) FROM applications WHERE funded_at IS NOT NULL AND DATE(funded_at)=${dayISO}) AS apps_funded,
      (SELECT COALESCE(SUM(amount_funded),0) FROM applications WHERE funded_at IS NOT NULL AND DATE(funded_at)=${dayISO}) AS funded_amount,
      (SELECT AVG(hours_to_decision) FROM le_outcomes WHERE DATE(updated_at)=${dayISO}) AS avg_hours_to_decision,
      (SELECT COUNT(*) FROM thread_slas WHERE DATE(breached_at)=${dayISO}) AS slas_breached,
      (SELECT COUNT(*) FROM comm_messages WHERE direction='in'  AND DATE(created_at)=${dayISO}) AS messages_in,
      (SELECT COUNT(*) FROM comm_messages WHERE direction='out' AND DATE(created_at)=${dayI*
