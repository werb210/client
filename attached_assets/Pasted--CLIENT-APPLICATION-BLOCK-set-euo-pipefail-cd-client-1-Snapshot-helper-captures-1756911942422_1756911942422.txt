# [CLIENT APPLICATION BLOCK]
set -euo pipefail

cd client

# ---------- 1) Snapshot helper (captures the full 48-field form safely) ----------
mkdir -p src/lib
cat > src/lib/getFormSnapshot.ts <<'EOF'
/**
 * Returns a shallow JSON snapshot of the full application form state for lossless carriage.
 * Do NOT include files/blobs here; keep only names/types/urls and simple scalars.
 */
export function getFormSnapshot(state: any){
  if (!state || typeof state !== 'object') return {};
  // Strip functions/blobs
  const prune = (v:any): any => {
    if (v===null || v===undefined) return v;
    if (Array.isArray(v)) return v.map(prune);
    if (typeof v === 'object') {
      const out: any = {};
      for (const k of Object.keys(v)) {
        const val = v[k];
        if (typeof val === 'function') continue;
        if (typeof val === 'object' && val && (val instanceof File || val instanceof Blob)) continue;
        out[k] = prune(val);
      }
      return out;
    }
    return v;
  };
  return prune(state);
}
EOF

# ---------- 2) Patch submit: add payload snapshot + formFields for staff Zod passthrough ----------
node -e 'const fs=require("fs"), p="src/lib/submitApplication.ts"; let t=fs.readFileSync(p,"utf8");
if(!t.includes("getFormSnapshot")){
  t = `import { getFormSnapshot } from "./getFormSnapshot";\n` + t;
}
if(!t.includes("/*LOSSLESS_PAYLOAD*/")){
  // naive insertion: wrap JSON.stringify(payload)
  t = t.replace(/JSON\.stringify\(\s*payload\s*\)/, `JSON.stringify((()=>{ /*LOSSLESS_PAYLOAD*/ try{ const snap=(typeof window!=="undefined" && (window as any).__APP_STATE__)||{}; const payloadExt:any={...payload}; payloadExt.payload = getFormSnapshot(snap); payloadExt.formFields = payloadExt.payload; return payloadExt; }catch(_){ return payload; }})())`);
}
fs.writeFileSync(p,t);
console.log("Patched submitApplication.ts to attach full snapshot as payload/formFields");'

# ---------- 3) Minimal global hook to expose app state for snapshotter (non-invasive) ----------
# If your app already has a global store/context, expose it as __APP_STATE__ safely.
# We attempt common entry points; if not found, this is a no-op and the injected code above just sends current payload.
node -e 'const fs=require("fs");
const candidates=["src/main.tsx","src/main.ts","src/App.tsx"];
for(const f of candidates){
  if(fs.existsSync(f)){
    let s=fs.readFileSync(f,"utf8");
    if(!s.includes("__APP_STATE__")){
      s += `\n// Expose minimal form state if available (dev-safe)\ntry{ (window as any).__APP_STATE__ = (window as any).__APP_STATE__ || (window as any).__FORM_STATE__ || (window as any).__store || {}; }catch{ }\n`;
      fs.writeFileSync(f,s); console.log("Exposed __APP_STATE__ in", f);
      break;
    }
  }
}'

echo "âœ… CLIENT: submit now carries full snapshot in payload + formFields (no endpoint changes required). Rebuild and submit once."
