1. Add Initial Seeding Service

File: services/lenderProducts.ts

import fs from "fs";
import path from "path";

const PRODUCTS_PATH = path.join(process.cwd(), "data", "lenderProducts.json");
const STAFF_API_URL =
  process.env.STAFF_API_URL || "https://staff.boreal.financial/api/lender-products";

export async function seedLenderProducts() {
  try {
    const res = await fetch(STAFF_API_URL, {
      headers: {
        Authorization: `Bearer ${process.env.CLIENT_SYNC_KEY}`,
      },
    });

    if (!res.ok) {
      console.error("❌ Failed to fetch lender products from staff app");
      return;
    }

    const products = await res.json();
    fs.writeFileSync(PRODUCTS_PATH, JSON.stringify(products, null, 2));
    console.log("✅ Lender products seeded successfully");
  } catch (err) {
    console.error("❌ Error seeding lender products:", err.message);
  }
}

2. Call Seeding on Server Startup

File: pages/_app.tsx

import { useEffect } from "react";
import { seedLenderProducts } from "../services/lenderProducts";

export default function MyApp({ Component, pageProps }) {
  useEffect(() => {
    // Seed products only if local cache is empty
    async function init() {
      const res = await fetch("/data/lenderProducts.json");
      const cachedProducts = await res.json().catch(() => []);
      if (!cachedProducts.length) {
        console.log("🌱 Seeding lender products...");
        await seedLenderProducts();
      }
    }
    init();
  }, []);

  return <Component {...pageProps} />;
}

3. Update Sync API to Always Overwrite Local Cache

File: pages/api/sync/lender-products.ts

import { NextApiRequest, NextApiResponse } from "next";
import fs from "fs";
import path from "path";

const PRODUCTS_PATH = path.join(process.cwd(), "data", "lenderProducts.json");

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  const key = req.headers.authorization?.replace("Bearer ", "");
  if (key !== process.env.CLIENT_SYNC_KEY) {
    return res.status(403).json({ error: "Unauthorized" });
  }

  try {
    fs.writeFileSync(PRODUCTS_PATH, JSON.stringify(req.body.products, null, 2));
    console.log("✅ Lender products updated via webhook");
    return res.status(200).json({ success: true });
  } catch (err) {
    console.error("❌ Failed to update lender products:", err);
    return res.status(500).json({ error: "Failed to save products" });
  }
}

4. Update .env

File: .env

STAFF_API_URL=https://staff.boreal.financial/api/lender-products
CLIENT_SYNC_KEY=bf_client_sync_42c1a97f12b94b87a8d3b3

5. Test Full Workflow
Step 1 — First-Load Seeding

Delete data/lenderProducts.json in the client app.

Start the client app.

Verify that /data/lenderProducts.json is recreated automatically from the staff API.

Step 2 — Real-Time Updates

Add a new lender product in the staff app.

Client app receives webhook push.

Refresh client app — Step 2 & Step 5 should reflect the new product instantly.

6. Client Usage in Forms

We reuse the same hook:

File: hooks/useLenderProducts.ts

import { useEffect, useState } from "react";

export function useLenderProducts() {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    async function fetchProducts() {
      try {
        const res = await fetch("/data/lenderProducts.json");
        const data = await res.json();
        setProducts(data);
      } catch {
        console.error("❌ Failed to load lender products");
      }
    }
    fetchProducts();
  }, []);

  return products;
}


Step 2 (recommendation categories):

const products = useLenderProducts();
const categories = [...new Set(products.map(p => p.category))];


Step 5 (required document list):

const selectedProduct = products.find(p => p.id === selectedProductId);
const requiredDocs = selectedProduct?.requiredDocuments || [];