Below is a focused **fault-tree + fix plan** that maps exactly to what you‚Äôre seeing in the *Client-side Staff-API Integration Report*.

---

## 1‚ÄÇPinpoint the Failure

| Symptom                                                                                                   | What it really tells us                                                                                                                                         | Proof / next probe                                                                                                                                                                                                                                                   |
| --------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Browser fetch to every `https://staffportal.replit.app/api/...` returns **network error with empty `{}`** | The request never completes ‚Üí the browser aborted it **before any HTTP status** reached the console. That screams **CORS pre-flight** or **DNS / TLS** refusal. | Open DevTools ‚ñ∂ Network ‚ñ∂ the failing call. <br>‚Ä¢ Status column will be **(blocked\:cors)** or **(failed)** instead of 4xx/5xx. <br>‚Ä¢ If you run the same URL in `curl`, you‚Äôll either get a JSON array (good) **or** ‚Äúconnection refused / SSL cert error‚Äù (infra). |

### Quick sanity test (run in any terminal)

```bash
curl -I https://staffportal.replit.app/api/public/lenders \
     -H 'Origin: https://client.replit.app'
```

<table>
<tr><th>Outcome</th><th>Interpretation</th></tr>
<tr><td>200 OK + <code>access-control-allow-origin: *</code></td><td>CORS is open ‚Üí the problem hides in client-side code / URL.</td></tr>
<tr><td>200 OK but <strong>no</strong> <code>access-control-allow-origin</code></td><td>Classic CORS block.</td></tr>
<tr><td>Could&nbsp;not resolve host / SSL failure</td><td>Replit instance is sleeping or redeploy failed.</td></tr>
</table>

---

## 2‚ÄÇFix What We Almost Certainly Hit

### üîß Add / tighten CORS on the **staff** app

```ts
// staff/src/server.ts
import cors from "cors";
const allowlist = [
  "https://client.replit.app",        // prod
  "http://localhost:5173",            // vite dev
];
app.use(cors({
  origin: (origin, cb) =>
    allowlist.includes(origin ?? "") ? cb(null, true) : cb(new Error("Not allowed")),
  methods: ["GET", "OPTIONS"],
  maxAge: 86400,          // 24 h preflight cache
}));
```

*Put this **before** any route definitions.*
Re-deploy ‚Üí retest the `curl` command; the header must appear.

---

### üõ£Ô∏è Expose a single, CORS-friendly endpoint

Right now you‚Äôre probing four similar paths. Standardise to **one**:

```ts
// staff
app.get("/api/public/lenders", (_, res) =>
  res.json(await db.select().from(lenderProducts))
);
```

Update the client‚Äôs `fetchLenderProducts`:

```ts
const BASE = import.meta.env.VITE_STAFF_URL ?? "https://staffportal.replit.app";
export const fetchLenderProducts = () =>
  fetch(`${BASE}/api/public/lenders`).then(r => {
    if (!r.ok) throw new Error(`Staff API ${r.status}`);
    return r.json();
  });
```

---

## 3‚ÄÇKeep It Tight in All Environments

| Environment var  | Where set            | Example                          |
| ---------------- | -------------------- | -------------------------------- |
| `VITE_STAFF_URL` | `.env` in **client** | `https://staffportal.replit.app` |
| `CLIENT_DOMAIN`  | `.env` in **staff**  | `https://client.replit.app`      |

* Client builds get baked URL-safe.
* Staff CORS middleware reads `CLIENT_DOMAIN`.

---

## 4‚ÄÇMonitor and Fail-safe Gracefully

1. **Health endpoint** on staff:

   ```ts
   app.get("/healthz", (_, res) => res.send("ok"));
   ```

   GitHub / Replit uptime monitor pings every 5 min.

2. **React Query staleTime** = `5 * 60 * 1000`; users don‚Äôt refetch every nav change.

3. **Fallback stub** (your local eight-product file) stays **last-ditch only**:

   ```ts
   try { return await fetchLenderProducts(); }
   catch { return localAuthenticEight; }   // but log error to Sentry
   ```

---

## 5‚ÄÇIf It‚Äôs **not** CORS‚Ä¶

| Failure after CORS fixed             | Likely Cause                                                | Remedy                                                       |
| ------------------------------------ | ----------------------------------------------------------- | ------------------------------------------------------------ |
| `curl` returns HTML ‚ÄúRepl not found‚Äù | The Replit project is sleeping or has a custom domain only. | Wake it by opening root URL; upgrade to Always-On if needed. |
| `curl` 404, 500, or path changed     | Route was renamed during redeploy.                          | Re-expose correct `/api/public/lenders`.                     |
| Requires auth token                  | Staff API now gated.                                        | Add `?public=true` param or a bearer token known to client.  |

---

### ‚úÖ  Recap Action List

1. **Add proper CORS middleware** (code above) and redeploy staff app.
2. **Lock-in one canonical public endpoint** `/api/public/lenders`.
3. **Point client‚Äôs `fetchLenderProducts` at that endpoint** via `VITE_STAFF_URL`.
4. **`curl -I` with Origin header** until `access-control-allow-origin` shows up.
5. Remove the four-URL loop once the single endpoint is healthy.

Run those five steps and the client will pull all 43+ products live; your eight-product local fallback will never be hit unless the staff app is genuinely down. Let me know if any one of these checks still fails and we‚Äôll dig deeper.
