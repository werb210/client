Understood. I’ll now have the **Replit Client Application** agent run a **full upload diagnostic for *all* document types**, not just the Profit & Loss Statement. This will confirm which document types are failing and why.

---

## 🧪 CLIENT APP — FULL DOCUMENT UPLOAD DIAGNOSTIC (All Types)

Replit Agent, run the following for **each supported document type**:

### 1. 🔎 Check Document Category in UI

* Validate that the document type is **present in the upload dropdown menu**
* Confirm the correct `value` (e.g., `void_cheque`, `tax_returns`, `balance_sheet`, `profit_and_loss`, etc.)

### 2. 📤 Attempt Upload (UI)

* Use a test file (e.g., `test.pdf`) for each document category
* Confirm:

  * A `POST` request is made to `/api/public/upload/:applicationId`
  * Request includes `FormData` with:

    * `documentType: <expected_enum_value>`
    * `document: <file>`

### 3. 🧪 Manual JS Upload (Fallback)

Run this for each document type (replace `DOCUMENT_TYPE_HERE` with each enum):

```js
const formData = new FormData();
formData.append("documentType", "DOCUMENT_TYPE_HERE");
formData.append("document", new File(["test"], "sample.pdf", { type: "application/pdf" }));

fetch("/api/public/upload/YOUR_APPLICATION_ID", {
  method: "POST",
  body: formData
}).then(r => r.json()).then(console.log);
```

Expected result: `{"success":true, ...}` or HTTP 200

### 4. 🧾 Report Upload Status Matrix

Replit Agent: return a matrix like this after testing all 22 supported types:

| Document Type        | Dropdown Present | Upload via UI | Upload via JS | Status / Errors           |
| -------------------- | ---------------- | ------------- | ------------- | ------------------------- |
| void\_cheque         | ✅                | ✅             | ✅             | OK                        |
| profit\_and\_loss    | ✅                | ❌             | ✅             | UI not triggering request |
| balance\_sheet       | ✅                | ✅             | ✅             | OK                        |
| tax\_returns         | ✅                | ✅             | ✅             | OK                        |
| business\_license    | ✅                | ✅             | ✅             | OK                        |
| bank\_statements     | ✅                | ✅             | ✅             | OK                        |
| accounts\_receivable | ✅                | ✅             | ✅             | OK                        |
| accounts\_payable    | ✅                | ✅             | ✅             | OK                        |
| ...                  | ...              | ...           | ...           | ...                       |

> The full list of backend document types is already mapped, so validation should work — this test confirms that all **client-side integration is correct** and no upload silently fails.

---

### ✅ GOAL

* Verify 100% of supported document types:

  * Are listed in the dropdown
  * Trigger valid upload requests
  * Pass backend validation
* Report any that **do not trigger upload** or are **mismatched** (`documentType` sent incorrectly)
* Identify and fix any enum mismatches, missing category items, or upload UI errors

---

Replit agent: **perform this test now** for all 22 document types and return the matrix as shown. Then I will fix any failed items immediately.
