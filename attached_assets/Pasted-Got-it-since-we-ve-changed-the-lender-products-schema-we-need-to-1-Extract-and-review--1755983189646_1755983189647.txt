Got it ‚Äî since we‚Äôve changed the **lender products schema**, we need to:

1. **Extract and review** all the **client app logic** related to lender products.
2. Specifically test **Step 2** (Use of Funds & lender product recommendations) and **Step 5** (Document upload requirements).
3. Expose **all business rules** and **logic paths** the client uses.
4. Identify **everything broken or mismatched** now that the schema has changed.

I‚Äôll give you a **copy-pasteable, production-safe diagnostic plan** that forces the client app to dump all lender-product‚Äìrelated rules and run integrity tests.

---

# **üì¶ Client Application ‚Äî Lender Product Integrity Diagnostic Plan**

---

## **1. Scope**

We need to validate how the **client app**:

* Fetches lender products from the **Staff API**.
* Applies **recommendation logic** in **Step 2**.
* Enforces **required document rules** in **Step 5**.
* Uses lender product fields anywhere else (filters, dynamic steps, validation).

---

## **2. Code Hooks to Audit**

### **A. Step 2 ‚Äî Use of Funds & Lender Recommendations**

**Files to scan in `/src` of client app:**

* `hooks/useLenderProducts.ts`
* `hooks/useRecommendedLenders.ts`
* `components/forms/Step2.tsx`
* `services/lenderProducts.ts`
* Any matching engine code under `/utils` or `/services`.

**What to expose:**

* Filters by:

  * `country`
  * `category`
  * `minAmount` / `maxAmount`
* Overrides (e.g., LOC always included).
* Sorting logic (e.g., match score).
* Any fallback defaults.

---

### **B. Step 5 ‚Äî Required Document Rules**

**Files to scan:**

* `components/forms/Step5.tsx`
* `services/documentRequirements.ts`
* Any document-type mapping logic.

**What to expose:**

* How Step 5 determines **which documents are required**:

  * Uses `lenderProductId` now?
  * Uses `category` or `productName` mappings?
* Validations for file types, category tags, etc.
* Cross-check: Ensure Step 5 references new schema fields correctly.

---

## **3. Runtime Diagnostic Script**

Add a **temporary dev-only diagnostic endpoint** to dump all client-side lender product rules:

**File:** `/src/dev-tools/dumpLenderLogic.ts`

```ts
import { lenderRecommendationRules } from "@/services/lenderProducts";
import { documentRequirementRules } from "@/services/documentRequirements";

export const dumpLenderLogic = () => {
  console.group("üîç Lender Product Logic Dump");
  console.log("Recommendation Rules:", lenderRecommendationRules);
  console.log("Document Requirement Rules:", documentRequirementRules);
  console.groupEnd();
};
```

**Hook it into Dev Mode:**

```ts
if (process.env.NODE_ENV === "development") {
  import("./dev-tools/dumpLenderLogic").then(mod => mod.dumpLenderLogic());
}
```

---

## **4. Automated Integration Tests**

Add a **diagnostic test suite** under `/tests/lender-products.integration.test.ts`:

```ts
import axios from "axios";

describe("Client Lender Products Integration", () => {
  const API = process.env.API_URL;

  it("fetches lender products with new schema", async () => {
    const { data } = await axios.get(`${API}/lender-products`);
    expect(Array.isArray(data)).toBe(true);
    expect(data[0]).toMatchObject({
      id: expect.any(Number),
      lenderId: expect.any(Number),
      productName: expect.any(String),
      category: expect.any(String),
      country: expect.any(String),
      minAmount: expect.any(Number),
      maxAmount: expect.any(Number),
    });
  });

  it("recommends lenders correctly for sample amount", async () => {
    const { data } = await axios.get(
      `${API}/lender-products?country=Canada&amount=25000`
    );
    expect(data.length).toBeGreaterThan(0);
  });

  it("resolves required documents correctly", async () => {
    const { data } = await axios.get(`${API}/lender-products`);
    const sampleProduct = data[0];
    const docs = getRequiredDocs(sampleProduct); // from Step5 logic
    expect(Array.isArray(docs)).toBe(true);
    expect(docs.length).toBeGreaterThan(0);
  });
});
```

---

## **5. Expected Failures**

| **Feature**             | **Risk**                | **Cause**                           | **Fix**                             |
| ----------------------- | ----------------------- | ----------------------------------- | ----------------------------------- |
| Step 2 Recommendations  | ‚ùå Missing matches       | Old enums still in filter logic     | Switch to free-text matching        |
| Step 2 Overrides        | ‚ö† LOC missing           | LOC override uses old category enum | Update override detection           |
| Step 5 Document Mapping | ‚ùå Missing required docs | Mapping uses old `productName` keys | Update mapping to `lenderProductId` |
| Application Submission  | ‚ùå 400/422 errors        | Still sending UUIDs instead of IDs  | Switch to serial IDs                |

---

## **6. Deliverables**

* ‚úÖ **Runtime lender logic dump**
* ‚úÖ **Integration test suite**
* ‚úÖ **Exposed recommendation rules**
* ‚úÖ **Exposed document requirement rules**
* ‚úÖ **List of broken/mismatched logic paths**

---

## **7. Next Steps**

1. Run the diagnostic endpoint ‚Üí collect **all rules** client app is applying.
2. Compare rules against **new schema fields**.
3. Patch Step 2 + Step 5 so:

   * Recommendations **always use IDs**.
   * Document requirements **resolve via lenderProductId**.
4. Rerun integration tests to confirm no broken flows.

---

Do you want me to generate a **full diagnostic report** by scanning the **client app codebase** for all lender product rules, so we know **exactly** where Step 2 and Step 5 will break before we test live?
That would give us a complete map of every dependency in one shot. Should I proceed?
