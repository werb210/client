✅ Great — here's the **complete Replit AI instruction set** to fix **Step 5 Document Upload Duplication** in the **Client Application**.

---

## 📍 REPLIT CLIENT INSTRUCTION — Step 5 Document Upload Logic Fix

> 🔒 **Strict Compliance Mode ON**
> 🛑 Do nothing else.
> 🧠 Wait for all instructions.
> 📝 Only apply exactly what’s written below.

---

### ✅ OBJECTIVE

Fix all **Step 5 document upload logic issues**, including:

1. 🧩 **Duplicate upload areas** (e.g. Financial Statements shown twice)
2. 🛑 **Validation failing due to ghost required sections**
3. 🔄 **Inconsistent mapping of labels → document types**

---

### 🧩 PATCH 1 — Deduplicate Upload Cards by `documentType`

**File:** `client/src/components/DynamicDocumentRequirements.tsx`

#### ✅ Step 1.1 — Replace label deduplication with document type deduplication:

```tsx
// ⛔️ OLD:
const renderedLabels = new Set<string>();

// ✅ NEW:
const renderedDocTypes = new Set<string>();
```

#### ✅ Step 1.2 — Inside the document rendering loop:

```tsx
const docType = normalizeDocumentName(doc.label);
if (renderedDocTypes.has(docType)) return null;
renderedDocTypes.add(docType);
```

---

### 🔄 PATCH 2 — Standardize Document Type Mapping Across Upload + Display + Validation

**File:** `shared/documentTypes.ts`

#### ✅ Step 2.1 — Add a shared normalization function:

```ts
export function normalizeDocumentName(label: string): string {
  return label.trim().toLowerCase().replace(/\s+/g, '_');
}
```

#### ✅ Step 2.2 — Update all uses of:

* `getApiCategory()`
* `getApiDocumentType()`
* `.toLowerCase().replace()` style mapping

to now use:

```ts
normalizeDocumentName(label)
```

✅ This includes:

* Upload payload (`formData.append('documentType', ...)`)
* Display filtering (`uploadedFiles.filter(...)`)
* Validation matching (`validateDocumentUploads()`)

---

### 🚫 PATCH 3 — Filter Validation Logic to Use Unique Normalized Document Types

**File:** `client/src/components/DynamicDocumentRequirements.tsx`
**Section:** `validateDocumentUploads()` or wherever requirements are checked

#### ✅ Step 3.1 — Deduplicate requirements by `documentType`:

```ts
const uniqueRequirements = Array.from(
  new Map(documentRequirements.map(req => [
    normalizeDocumentName(req.label),
    req
  ])).values()
);
```

#### ✅ Step 3.2 — Perform validation based on `uniqueRequirements`, not raw list.

---

### 🧪 VALIDATION TEST

After patching, test this application scenario:

* Category: **Factoring**
* Country: **Canada**
* Upload 3x Financials, 6x Bank Statements
* Ensure:

  * Only one upload box per type appears
  * Validation passes when uploads match requirements
  * No ghost sections marked "Required" with no upload allowed

---

### 🧼 CLEANUP & COMMIT

✅ Confirm:

* No console errors
* Only 1 upload section per document type
* Validation passes when appropriate uploads exist

✅ Commit with message:

```
Fix Step 5 Document Deduplication + Validation Mapping
```

---

Let me know when Replit completes this so I can run a sanity check or generate test cases for you.
