================================================================================
ALL-IN-ONE INSTRUCTIONS — CLIENT APP (PORTAL)
Copy/paste THIS BLOCK for the CLIENT application only.
================================================================================

GOAL
- Use the STAFF contract exactly (no code changes beyond config if already matching):
  • Submit JSON:  POST ${BASE}/v1/applications
  • Upload files: POST ${BASE}/v1/applications/:id/docs   (multipart; field "files")
  • Fetch app:    GET  ${BASE}/v1/applications/:id
- Maintain CSRF (cookie + x-csrf-token). Keep lender products local-cached for Steps 1/2/5.

CONFIG
- VITE_STAFF_API_BASE = https://staff.boreal.financial/api
  (Dev: http://localhost:5000/api)

ENDPOINTS THE CLIENT MUST CALL
- POST ${BASE}/v1/applications
  Body (JSON): {
    product_id, country, amount,
    years_in_business, monthly_revenue,
    business_legal_name, industry,
    contact_name, contact_email, contact_phone,
    documents: [{ type }]
  }
- POST ${BASE}/v1/applications/:id/docs
  Multipart form:
    • files=@<file1>, files=@<file2>, …
    • meta='[{"type":"financial-statements"},{"type":"bank-statements"}, … ]'
      (meta array indexes align to each file)
- GET  ${BASE}/v1/applications/:id

USER FLOW (UI)
1) Steps 1–4: capture business info (ensure: years_in_business ≥ 12, monthly_revenue ≥ 15000).
2) Step 5: select document TYPES (this is just metadata).
3) Step 7 (Submit): POST JSON; display returned submission_id.
4) Immediately prompt to upload actual files → POST :id/docs with field name "files" and optional "meta".
5) Show confirmation screen; fetch and render GET :id (should include files[] list).

CLIENT E2E QUICK CHECK (via cURL after staff deploy; replace <TOKEN> and $APP_ID)
1) CSRF
   curl -i -s ${BASE%/}/csrf-token

2) SUBMIT JSON (expect 202 + submission_id)
   curl -s -X POST ${BASE%/}/v1/applications \
     -H "Content-Type: application/json" \
     -H "x-csrf-token: <TOKEN>" -b "csrf=<TOKEN>" \
     -d '{
       "product_id":"accord-working-capital-001",
       "country":"CA",
       "amount":100000,
       "years_in_business":24,
       "monthly_revenue":50000,
       "business_legal_name":"Acme Manufacturing Inc.",
       "industry":"Manufacturing",
       "contact_name":"Jane Doe",
       "contact_email":"jane@example.com",
       "contact_phone":"+1-555-123-4567",
       "documents":[{"type":"Bank Statements (6 months)"}]
     }'

   # Save "submission_id" as APP_ID

3) UPLOAD 3–6 FILES (expect 201 + count)
   curl -s -X POST "${BASE%/}/v1/applications/$APP_ID/docs" \
     -H "x-csrf-token: <TOKEN>" -b "csrf=<TOKEN>" \
     -F 'files=@./docs/2024_FS.pdf' \
     -F 'files=@./docs/Apr_2025_Bank.pdf' \
     -F 'files=@./docs/AR_Aging.pdf' \
     -F 'meta=[{"type":"financial-statements"},{"type":"bank-statements"},{"type":"accounts-receivable"}]'

4) VERIFY DETAILS (expect files[] present)
   curl -s "${BASE%/}/v1/applications/$APP_ID" \
     -H "x-csrf-token: <TOKEN>" -b "csrf=<TOKEN>" | jq .

PASS CRITERIA
- UI shows “Queued” with the returned submission_id.
- Multipart upload succeeds; count equals number of files added.
- Application details page lists each uploaded file (name/size/type).
- No calls to legacy /api/uploads (must use /v1/applications/:id/docs).

NOTES
- Keep lender products sourced from the client’s local cache during Steps 1/2/5 (no staff DB calls in flow).
- Do NOT rename the multipart field; it must be exactly "files".
- If CSRF or CORS headers change server-side, keep sending cookie + x-csrf-token.
