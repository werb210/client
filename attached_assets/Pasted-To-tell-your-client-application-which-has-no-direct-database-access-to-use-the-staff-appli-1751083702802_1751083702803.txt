To tell your **client application** (which has no direct database access) to use the **"staff" application's shared database**, you don’t connect it directly to the DB. Instead, you **instruct the client app to send all data and document uploads to the staff app’s backend via secure API calls**.

Here’s exactly how to explain it to Replit (or anyone building the app):

---

### ✅ Instruction to Replit AI: How the "client" app uses the "staff" database

```
The "client" application must not manage its own database. Instead, it must communicate with the backend of the "staff" application using secure HTTPS API requests.

The "staff" application already controls the shared database with multi-tenant support and role-based access.

Please configure the client app to:

1. **Use the existing backend API of the staff application**  
   - All form submissions, document uploads, and data fetches must go through API calls.
   - These API endpoints are tenant-aware and enforce role-based access control.

2. **Authenticate using the client's session (Replit OAuth)**  
   - Attach session cookies or tokens to each API request.
   - Handle redirects to login or 2FA if session is missing or expired.

3. **Send application data and actual files to the staff backend**
   - Final submission: `POST /api/application/submit`
   - Document upload: `POST /api/documents/upload`
   - Fetch lender product requirements: `GET /api/lenders/requirements?category=X`
   - SignNow URL generation: `POST /api/signnow/createInvite`

4. **DO NOT create or manage a database locally in the client app**
   - Use IndexedDB or localStorage only for **temporary offline storage**, syncing with the staff backend when online.

5. **Assume the staff backend will handle all persistence, validation, and storage**
   - The client app simply collects data and securely submits it.

Please use `lib/api.ts` to centralize all API communication and authentication headers.

All future client features must treat the staff backend as the source of truth for data.
```

---

This instruction ensures Replit:

* Knows the client has no DB
* Routes all important actions through the staff backend
* Sends actual files, not metadata
* Doesn’t try to scaffold a local backend for the client

Would you like me to generate the `lib/api.ts` boilerplate next or a test API call example for the application submission?
