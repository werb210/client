#######################################################################
# CLIENT APP — COMPLETE INSTRUCTION BLOCK (NO TWILIO)
# Purpose: use LOCAL lender-product store only for Steps 1, 2, 5;
# receive Staff “Push to Client”; dedup router; run E2E Step 1→2→5→PDF,
# then hand off to Staff app to send the package via O365.
#######################################################################

# --- 0) PREP -----------------------------------------------------------------
set -euo pipefail

# --- 1) GLOBAL DE-DUP + SANITY SWEEPS ----------------------------------------
# 1a) Products API must NOT be called during Steps 1/2/5 (cache-only).
rg -n --hidden --glob '!node_modules' -e '/api/v1/products' client/src | nl
# EXPECT: 0 results inside apply steps + doc logic. Replace any hits with cache accessors.

# 1b) Router consistency: choose ONE (prefer wouter). No react-router-dom/shims.
rg -n --hidden --glob '!node_modules' -e "from 'react-router-dom'|shim-react-router-dom|useNavigate\\(" client/src | nl
# EXPECT: 0 stray imports (other than your own wouter wrapper).

# 1c) Verify ZERO Twilio references exist in the client app (safety check only).
rg -n --hidden --glob '!node_modules' -e 'sdk\\.twilio\\.com|twilio\\.min\\.js|Twilio' client/src | nl
# EXPECT: 0 results. (Client app has no dialer.)

# --- 2) SINGLE LOCAL PRODUCT STORE (source of truth) -------------------------
# Use IndexedDB "lenderProducts" via a tiny wrapper.
# File: client/src/lib/lenderCache.ts
cat > client/src/lib/lenderCache.ts <<'TS'
import { get, set } from 'idb-keyval';
export type Product = {
  id:string; name:string; lender_name:string;
  country:'CA'|'US'|null; category:string;
  min_amount:number; max_amount:number; active:boolean;
  updated_at:string; required_documents:string[];
  min_time_in_business?:number|null; min_monthly_revenue?:number|null;
  excluded_industries?:string[]; currency?:'USD'|'CAD'; version?:number;
};
const KEY = 'lenderProducts';
export async function loadProducts(): Promise<Product[]> { return (await get<Product[]>(KEY)) ?? []; }
export async function saveProducts(products: Product[]): Promise<void> { await set(KEY, products); }
export async function upsertProducts(upserts: Product[]): Promise<void> {
  const current = await loadProducts();
  const map = new Map(current.map(p=>[p.id,p]));
  upserts.forEach(p=>map.set(p.id,p));
  await saveProducts(Array.from(map.values()));
}
export async function deleteProducts(ids: string[]): Promise<void> {
  const current = await loadProducts();
  const keep = current.filter(p=>!ids.includes(p.id));
  await saveProducts(keep);
}
TS

# --- 3) RECEIVE “PUSH TO CLIENT” FROM STAFF ---------------------------------
# If the client app has a small Node/Express layer, add an ingest route:
# File: client/server/routes/ingest.ts
cat > client/server/routes/ingest.ts <<'TS'
import type { Request, Response } from 'express';
import crypto from 'crypto';
import { saveProducts, upsertProducts, deleteProducts } from '../../src/lib/lenderCache';

const SHARED_SECRET = process.env.PRODUCTS_PUSH_SECRET || 'dev-only';
function verifySignature(req: Request): boolean {
  const sig = req.header('X-Signature') || '';
  const h = crypto.createHmac('sha256', SHARED_SECRET).update(JSON.stringify(req.body)).digest('hex');
  return sig && crypto.timingSafeEqual(Buffer.from(sig,'hex'), Buffer.from(h,'hex'));
}

export async function ingest(req: Request, res: Response) {
  try {
    if (req.header('X-Products-Schema-Version') !== '1.0') return res.status(428).json({error:'Schema version required'});
    if (!verifySignature(req)) return res.status(401).json({error:'Bad signature'});
    const mode = req.body?.mode;
    if (mode === 'full')      await saveProducts(req.body.products ?? []);
    else if (mode === 'delta'){ await upsertProducts(req.body.upserts ?? []); await deleteProducts(req.body.deletes ?? []); }
    else return res.status(400).json({error:'mode must be "full" or "delta"'});
    res.status(200).json({ ok:true });
  } catch (e:any) { res.status(500).json({error:e?.message||'ingest failed'}); }
}
TS

# Wire it in client/server/index.ts (or equivalent):
#   import express from 'express';
#   import bodyParser from 'body-parser';
#   import { ingest } from './routes/ingest';
#   const app = express();
#   app.use(bodyParser.json({limit:'5mb'}));
#   app.post('/internal/lender-products/ingest', ingest);

# (If the client is fully static with no server, replace this with a pull job at startup that calls the Staff
#  endpoint once and saves to IndexedDB—still no calls during Steps 1/2/5.)

# --- 4) STEPS 1/2/5 MUST USE ONLY LOCAL CACHE --------------------------------
# Replace any direct fetch('/api/v1/products') in:
#   - client/src/routes/apply/step-1/**
#   - client/src/routes/apply/step-2/**
#   - client/src/routes/apply/step-5/**
#   - client/src/lib/documentIntersection.ts
# With:
#   import { loadProducts } from '../../lib/lenderCache';
#   const products = await loadProducts();  // filter locally
#
# UX Guardrail: if products.length===0, show “Products not loaded” + CTA:
#  “Refresh from Staff” → triggers a one-time pull or instructs staff to push.

# --- 5) E2E FLOW (Client responsibilities) -----------------------------------
# PREREQS:
#   - Staff app has real min/max amounts + required_documents populated.
#   - Staff pressed “Push to Client” → this app received 200 OK ingest.
#
# FLOW:
#  Step 1: Collect country, funding amount, business basics. Save in local state.
#  Step 2: Read categories from loadProducts(); display options; save choice.
#  Step 5: Use Step 1 + Step 2 + loadProducts() to filter eligible lenders,
#          render lender-specific required_documents.
#  Submit: Generate application packet metadata + documents → POST to Staff app
#          (e.g., /api/applications/submit) for PDF generation + O365 send.
#          (Email sending is performed by the Staff app, not here.)

# --- 6) CSP/ROUTER CONSISTENCY (client dev server only) ----------------------
# Ensure client dev server isn’t injecting invalid CSP (no 'unsafe-dynamic', no 'report-uri' in directive).
curl -sI http://localhost:3000 | tr -d '\r' | rg -i '^content-security-policy' || true
# Router sanity:
rg -n --hidden --glob '!node_modules' -e "from 'react-router-dom'|shim-react-router-dom" client/src | nl
# EXPECT: 0 results.

# --- 7) FINAL ASSERTS --------------------------------------------------------
# A) Products present locally (check via browser DevTools > Application > IndexedDB).
echo "Open DevTools → Application → IndexedDB → lenderProducts → expect ~42 products"

# B) No network calls to /api/v1/products during Steps 1/2/5:
echo "DevTools → Network filter 'products' → expect 0 requests while navigating Steps 1/2/5"

# C) Submission hits Staff endpoint only (for PDF + O365 send):
echo "DevTools → Network → on submit, verify POST /api/applications/submit (to Staff)."

#######################################################################
# END CLIENT APP BLOCK (NO TWILIO)
#######################################################################
