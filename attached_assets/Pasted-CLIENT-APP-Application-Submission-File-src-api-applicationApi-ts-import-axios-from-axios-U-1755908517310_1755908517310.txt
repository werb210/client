CLIENT APP — Application Submission
File: src/api/applicationApi.ts
import axios from "axios";

// Use your staff backend API base URL
const API_BASE = import.meta.env.VITE_STAFF_API_URL;

export const createApplication = async (formData: any) => {
  const res = await axios.post(`${API_BASE}/api/applications`, formData, {
    withCredentials: true,
  });
  return res.data;
};

export const uploadDocument = async (appId: string, file: File, category: string) => {
  const formData = new FormData();
  formData.append("file", file);
  formData.append("category", category);

  const res = await axios.post(`${API_BASE}/api/applications/${appId}/documents`, formData, {
    headers: { "Content-Type": "multipart/form-data" },
    withCredentials: true,
  });
  return res.data;
};

export const finalizeApplication = async (appId: string) => {
  const res = await axios.post(`${API_BASE}/api/applications/${appId}/finalize`, {}, {
    withCredentials: true,
  });
  return res.data;
};

File: src/hooks/useApplicationSubmit.ts
import { useMutation } from "@tanstack/react-query";
import { createApplication, uploadDocument, finalizeApplication } from "../api/applicationApi";

export const useApplicationSubmit = () => {
  return useMutation(async ({ formData, documents }: { formData: any; documents: { file: File; category: string }[] }) => {
    // Create the application first
    const app = await createApplication(formData);

    // Upload each document sequentially
    for (const doc of documents) {
      await uploadDocument(app.id, doc.file, doc.category);
    }

    // Finalize submission (triggers OCR, lender matching, Twilio notifications)
    return await finalizeApplication(app.id);
  });
};

Usage Example — In ApplicationForm.tsx
const mutation = useApplicationSubmit();

const handleSubmit = async () => {
  try {
    await mutation.mutateAsync({ formData, documents });
    toast.success("Application submitted successfully!");
  } catch (e) {
    toast.error("Failed to submit application");
    console.error(e);
  }
};
