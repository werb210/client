Here‚Äôs a polished version of your OpenAI-powered portal chatbot‚Äîcomplete with **client-side localStorage**, **server-side function calling**, and **clear setup instructions**.

---

## üõ†Ô∏è 1. Frontend (HTML + JS)

```html
<!-- index.html -->
<!DOCTYPE html>
<html>
<head><meta charset="utf-8"><title>Product Assistant</title></head>
<body>
  <div id="chat"></div>
  <input id="inputMsg" placeholder="Ask about products or apply‚Ä¶"/>
  <button onclick="send()">Send</button>
  <script src="script.js"></script>
</body>
</html>
```

```js
// script.js
if (!localStorage.lenderProducts) {
  localStorage.lenderProducts = JSON.stringify([
    { id:1, name:"FastLoan", rate:"5%", term:"5yr", minCredit:"650" },
    { id:2, name:"EasyMortgage", rate:"4.5%", term:"30yr", minCredit:"620" }
  ]);
}

const chat = document.getElementById('chat'),
      input = document.getElementById('inputMsg');

function append(role, text) {
  const d = document.createElement('div');
  d.innerHTML = `<b>${role}:</b> ${text}`; chat.append(d);
}

async function send() {
  const user = input.value.trim();
  if (!user) return;
  append('You', user);
  input.value = '';

  const products = JSON.parse(localStorage.lenderProducts);
  const res = await fetch('/api/chat', {
    method:'POST', headers:{'Content-Type':'application/json'},
    body: JSON.stringify({ user, products })
  });
  const json = await res.json();
  append('Bot', json.reply);
}
```

---

## üßë‚Äçüíª 2. Backend (Node.js + OpenAI + Function‚ÄëCalling)

```js
// server.js
import express from 'express';
import OpenAI from 'openai';
const ai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const app = express();
app.use(express.json());

function askForField(field) {
  return { name: 'ask_field', arguments: { field } };
}

function submitApp(data) {
  return { name: 'submit_application', arguments: data };
}

const functions = [
  {
    name: 'ask_field',
    description: 'Ask user for a specific field',
    parameters: { type: 'object', properties: { field: { type:'string' } }, required:['field'] }
  },
  {
    name: 'submit_application',
    description: 'Submit final application data',
    parameters: {
      type: 'object',
      properties: {
        productId: { type:'number' },
        income: { type:'number' },
        creditScore: { type:'number' }
      },
      required: ['productId', 'income', 'creditScore']
    }
  }
];

app.post('/api/chat', async (req, res) => {
  const { user, products } = req.body;
  const messages = [
    { role:'system', content:
      `You are an assistant for lender products. Products: ${JSON.stringify(products)}. `+
      `Answer questions, guide user to apply, gathering info via function calls.` },
    { role:'user', content: user }
  ];

  const completion = await ai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages, functions, function_call: 'auto'
  });

  const msg = completion.choices[0].message;
  if (msg.function_call) {
    res.json({ action: msg.function_call });
  } else {
    res.json({ reply: msg.content });
  }
});

app.post('/api/function', async (req, res) => {
  const { name, arguments: args } = req.body;
  if (name === 'ask_field') {
    return res.json({ reply: `Please provide your ${args.field}.` });
  }
  if (name === 'submit_application') {
    // Here you'd validate and save:
    return res.json({ reply: `Application received for product ${args.productId}!` });
  }
  res.status(400).json({ error: 'Unknown function' });
});

app.listen(3000, () => console.log('API listening on 3000'));
```

---

## ‚öôÔ∏è 3. How It Works

1. **Client** sends message + product list.
2. **Server** sends prompt + functions to GPT.
3. GPT replies:

   * If missing info: returns `function_call` ‚ûû your backend asks the user.
   * If complete: your backend calls `submit_application`.
4. **Cycle repeats** until submission is confirmed.

Function-calling is powered by OpenAI‚Äôs schema-based JSON call support ([dev.to][1], [youtube.com][2], [medium.com][3], [platform.openai.com][4]).

---

## üß≠ 4. Setup Instructions

1. Install dependencies:

   ```bash
   npm install express openai dotenv
   ```
2. Create `.env`:

   ```
   OPENAI_API_KEY=your-key
   ```
3. Run backend:

   ```bash
   node server.js
   ```
4. Open `index.html` in browser (served from the same origin as your backend).

---

## ‚úÖ Customization Tips

* Extend product data (e.g., docs, tiers).
* Add more functions (e.g., `upload_document`, `check_status`).
* Use UI improvements (buttons, loading states).
* Add data validation in backend `submit_application`.

---

This setup ensures:

* **Real-time product awareness** via localStorage.
* **Structured conversation & flow** via function‚Äëcalling.
* **Scalable, maintainable logic**, ready for enhancements.

Let me know if you want help with validation, doc uploading, or UI polish!

[1]: https://dev.to/esponges/build-the-new-openai-assistant-with-function-calling-52f5?utm_source=chatgpt.com "Build a chatbot with the new OpenAI Assistant API and Function ..."
[2]: https://www.youtube.com/watch?v=NC1Ni9KS-rk&utm_source=chatgpt.com "Use Your Locally Stored Files To Get Response From GPT | Python"
[3]: https://medium.com/%40nick.rios/how-to-quickly-setup-a-tiny-openai-api-bot-using-nodejs-62dcd917cb9d?utm_source=chatgpt.com "How to quickly setup a tiny OpenAI API bot using nodejs. - Medium"
[4]: https://platform.openai.com/docs/guides/function-calling?utm_source=chatgpt.com "Function calling - OpenAI API"
