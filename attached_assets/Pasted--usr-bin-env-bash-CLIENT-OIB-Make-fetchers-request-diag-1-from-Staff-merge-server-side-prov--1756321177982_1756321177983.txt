#!/usr/bin/env bash
# CLIENT OIB: Make fetchers request ?diag=1 from Staff, merge server-side _prov with any client
# normalization provenance, and expose a one-click downloadable JSON + console table.
# No new routes; toggle via localStorage('CATALOG_DIAG'='1') or ENV if you prefer.

set -euxo pipefail

echo "=== 0) PRECHECKS ==="
node -v || true
echo "[note] This adds a tiny diag helper and minimal imports in fetch layer."

echo "=== 1) ADD helper: client/src/lib/diag.ts ==="
mkdir -p client/src/lib
cat > client/src/lib/diag.ts <<'TS'
export type ProvTag = { source: 'db' | 'alias' | 'computed' | 'fallback'; kind?: 'null'|'const'|'coalesce'; note?: string };
export type WithProv<T> = T & { _prov?: Record<string, ProvTag> };

export function wantDiag(): boolean {
  try { return (globalThis.localStorage?.getItem('CATALOG_DIAG') === '1'); } catch { return false; }
}

export function withDiagUrl(url: string): string {
  if (!wantDiag()) return url;
  return url.includes('?') ? url + '&diag=1' : url + '?diag=1';
}

export function mergeClientProv<T extends Record<string, any>>(obj: T, clientProv?: Record<string, ProvTag>): WithProv<T> {
  if (!clientProv) return obj as WithProv<T>;
  const merged = { ...(obj as any) };
  merged._prov = Object.assign({}, obj && (obj as any)._prov || {}, clientProv || {});
  return merged;
}

export function downloadJSON(name: string, data: any) {
  try {
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = name;
    document.body.appendChild(a); a.click(); a.remove();
  } catch {}
}

export function summarizeProv(list: Array<{_prov?: Record<string, ProvTag>}>){
  const counts: Record<string, number> = {};
  for(const r of list){
    if(!r || !r._prov) continue;
    for(const [field, tag] of Object.entries(r._prov)){
      const key = `${field}:${tag.source}${tag.kind?':'+tag.kind:''}`;
      counts[key] = (counts[key]||0)+1;
    }
  }
  return counts;
}
TS

echo "=== 2) PATCH fetch layer to append ?diag=1 when enabled ==="
# We patch typical fetchers; adjust paths if different in your repo.
# If file doesn't exist, skip (idempotent behavior).
if [ -f client/src/lib/products.ts ]; then
  if ! grep -q "withDiagUrl" client/src/lib/products.ts; then
    sed -i '1i import { withDiagUrl, wantDiag, mergeClientProv, summarizeProv, downloadJSON } from "./diag";' client/src/lib/products.ts
    # Append small QA function (non-invasive)
    cat >> client/src/lib/products.ts <<'TS'

/** QA helper: pulls staff products with ?diag=1 (if enabled) and logs provenance. */
export async function qaProvenance(): Promise<void> {
  try {
    const url = withDiagUrl("/api/lender-products"); // your client fetch proxy -> staff
    const res = await fetch(url, { credentials: "include" });
    const list = await res.json(); // legacy array
    if (!Array.isArray(list)) { console.warn("Unexpected shape", list); return; }
    const counts = summarizeProv(list);
    if (typeof window !== 'undefined') {
      console.table(counts);
      if (wantDiag()) downloadJSON("client_provenance_legacy.json", { counts, sample: list.slice(0,5) });
    }
  } catch (e) { console.warn("qaProvenance error", e); }
}
TS
  fi
fi

echo "=== 3) OPTIONAL: Trigger a one-time QA run in dev (safe to remove later) ==="
# If you have a dev bootstrap file, you can auto-run when localStorage flag is set:
if [ -f client/src/main.tsx ]; then
  if ! grep -q "qaProvenance" client/src/main.tsx; then
    sed -i '1i import { qaProvenance } from "./lib/products";' client/src/main.tsx
    cat >> client/src/main.tsx <<'TS'

try {
  if (localStorage.getItem("CATALOG_DIAG") === "1") {
    qaProvenance();
  }
} catch {}
TS
  fi
fi

echo "=== 4) BUILD (no functional changes if diag disabled) ==="
npm --prefix client ci || true
npm --prefix client run build || true

echo "=== 5) VERIFY (toggle diag in browser console) ==="
cat <<'EOS'
Open your Client app in a browser and run:
  localStorage.setItem('CATALOG_DIAG','1'); location.reload();

Then watch the console:
  • Should print a provenance counts table for /api/lender-products (legacy).
  • A JSON download "client_provenance_legacy.json" will be offered with sample + counts.
Turn off:
  localStorage.removeItem('CATALOG_DIAG'); location.reload();
EOS

echo "=== DONE (CLIENT) ==="
