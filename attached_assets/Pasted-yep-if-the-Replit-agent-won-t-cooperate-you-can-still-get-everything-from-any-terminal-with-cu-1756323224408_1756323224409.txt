yep—if the Replit agent won’t cooperate, you can still get everything from **any terminal** with `curl` + `jq`. Here’s a **single, copy-paste script** that pulls from **both apps**, prints the results to your console, **and** writes a tidy Markdown comparison file you can share.

---

## 🧱 OIB — UNIVERSAL API AUDIT (Staff + Client)

*Run in any shell that has `curl` and `jq`.*

```bash
#!/usr/bin/env bash
# UNIVERSAL API AUDIT — Staff + Client (read-only, idempotent)
# Usage:
#   STAFF_BASE="https://staff.boreal.financial" \
#   CLIENT_BASE="http://localhost:5000" \
#   EXPECT_CA=17 EXPECT_US=25 \
#   bash api_audit.sh
#
# Outputs:
#  - Prints summaries to stdout
#  - Writes comparison to ./api_audit_report.md and raw JSON to ./api_audit_raw.json

set -euo pipefail

: "${STAFF_BASE:?Set STAFF_BASE, e.g. https://staff.boreal.financial}"
: "${CLIENT_BASE:?Set CLIENT_BASE, e.g. http://localhost:5000}"
EXPECT_CA="${EXPECT_CA:-17}"
EXPECT_US="${EXPECT_US:-25}"

need(){ command -v "$1" >/dev/null || { echo "Missing $1"; exit 1; }; }
need curl; need jq

# Endpoints
S_LEGACY="$STAFF_BASE/api/lender-products"
S_V1="$STAFF_BASE/api/v1/products"
S_VALIDATE="$STAFF_BASE/applications/validate-intake"
C_LEGACY="$CLIENT_BASE/api/lender-products"
C_V1="$CLIENT_BASE/api/v1/products"
C_VALIDATE="$CLIENT_BASE/api/applications/validate-intake"

fetch(){ curl -fsS -H 'Accept: application/json' "$1"; }

# Parse helpers that tolerate array vs {products:[]}
extract_list(){ jq -c 'if type=="array" then . else .products end // []'; }
country_counts(){ jq '
  map((.country // .countryOffered // "NULL")|tostring|ascii_upcase)
  | group_by(.) | map({k:.[0], n:length})'; }
by_id_map(){ jq '
  map({key:.id, val:{
    country:(.country // .countryOffered // "NULL")|tostring|ascii_upcase,
    category:(.category // .productCategory // "NULL"),
    min_amount:(.min_amount // .minimumLendingAmount // null),
    max_amount:(.max_amount // .maximumLendingAmount // null)
  }}) | from_entries'; }

# 1) STAFF pulls
S_LEG="$(fetch "$S_LEGACY" || echo '')"
S_LEG_LIST="$(printf '%s' "$S_LEG" | extract_list || echo '[]')"
S_V1_RAW="$(fetch "$S_V1" || echo '{"items":[]}')"
S_V1_ITEMS="$(printf '%s' "$S_V1_RAW" | jq -c '.items // (if type=="array" then . else [] end)')"

S_LEG_CNT="$(printf '%s' "$S_LEG_LIST" | jq 'length')"
S_V1_CNT="$(printf '%s' "$S_V1_ITEMS" | jq 'length')"
S_LEG_COUNTS="$(printf '%s' "$S_LEG_LIST"  | country_counts || echo '[]')"
S_V1_COUNTS="$(printf '%s' "$S_V1_ITEMS"   | country_counts || echo '[]')"

# 2) CLIENT pulls
C_LEG="$(fetch "$C_LEGACY" || echo '')"
C_LEG_LIST="$(printf '%s' "$C_LEG" | extract_list || echo '[]')"
C_V1_RAW="$(fetch "$C_V1" || echo '{"items":[]}')"
C_V1_ITEMS="$(printf '%s' "$C_V1_RAW" | jq -c '.items // (if type=="array" then . else [] end)')"

C_LEG_CNT="$(printf '%s' "$C_LEG_LIST" | jq 'length')"
C_V1_CNT="$(printf '%s' "$C_V1_ITEMS" | jq 'length')"
C_LEG_COUNTS="$(printf '%s' "$C_LEG_LIST"  | country_counts || echo '[]')"
C_V1_COUNTS="$(printf '%s' "$C_V1_ITEMS"   | country_counts || echo '[]')"

# 3) Field-level compare (Client v1 vs Staff v1 by id)
C_MAP="$(printf '%s' "$C_V1_ITEMS" | by_id_map)"
S_MAP="$(printf '%s' "$S_V1_ITEMS" | by_id_map)"
DIFF_JSON="$(jq -n --argjson c "$C_MAP" --argjson s "$S_MAP" '
  ( ( ( $c | keys ) + ( $s | keys ) ) | unique ) as $ids
  | [ $ids[] as $id
      | select(($c[$id] != null) and ($s[$id] != null))
      | {id:$id, client:$c[$id], staff:$s[$id]}
      | select( .client.country   != .staff.country
             or .client.category  != .staff.category
             or (.client.min_amount // null) != (.staff.min_amount // null)
             or (.client.max_amount // null) != (.staff.max_amount // null) )
    ]')"

DIFF_COUNT="$(printf '%s' "$DIFF_JSON" | jq 'length')"

# 4) Distribution numbers (Staff v1 as source of truth)
S_CA="$(printf '%s' "$S_V1_ITEMS" | jq '[.[] | select((.country // .countryOffered // "NULL")|ascii_upcase=="CA")] | length')"
S_US="$(printf '%s' "$S_V1_ITEMS" | jq '[.[] | select((.country // .countryOffered // "NULL")|ascii_upcase=="US")] | length')"

# 5) Build Markdown report
REPORT_MD="api_audit_report.md"
RAW_JSON="api_audit_raw.json"

cat > "$REPORT_MD" <<EOF
# API Audit Report

**Staff Base:** $STAFF_BASE  
**Client Base:** $CLIENT_BASE

## Totals
- Staff legacy total: $S_LEG_CNT  
- Staff v1 total: $S_V1_CNT  
- Client legacy total: $C_LEG_CNT  
- Client v1 total: $C_V1_CNT  

## Country Distribution
**Staff legacy:** \`$(printf '%s' "$S_LEG_COUNTS" | jq -c .)\`  
**Staff v1:**     \`$(printf '%s' "$S_V1_COUNTS"  | jq -c .)\`  
**Client legacy:** \`$(printf '%s' "$C_LEG_COUNTS" | jq -c .)\`  
**Client v1:**     \`$(printf '%s' "$C_V1_COUNTS"  | jq -c .)\`  

### Expectation Check (Staff v1)
- Expected CA: $EXPECT_CA — **Actual:** $S_CA
- Expected US: $EXPECT_US — **Actual:** $S_US

$( if [ "$S_CA" -eq "$EXPECT_CA" ] && [ "$S_US" -eq "$EXPECT_US" ]; then
     echo "✅ Staff v1 matches expected distribution."
   else
     echo "❌ Staff v1 distribution deviates from expected."
   fi )

## Field-Level Differences (Client v1 vs Staff v1)
- Mismatch count (country/category/min/max): **$DIFF_COUNT**

$( if [ "$DIFF_COUNT" -gt 0 ]; then
     echo "See \`api_audit_raw.json.diff\` section below."
   else
     echo "✅ No field-level mismatches found."
   fi )

## Samples
**Staff v1 sample:**  
\`\`\`json
$(printf '%s' "$S_V1_ITEMS" | jq '.[0]' 2>/dev/null || echo "null")
\`\`\`

**Client v1 sample:**  
\`\`\`json
$(printf '%s' "$C_V1_ITEMS" | jq '.[0]' 2>/dev/null || echo "null")
\`\`\`

---
Generated $(date -u +"%Y-%m-%d %H:%M:%SZ") UTC
EOF

jq -n \
  --arg staff_base "$STAFF_BASE" \
  --arg client_base "$CLIENT_BASE" \
  --argjson staff_legacy "$(printf '%s' "$S_LEG_LIST")" \
  --argjson staff_v1     "$(printf '%s' "$S_V1_ITEMS")" \
  --argjson client_legacy "$(printf '%s' "$C_LEG_LIST")" \
  --argjson client_v1     "$(printf '%s' "$C_V1_ITEMS")" \
  --argjson counts '{
    staff_legacy: '"$S_LEG_COUNTS"',
    staff_v1:     '"$S_V1_COUNTS"',
    client_legacy:'"$C_LEG_COUNTS"',
    client_v1:    '"$C_V1_COUNTS"'
  }' \
  --argjson diff "$DIFF_JSON" \
'{
  meta:{staff_base:$staff_base, client_base:$client_base},
  counts: $counts,
  staff:{legacy:$staff_legacy, v1:$staff_v1},
  client:{legacy:$client_legacy, v1:$client_v1},
  compare:{client_vs_staff_v1_diff:$diff}
}' > "$RAW_JSON"

echo "=== SUMMARY ==="
echo "Staff v1 CA / US: $S_CA / $S_US (expected $EXPECT_CA / $EXPECT_US)"
echo "Client v1 total: $C_V1_CNT | Staff v1 total: $S_V1_CNT"
echo "Field-level mismatches (country/category/min/max): $DIFF_COUNT"
echo "Wrote: $REPORT_MD and $RAW_JSON"
```

### How to use

1. Paste that into a file (e.g., `api_audit.sh`).
2. Run:

```bash
STAFF_BASE="https://staff.boreal.financial" \
CLIENT_BASE="http://localhost:5000" \
EXPECT_CA=17 EXPECT_US=25 \
bash api_audit.sh
```

3. Read the console summary, then open `api_audit_report.md` (human-readable) and `api_audit_raw.json` (full data + diffs).

If you’d rather keep Staff and Client **separate**, I can also give you two tiny dump scripts (one per app).
