# PURPOSE
# The client is showing all 42 as US because something in the client pipeline
# is overwriting/normalizing country to "US". We will (1) fix the receiver
# mapping, (2) remove any "|| 'US'" defaults, (3) ensure Step 2 filters on the
# **canonical country** field, and (4) clear caches so old US-only data isn’t reused.

set -euo pipefail

echo "== 1) FIX THE SYNC RECEIVER MAPPING (no US default) =="
cat > server/routes/sync-lender-products.mjs <<'JS'
import express from "express";
const router = express.Router();

let CATALOG = { products: [], sig:null, updated_at:null };

router.get("/api/lender-products", (_req,res) => {
  res.json({ total: CATALOG.products.length, products: CATALOG.products });
});

router.post("/api/sync/lender-products", express.json({limit:"5mb"}), (req, res) => {
  const token = req.get("X-Sync-Token");
  if (!token || token !== process.env.SYNC_TOKEN) return res.status(401).json({ ok:false, error:"unauthorized" });

  const items = Array.isArray(req.body?.products) ? req.body.products : [];
  const norm = items.map(p => {
    // IMPORTANT: never force 'US' on missing/empty values
    const c = ((p.country ?? p.countryOffered ?? "") + "").trim().toUpperCase();
    return {
      id: p.id,
      name: p.name ?? p.productName ?? "",
      lender_name: p.lender_name ?? p.lenderName ?? null,
      country: c || null,
      category: p.category ?? p.productCategory ?? "Working Capital",
      min_amount: Number(p.min_amount ?? p.minimumLendingAmount ?? 0),
      max_amount: Number(p.max_amount ?? p.maximumLendingAmount ?? 0),
      active: (p.active ?? p.isActive) !== false
    };
  });

  // hard replace (avoid merging with stale US-only cache)
  const seen = new Set(); const dedup = [];
  for (const p of norm) if (p.id && !seen.has(p.id)) { seen.add(p.id); dedup.push(p); }

  const sig = require("crypto").createHash("sha256").update(JSON.stringify(dedup)).digest("hex");
  CATALOG = { products: dedup, sig, updated_at: new Date().toISOString() };

  res.json({
    ok:true, total: dedup.length, signature: sig,
    by_country: Object.entries(dedup.reduce((a,p)=>((a[p.country||"NULL"]=(a[p.country||"NULL"]||0)+1),a),{}))
      .map(([k,n])=>({k,n}))
  });
});

export default router;
JS

BOOT="server/boot.ts"
grep -q "sync-lender-products.mjs" "$BOOT" || cat >> "$BOOT" <<'JS'
import syncLenderProducts from "./routes/sync-lender-products.mjs";
app.use(syncLenderProducts);
JS

echo "== 2) ENSURE STEP 2 FILTERS USE CANONICAL 'country' FIELD =="
# Replace any code that does:
#   const country = (p.countryOffered || p.country || 'US').toUpperCase();
# with:
#   const country = (p.country || p.countryOffered || '').toUpperCase(); // no 'US' fallback
#
# And ensure filter compares against the intake country:
#   const matchesCountry = country && country === intake.country.toUpperCase();

# Example (TypeScript helper)
cat > client/src/lib/recommend.ts <<'TS'
export type CanonicalProduct = {
  id:string; name:string; country:string|null; category:string;
  min_amount:number; max_amount:number; active:boolean;
};

export function filterByIntake(products:CanonicalProduct[], intake:{country:'CA'|'US', amount:number}) {
  const cc = intake.country.toUpperCase();
  return products.filter(p => {
    const pc = (p.country || '').toUpperCase();
    if (!pc || pc !== cc) return false;                         // strict match
    if (p.active === false) return false;
    if (Number.isFinite(p.min_amount) && p.min_amount > intake.amount) return false;
    if (Number.isFinite(p.max_amount) && p.max_amount < intake.amount) return false;
    return true;
  });
}
TS

echo "== 3) KILL ANY 'US' DEFAULTS IN THE PIPELINE =="
# Search & fix
rg -n "country.*\|\|\s*'US'" client server || true
# Manually change any instance to remove `'US'` fallback (leave empty/null instead).

echo "== 4) CLEAR SW/LOCAL STORAGE CACHES (old US-only data) =="
# If you use a service worker or localStorage caching, bump a catalog version key.
cat > client/src/lib/catalogVersion.ts <<'TS'
export const CATALOG_VERSION = "catalog-v3"; // bump to invalidate old caches
TS

# Example cache guard (only if you have a SW or local cache layer)
# localStorage.removeItem('catalog'); // or gate by CATALOG_VERSION

echo "== 5) QUICK VERIFY ON CLIENT =="
curl -s http://localhost:5000/api/lender-products \
| jq '{ total, by_country:(.products|group_by(.country)|map({k:.[0].country, n:length})) }'
# Expect CA counts to match Staff after a successful push.

echo "== 6) IF STILL US-ONLY ON CLIENT =="
echo "• Re-check mapping order everywhere: prefer 'country' then 'countryOffered'—never default to 'US'."
echo "• Confirm Step 2 is reading canonical 'country', not a legacy alias."
echo "• Ensure the in-memory catalog is replaced (not merged) on each sync."
