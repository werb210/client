#!/usr/bin/env bash
# CLIENT V1-ONLY ENFORCER — refuses legacy endpoints, patches obvious callsites, verifies parity with Staff.
# Safe to run repeatedly. Requires: rg (ripgrep), sed, curl, jq
set -euo pipefail
need(){ command -v "$1" >/dev/null || { echo "Missing $1"; exit 1; }; }
need rg; need sed; need curl; need jq

# Bases (override if needed)
CLIENT_BASE="${CLIENT_BASE:-http://localhost:5000}"
STAFF_BASE="${STAFF_BASE:-https://staff.boreal.financial}"
EXPECT_CA="${EXPECT_CA:-17}"
EXPECT_US="${EXPECT_US:-25}"

echo "== SCAN code for legacy endpoints =="
LEGACY_PATTERNS=(
  "/api/lender-products"
  "/api/catalog/export-products"
  "https://staff.boreal.financial/api/lender-products"
)
FOUND=0
for p in "${LEGACY_PATTERNS[@]}"; do
  if rg -n --hidden --iglob '!node_modules' --fixed-strings "$p" || true; then
    HITCOUNT=$(rg -n --hidden --iglob '!node_modules' --fixed-strings "$p" | wc -l | tr -d ' ')
    if [ "$HITCOUNT" -gt 0 ]; then FOUND=$((FOUND+HITCOUNT)); fi
  fi
done
echo "Legacy refs found: $FOUND"

# Best-effort patch for the known cache pull site (idempotent):
# server/services/lenderProductsCache.ts: swap staff legacy -> staff v1
FILE1="server/services/lenderProductsCache.ts"
if [ -f "$FILE1" ]; then
  sed -i.bak 's#https\?://staff[^"]*/api/lender-products#https://staff.boreal.financial/api/v1/products#g' "$FILE1" || true
  sed -i.bak 's#/api/lender-products#/api/v1/products#g' "$FILE1" || true
fi

# Best-effort patch for client legacy export hook (make it call v1)
HOOK="client/src/hooks/useLenderCatalog.ts"
if [ -f "$HOOK" ]; then
  sed -i.bak 's#/api/catalog/export-products#/api/v1/products#g' "$HOOK" || true
fi

echo "== Post-patch scan =="
POST_FOUND=0
for p in "${LEGACY_PATTERNS[@]}"; do
  HITCOUNT=$(rg -n --hidden --iglob '!node_modules' --fixed-strings "$p" | wc -l | tr -d ' ')
  POST_FOUND=$((POST_FOUND+HITCOUNT))
done
if [ "$POST_FOUND" -gt 0 ]; then
  echo "⚠️ Legacy endpoints still referenced ($POST_FOUND). Please remove/feature-flag these callsites above."
else
  echo "✅ No legacy endpoint refs remain in source (scan-based)."
fi

echo "== VERIFY parity: Client vs Staff V1 =="
C_V1="$CLIENT_BASE/api/v1/products"
S_V1="$STAFF_BASE/api/v1/products"

C_RAW="$(curl -fsS "$C_V1")" || { echo "Client V1 unreachable"; exit 2; }
S_RAW="$(curl -fsS "$S_V1")" || { echo "Staff V1 unreachable"; exit 2; }

C_ITEMS="$(printf '%s' "$C_RAW" | jq -c '.items // (if type=="array" then . else [] end)')"
S_ITEMS="$(printf '%s' "$S_RAW" | jq -c '.items // (if type=="array" then . else [] end)')"

C_CA="$(printf '%s' "$C_ITEMS" | jq '[.[]|select((.country // .countryOffered // "NULL")=="CA")]|length')"
C_US="$(printf '%s' "$C_ITEMS" | jq '[.[]|select((.country // .countryOffered // "NULL")=="US")]|length')"
S_CA="$(printf '%s' "$S_ITEMS" | jq '[.[]|select((.country // .countryOffered // "NULL")=="CA")]|length')"
S_US="$(printf '%s' "$S_ITEMS" | jq '[.[]|select((.country // .countryOffered // "NULL")=="US")]|length')"

echo "Staff V1:  CA=$S_CA (expect $EXPECT_CA)  US=$S_US (expect $EXPECT_US)"
echo "Client V1: CA=$C_CA                      US=$C_US"
[ "$S_CA" -eq "$EXPECT_CA" ] && [ "$S_US" -eq "$EXPECT_US" ] || { echo "❌ Staff V1 split unexpected"; exit 3; }
[ "$C_CA" -eq "$S_CA" ] && [ "$C_US" -eq "$S_US" ] || { echo "❌ Client V1 diverges from Staff V1 (stale cache or wrong path)"; exit 4; }

echo "✅ Client V1 mirrors Staff V1. V1-only enforcement looks good."
