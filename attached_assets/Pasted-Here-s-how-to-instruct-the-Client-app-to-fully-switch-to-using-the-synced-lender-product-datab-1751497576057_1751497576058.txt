Hereâ€™s how to instruct the **Client** app to fully switch to using the **synced lender product database** for both the **Step 2 recommendation logic** and the **Step 5 required document list**.

---

## âœ… Instructions for Client App

### ðŸ§  1. Use Synced Lender Products for Step 2 (Recommendation Engine)

**Replace any local or fallback data**. Your logic should now:

* Load the full product list from:

  ```
  VITE_API_BASE_URL + /public/lenders
  ```
* Use this dataset in your recommendation logic:

  * Match based on:

    * `productCategory`
    * `country`
    * `minAmount`, `maxAmount`
    * any other eligibility fields (`industries`, `minMonthlyRevenue`, etc.)
* Sort and score matches, then display them on Step 2.

---

### ðŸ“„ 2. Use Selected Products to Determine Required Documents (Step 5)

Update Step 5 to:

* **Pull all products** the user matched or selected in Step 2

* From those products, extract the `productCategory` field

* Combine categories (e.g., if user matches 3 products in `factoring`, `equipment_financing`, `term_loan`)

* For each `category`, call:

  ```
  GET /api/loan-products/required-documents/{category}?headquarters=US|CA&fundingAmount=xxxx
  ```

* Combine all returned document types into one **de-duplicated** list

> Example:

```
Product A â†’ needs docs A, B  
Product B â†’ needs docs B, C  
â†’ Final Required Docs: A, B, C
```

---

## ðŸš« Remove Legacy Logic

Please **remove or disable** any fallback logic or local files related to:

* Hardcoded 8-product dataset
* Local static document lists
* Old decision rules based on string matching alone

---

## ðŸŸ¢ Optional: Add Diagnostics for Validation

1. Add a console log or debug page:

   ```ts
   console.log("Matched Products:", matchedProducts)
   console.log("Final Required Documents:", requiredDocumentList)
   ```
2. Consider surfacing in a `/debug` or `/dev` route.

---

Once this is applied:

* âœ… Step 2 will recommend actual lender products
* âœ… Step 5 will request actual lender-required documents
* âœ… Entire flow becomes live and data-driven, synced from Staff DB

Let me know if you'd like JSON examples or endpoint test stubs.
