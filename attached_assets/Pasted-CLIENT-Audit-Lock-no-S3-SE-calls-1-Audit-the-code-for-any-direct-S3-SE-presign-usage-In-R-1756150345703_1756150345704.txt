CLIENT — Audit & Lock (no S3/SE calls)
1) Audit the code for any direct S3/“SE”/presign usage
# In Replit shell (project root)
rg -n "S3|amazonaws|minio|presign|pre-?sign|SignedURL|putObject|getSignedUrl" client/src || true
rg -n "/documents/(finalize|sign|presign)" client/src || true
rg -n "fetch\\(|axios\\.post\\(" client/src | rg -n "http|/se/|/storage" || true


Expect: no matches that point to S3, amazonaws, minio, /se/ or “presign”.

If you see anything, delete/replace those calls in step 3.

2) Enforce a single Staff API base (compile-time)

Create/update client/.env:

VITE_STAFF_API_BASE=http://localhost:5000


Create/update client/src/lib/api.ts:

export const STAFF_BASE = import.meta.env.VITE_STAFF_API_BASE!;
export function apiUrl(path: string) {
  if (!STAFF_BASE) throw new Error('VITE_STAFF_API_BASE missing');
  return new URL(path, STAFF_BASE).toString();
}
export async function apiFetch(path: string, init?: RequestInit) {
  return fetch(apiUrl(path), { credentials: 'include', ...init });
}


Search/replace usages of fetch("...") to apiFetch("...") for all app endpoints.

3) Client upload = multipart → Staff (no presign, no S3)

Create/update a single uploader (e.g. client/src/features/documents/upload.ts):

import { apiUrl } from "@/lib/api";

export async function uploadDocumentToStaff(opts: {
  applicationId: string;
  file: File;
  docType: string;          // e.g. "bank_statements"
  onProgress?: (pct:number)=>void;
}) {
  const form = new FormData();
  form.append("file", opts.file);
  form.append("docType", opts.docType);
  form.append("fileName", opts.file.name);

  const url = apiUrl(`/api/applications/${opts.applicationId}/documents/upload`);
  // vanilla fetch doesn’t expose progress; if needed, use XHR:
  return fetch(url, { method: "POST", body: form, credentials: "include" })
    .then(r => r.json());
}


Use it in your UI (React handler):

await uploadDocumentToStaff({
  applicationId,
  file,
  docType: "bank_statements",
});

4) Runtime guard (dev only): block rogue hosts

Drop this in client/src/main.tsx (top, dev-only guard):

if (import.meta.env.DEV) {
  const allowed = new URL(import.meta.env.VITE_STAFF_API_BASE!).host;
  const _fetch = window.fetch;
  window.fetch = (input: RequestInfo | URL, init?: RequestInit) => {
    const u = typeof input === "string" ? new URL(input, location.origin) :
              input instanceof URL ? input : new URL((input as Request).url);
    if (u.host !== allowed) {
      console.error("[GUARD] blocked non-Staff host:", u.host, "url:", u.toString());
      throw new Error("Blocked non-Staff host fetch in DEV");
    }
    return _fetch(input, init);
  };
}

5) Playwright test to prove the client never hits S3/SE

Create client/tests/no-external-upload.spec.ts:

import { test, expect } from '@playwright/test';

test('client never calls S3/minio/SE endpoints', async ({ page }) => {
  const forbidden = [/amazonaws/i, /minio/i, /\/se\//i, /presign/i];
  page.on('request', req => {
    const url = req.url();
    if (forbidden.some(rx => rx.test(url))) {
      throw new Error(`Forbidden network call: ${url}`);
    }
  });
  await page.goto('/staff/contacts'); // or the upload page
  // trigger your upload UI (optional)
  expect(true).toBeTruthy();
});
