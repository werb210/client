############################################
# CLIENT APPLICATION â€” ISSUE DISCOVERY SUITE
# Purpose: find duplicate buttons/testIDs,
# missing/unclickable controls, console/network
# errors, and slow calls from the client side.
############################################

# --- 0) Install test tooling (dev only) ---
npm i -D ripgrep @playwright/test playwright

npx playwright install --with-deps

# --- 1) Static audit (testIDs/labels/click handlers) ---
mkdir -p scripts
cat > scripts/static_audit_client.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
echo "=== CLIENT STATIC AUDIT ==="

# A) Duplicate data-testid values
echo "--- Duplicate data-testid values ---"
rg -No 'data-testid=[\"\x27]([^\"\x27]+)[\"\x27]' client \
| sed -E 's/.*data-testid=[\"\x27]([^\"\x27]+)[\"\x27].*/\1/' | sort | uniq -d || true

# B) Suspicious repeated labels
echo "--- Suspicious repeated button/menu/tab labels ---"
rg -No '<(Button|button|MenuItem|Tab)[^>]*>([^<]{1,60})</' client \
| sed -E 's/.*>([^<]+)</\1/' | awk '{$1=$1;print}' | sort | uniq -d || true

# C) Multiple onClick handlers per file (heuristic)
echo "--- Multiple onClick handlers per file ---"
rg -n --no-heading 'onClick=\{[^}]+\}' client | awk -F: '{print $1}' | sort | uniq -c | sort -nr | head -20

echo "=== DONE (static) ==="
EOF
chmod +x scripts/static_audit_client.sh

# --- 2) Playwright tests (UI crawl + runtime) ---
mkdir -p tests
cat > tests/ui_crawl_client.spec.ts <<'EOF'
import { test, expect } from "@playwright/test";
const START = process.env.CLIENT_URL || "http://localhost:5173/";
test("duplicate labels/testIDs and core nav exists", async ({ page }) => {
  await page.goto(START);
  const items=page.locator('button,[role="button"],[data-testid],[role="menuitem"],[role="tab"]');
  const map=new Map<string,number>(); const n=await items.count();
  for(let i=0;i<n;i++){
    const el=items.nth(i);
    const t=(await el.textContent()||"").replace(/\s+/g," ").trim();
    const key=t||(await el.getAttribute("data-testid"))||"";
    if(!key) continue;
    map.set(key,(map.get(key)||0)+1);
  }
  const dups=[...map.entries()].filter(([_,c])=>c>1);
  console.log("CLIENT_DUPLICATES", JSON.stringify(dups, null, 2));

  // Basic nav (adjust to your client app selectors if different)
  const nav = [
    "[data-testid='nav-start-application']",
    "[data-testid='nav-documents']",
    "[data-testid='nav-recommendations']",
    "[data-testid='nav-help']"
  ];
  for (const sel of nav) {
    const el = await page.$(sel);
    expect(el, `Missing nav item ${sel}`).not.toBeNull();
  }
});
EOF

cat > tests/runtime_guard_client.spec.ts <<'EOF'
import { test, expect } from "@playwright/test";
const START = process.env.CLIENT_URL || "http://localhost:5173/";
const SLOW_MS = 1500;

test("no console errors; no 4xx/5xx; no slow calls", async ({ page }) => {
  const errors:string[]=[]; page.on("console",m=>{ if(m.type()==="error") errors.push(m.text()); });
  const bad:string[]=[]; page.on("response",async r=>{ if(r.status()>=400) bad.push(`${r.status()} ${r.url()}`); });

  await page.goto(START); await page.waitForLoadState("networkidle");

  const perf = await page.evaluate(()=>performance.getEntriesByType("resource")
    .filter((e:any)=>e.initiatorType==="fetch"||e.initiatorType==="xmlhttprequest")
    .map((e:any)=>({name:e.name,dur:e.duration})));
  const slow = perf.filter((p:any)=>p.dur>SLOW_MS).map((p:any)=>`${Math.round(p.dur)}ms ${p.name}`);

  expect(errors,"Console errors").toHaveLength(0);
  expect(bad,"Broken network calls").toHaveLength(0);
  expect(slow,"Slow API calls >1.5s").toHaveLength(0);
});
EOF

# --- 3) Master runner (one report) ---
cat > scripts/full_regression_client.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
STAMP=$(date +"%Y%m%d-%H%M%S")
OUT="client-regression-$STAMP.md"
echo "# Client Regression Report ($STAMP)" > "$OUT"
section(){ echo -e "\n## $1\n" | tee -a "$OUT"; }

section "Static Audit"
{ bash scripts/static_audit_client.sh; } 2>&1 | sed 's/\x1b\[[0-9;]*m//g' | tee -a "$OUT"

section "Playwright - UI Crawl"
{ npx playwright test tests/ui_crawl_client.spec.ts --reporter=list; } 2>&1 | tee -a "$OUT" || true

section "Playwright - Runtime Guard"
{ npx playwright test tests/runtime_guard_client.spec.ts --reporter=list; } 2>&1 | tee -a "$OUT" || true

echo -e "\n---\nLegend:\n- Any listed duplicates must be 0\n- No console errors, 0 failed network calls\n- No slow API calls (>1.5s)\n" | tee -a "$OUT"
echo "Wrote $OUT"
EOF
chmod +x scripts/full_regression_client.sh

# --- 4) Run and SHOW CONSOLE OUTPUT ---
bash scripts/full_regression_client.sh
