# ============================
# CLIENT APPLICATION — SINGLE BLOCK (copy/paste all)
# Feature: Analytics API scaffolding (shared prerequisites duplicated) — no client UI this step
# Replit Rules Header (for the agent):
# 1) Exact Execution; 2) Staff vs Client Separation; 3) Full Copy-Paste Blocks; 4) No Questions, No Delays;
# 5) Console Output & Reporting; 6) S3 is source of truth; 7) Office365 for staff email, SendGrid for system email.
# ============================
set -euo pipefail

# --- 0) Dependencies (none required for client UI here)

# --- 1) ENV (append)
mkdir -p .
if ! grep -q "ANALYTICS_DEFAULT_CURRENCY" .env 2>/dev/null; then
  cat >> .env << 'EOF'
# ===== Analytics =====
ANALYTICS_DEFAULT_CURRENCY=CAD
ANALYTICS_PDF_LOGO_S3_KEY=branding/logo.png
ANALYTICS_TIMEZONE=America/Edmonton
ANALYTICS_PDF_CRON=0 7 1 * *
EOF
fi

# --- 2) DB migration (duplicated shared schema)
mkdir -p server/db/migrations
cat > server/db/migrations/2025_08_14_analytics_kpis.sql << 'EOF'
CREATE TABLE IF NOT EXISTS analytics_daily (
  day date PRIMARY KEY,
  leads_new int DEFAULT 0,
  apps_created int DEFAULT 0,
  apps_funded int DEFAULT 0,
  funded_amount numeric DEFAULT 0,
  avg_hours_to_decision numeric,
  slas_breached int DEFAULT 0,
  messages_in int DEFAULT 0,
  messages_out int DEFAULT 0,
  esign_sent int DEFAULT 0,
  esign_completed int DEFAULT 0,
  kyc_approved int DEFAULT 0,
  updated_at timestamptz NOT NULL DEFAULT now()
);

CREATE OR REPLACE VIEW analytics_rolling_30d AS
SELECT
  (SELECT COALESCE(SUM(leads_new),0) FROM analytics_daily WHERE day > now()::date - 30) AS leads_30d,
  (SELECT COALESCE(SUM(apps_created),0) FROM analytics_daily WHERE day > now()::date - 30) AS apps_30d,
  (SELECT COALESCE(SUM(apps_funded),0) FROM analytics_daily WHERE day > now()::date - 30) AS funded_30d,
  (SELECT COALESCE(SUM(funded_amount),0) FROM analytics_daily WHERE day > now()::date - 30) AS funded_amount_30d;
EOF

# Apply migration
npm run db:migrate

# --- 3) Shared services & jobs (duplicated)
mkdir -p server/services server/jobs
cat > server/services/analytics.ts << 'EOF'
import { db } from "../db/client";
import { sql } from "drizzle-orm";

export async function computeDaily(dayISO: string) {
  const r1 = await db.execute(sql`
    SELECT
      (SELECT COUNT(*) FROM contacts WHERE DATE(created_at)=${dayISO}) AS leads_new,
      (SELECT COUNT(*) FROM applications WHERE DATE(created_at)=${dayISO}) AS apps_created,
      (SELECT COUNT(*) FROM applications WHERE funded_at IS NOT NULL AND DATE(funded_at)=${dayISO}) AS apps_funded,
      (SELECT COALESCE(SUM(amount_funded),0) FROM applications WHERE funded_at IS NOT NULL AND DATE(funded_at)=${dayISO}) AS funded_amount,
      (SELECT AVG(hours_to_decision) FROM le_outcomes WHERE DATE(updated_at)=${dayISO}) AS avg_hours_to_decision,
      (SELECT COUNT(*) FROM thread_slas WHERE DATE(breached_at)=${dayISO}) AS slas_breached,
      (SELECT COUNT(*) FROM comm_messages WHERE direction='in'  AND DATE(created_at)=${dayISO}) AS messages_in,
      (SELECT COUNT(*) FROM comm_messages WHERE direction='out' AND DATE(created_at)=${dayISO}) AS messages_out,
      (SELECT COUNT(*) FROM esign_envelopes WHERE DATE(created_at)=${dayISO}) AS esign_sent,
      (SELECT COUNT(*) FROM esign_envelopes WHERE status='completed' AND DATE(updated_at)=${dayISO}) AS esign_completed,
      (SELECT COUNT(*) FROM kyc_sessions WHERE status='approved' AND DATE(updated_at)=${dayISO}) AS kyc_approved
  `);
  const row = r1.rows?.[0] || {};
  await db.execute(sql`
    INSERT INTO analytics_daily(day, leads_new, apps_created, apps_funded, funded_amount, avg_hours_to_decision, slas_breached, messages_in, messages_out, esign_sent, esign_completed, kyc_approved, updated_at)
    VALUES (${dayISO}, ${row.leads_new||0}, ${row.apps_created||0}, ${row.apps_funded||0}, ${row.funded_amount||0}, ${row.avg_hours_to_decision||null}, ${row.slas_breached||0}, ${row.messages_in||0}, ${row.messages_out||0}, ${row.esign_sent||0}, ${row.esign_completed||0}, ${row.kyc_approved||0}, now())
    ON CONFLICT (day) DO UPDATE SET
      leads_new=EXCLUDED.leads_new,
      apps_created=EXCLUDED.apps_created,
      apps_funded=EXCLUDED.apps_funded,
      funded_amount=EXCLUDED.funded_amount,
      avg_hours_to_decision=EXCLUDED.avg_hours_to_decision,
      slas_breached=EXCLUDED.slas_breached,
      messages_in=EXCLUDED.messages_in,
      messages_out=EXCLUDED.messages_out,
      esign_sent=EXCLUDED.esign_sent,
      esign_completed=EXCLUDED.esign_completed,
      kyc_approved=EXCLUDED.kyc_approved,
      updated_at=now()
  `);
}

export async function getSummary(fromISO: string, toISO: string) {
  const r = await db.execute(sql`
    SELECT * FROM analytics_daily
    WHERE day BETWEEN ${fromISO}::date AND ${toISO}::date
    ORDER BY day ASC
  `);
  const rows = r.rows || [];
  const totals = rows.reduce((a:any, x:any)=>({
    leads_new: a.leads_new + Number(x.leads_new||0),
    apps_created: a.apps_created + Number(x.apps_created||0),
    apps_funded: a.apps_funded + Number(x.apps_funded||0),
    funded_amount: a.funded_amount + Number(x.funded_amount||0),
    messages_in: a.messages_in + Number(x.messages_in||0),
    messages_out: a.messages_out + Number(x.messages_out||0),
    esign_sent: a.esign_sent + Number(x.esign_sent||0),
    esign_completed: a.esign_completed + Number(x.esign_completed||0),
    kyc_approved: a.kyc_approved + Number(x.kyc_approved||0),
    slas_breached: a.slas_breached + Number(x.slas_breached||0)
  }), { leads_new:0, apps_created:0, apps_funded:0, funded_amount:0, messages_in:0, messages_out:0, esign_sent:0, esign_completed:0, kyc_approved:0, slas_breached:0 });
  return { rows, totals };
}
EOF

cat > server/jobs/analyticsDaily.ts << 'EOF'
import { computeDaily } from "../services/analytics";
export async function backfillAnalytics(daysBack = 90) {
  const now = new Date();
  for (let i=daysBack; i>=0; i--){
    const d = new Date(now.getTime() - i*24*3600*1000);
    await computeDaily(d.toISOString().slice(0,10));
  }
}
EOF

cat > server/jobs/analyticsReportJob.ts << 'EOF'
import PDFDocument from "pdfkit";
import { S3Client, PutObjectCommand, GetObjectCommand } from "@aws-sdk/client-s3";
import { getSummary } from "../services/analytics";
const s3 = new S3Client({ region: process.env.AWS_REGION });
export async function runAnalyticsReportOnce(range?: { from: string; to: string }) {
  const to = (range?.to || new Date().toISOString().slice(0,10));
  const fromD = new Date(new Date(to).getTime() - 29*24*3600*1000);
  const from = (range?.from || fromD.toISOString().slice(0,10));
  const { rows, totals } = await getSummary(from, to);
  const doc = new PDFDocument({ size:"LETTER", margin: 54 });
  const chunks: Buffer[] = []; doc.on("data", (b)=>chunks.push(b));
  try {
    if (process.env.ANALYTICS_PDF_LOGO_S3_KEY) {
      const obj = await s3.send(new GetObjectCommand({ Bucket: process.env.S3_BUCKET!, Key: process.env.ANALYTICS_PDF_LOGO_S3_KEY! }));
      const buf = Buffer.from(await obj.Body!.transformToByteArray());
      doc.image(buf, { fit:[120,40] });
    }
  } catch {}
  doc.fontSize(18).text("Monthly Analytics Summary", { align:"left" });
  doc.moveDown().fontSize(11).text(`Period: ${from} → ${to}`).moveDown();
  function stat(label:string, value:string){ doc.fontSize(12).text(`${label}: ${value}`); }
  stat("New leads", String(totals.leads_new));
  stat("Applications created", String(totals.apps_created));
  stat("Funded applications", String(totals.apps_funded));
  stat("Funded amount", `${process.env.ANALYTICS_DEFAULT_CURRENCY || "CAD"} ${Number(totals.funded_amount||0).toLocaleString()}`);
  stat("Messages (in/out)", `${totals.messages_in}/${totals.messages_out}`);
  stat("E-sign (sent/completed)", `${totals.esign_sent}/${totals.esign_completed}`);
  stat("KYC approved", String(totals.kyc_approved));
  stat("SLA breaches", String(totals.slas_breached));
  doc.addPage().fontSize(14).text("Daily breakdown", { underline:true }).moveDown();
  for (const r of rows) { doc.fontSize(10).text(`${r.day}: leads ${r.leads_new}, apps ${r.apps_created}/${r.apps_funded}, funded ${Number(r.funded_amount||0).toFixed(0)}`); }
  doc.end();
  const pdf = await new Promise<Buffer>((res)=>{ doc.on("end", ()=>res(Buffer.concat(chunks))); });
  const Key = `analytics/reports/report_${from}_${to}.pdf`;
  await s3.send(new PutObjectCommand({ Bucket: process.env.S3_BUCKET!, Key, Body: pdf, ContentType: "application/pdf" }));
  const recipients = ["ops@boreal.financial"]; return { file: Key, recipients, from, to };
}
EOF

# --- 4) API routes (duplicated shared mount; keep same shape)
mkdir -p server/routes/analytics
cat > server/routes/analytics/index.ts << 'EOF'
import { Router } from "express";
import { getSummary } from "../../services/analytics";
import { backfillAnalytics } from "../../jobs/analyticsDaily";
import { runAnalyticsReportOnce } from "../../jobs/analyticsReportJob";
const router = Router();
router.get("/summary", async (req:any, res)=>{
  const to = String(req.query.to || new Date().toISOString().slice(0,10));
  const from = String(req.query.from || new Date(new Date(to).getTime() - 29*24*3600*1000).toISOString().slice(0,10));
  const out = await getSummary(from, to);
  res.json({ from, to, ...out });
});
router.post("/backfill", async (_req, res)=>{ await backfillAnalytics(90); res.json({ ok: true }); });
router.post("/export/pdf", async (req:any, res)=>{ const { from, to } = req.body || {}; const out = await runAnalyticsReportOnce({ from, to }); res.json({ ok: true, ...out }); });
export default router;
EOF

if ! grep -q "app.use(\"/api/analytics\"" server/index.ts; then
  cat >> server/index.ts << 'EOF'
// --- ANALYTICS MOUNT (client) ---
import analyticsRouter from "./routes/analytics";
app.use("/api/analytics", analyticsRouter);
EOF
fi

# --- 5) Queue schedule (if queues exist, append monthly export)
if [ -f server/queues/index.ts ] && ! grep -q "monthly-export" server/queues/index.ts; then
  cat >> server/queues/index.ts << 'EOF'
// --- ANALYTICS MONTHLY EXPORT SCHEDULE (client) ---
import { runAnalyticsReportOnce } from "../jobs/analyticsReportJob";
await queues.analytics.add("monthly-export", {}, { repeat: { cron: process.env.ANALYTICS_PDF_CRON || "0 7 1 * *", tz: process.env.TIMEZONE || "America/Edmonton" } });
EOF
fi

echo "=== CLIENT Analytics: schema/services/routes in place. No client UI shipped in this step."
