CLIENT APP — ONE-BLOCK RUNBOOK (apply in order)

0) PREP
- Branch: git checkout -b fix/client-e2e-local-products-submission
- Ensure .env has STAFF_API_BASE=https://staff.boreal.financial/api (for submission only)
- Clear caches/builds: rm -rf node_modules dist .vite && pnpm install && pnpm build

1) PRODUCTS DATA — LOCAL SOURCE ONLY DURING APPLICATION FLOW
1.1 Pick ONE local cache as the primary store (IndexedDB)
  - Use existing lenderCache.ts (IndexedDB key: lenderProducts)
  - Remove/ignore alternate caches (lender_products_cache, bf:products:v1) or map them into the single store on first run
1.2 Load strategy
  - On app startup: if lenderProducts empty → fetch ONCE from Staff /api/v1/products (or from a prepackaged JSON) and seed IndexedDB
  - During Steps 1, 2, 5: NEVER call Staff; always read from IndexedDB
1.3 Remove stray product API calls
  rg -n --iglob '!node_modules' "/api/v1/products|fetchCatalogProducts|getProducts|usePublicLenders|documentIntersection" src
  - Replace fetch('/api/v1/products') with await loadLenderProducts()
1.4 Normalize schema to match Staff API (end-to-end)
  interface Product {
    id: string; name: string; lender_name: string;
    country: 'CA'|'US'|null; category: string;
    min_amount: number; max_amount: number;
    active: boolean; updated_at: string;
    required_documents: string[];
    min_time_in_business?: number|null;
    min_monthly_revenue?: number|null;
    excluded_industries?: string[];
  }
  - Add a small adapter where legacy fields exist (e.g., product_name -> name) so UI always consumes the normalized Product type.
1.5 Handle Staff “Push to client”
  - Implement POST /api/products/apply-diff (client local server) to accept:
    { upserts: Product[], deletes: string[] }
  - Upsert into IndexedDB; delete by id; bump a local version key products_version++

2) APPLICATION STEPS — COLLECT WHAT STAFF VALIDATES
2.1 Step 1 — Financial Profile
  - Fields (persist to localStorage/IndexedDB): country, amount, industry, business_legal_name
2.2 Step 2 — Product Category
  - Use IndexedDB products; filter by country + amount range; show categories available
2.3 Step 3 — Business Details (CRITICAL new fields)
  - years_in_business (number, months)  ➜ must be ≥12 for happy path
  - monthly_revenue (currency number)   ➜ must be ≥15000 for happy path
  - contact_name, contact_email, contact_phone (validated)
2.4 Step 4 — Owners/Additional
  - Keep as-is; ensure minimal valid defaults don’t break validation
2.5 Step 5 — Documents
  - Use product.required_documents as the checklist; collect uploads for matching doc “type”
  - Persist selections (name, type, size placeholder) into submission buffer
2.6 Step 6 — Review & Terms
  - Show a consolidated read-only view; require Terms checkbox
2.7 Step 7 — Submit
  - Build payload EXACTLY matching Staff API:
    {
      product_id, country, amount,
      years_in_business, monthly_revenue,
      business_legal_name, industry,
      contact_name, contact_email, contact_phone,
      documents: [{ name, type, size }]
    }
  - POST to ${STAFF_API_BASE}/v1/applications with CSRF header
  - On 202 -> show submission_id + status QUEUED
  - On 400 -> display Staff’s business-rule errors inline (months/revenue)

3) NAVIGATION & STATE
3.1 Provide Next/Back buttons on every step (no manual URL typing)
3.2 Persist form state between steps (localStorage/IndexedDB “appDraft”)
3.3 Guard refresh/leave with a soft prompt if unsaved files are present

4) PWA & NETWORK HYGIENE (Client app only; no Twilio here)
4.1 Service Worker
  - In development: disabled to avoid stale bundles
  - In production: cache static assets; NEVER cache /v1/applications POST
4.2 CSP (client shell) should not block normal form operation
  - Keep strict defaults; client doesn’t load Twilio/3rd-party SDKs during apply flow

5) TESTS — EXACT ORDER TO RUN (CLIENT)
5.1 Seed/verify products (only once)
  Open app → trigger initial seed → Confirm “42 products loaded” in client logs
  DevTools Application → IndexedDB → lenderProducts length == 42
5.2 No staff calls during Steps 1, 2, 5
  DevTools Network tab → filter “/api/v1/products” → expect ZERO requests while navigating steps
5.3 Happy-path E2E (use these values)
  Step 1: CA, amount 100000, Acme Manufacturing Inc., Manufacturing
  Step 2: Choose “Working Capital”
  Step 3: years_in_business=24, monthly_revenue=50000, Jane Doe / jane@example.com / +1-555-123-4567
  Step 5: Upload 6 docs (Financials 2022/2023/2024, Bank Apr-2025 + Jan-Mar 2025, AR aging, AP aging)
  Step 7: Submit → Expect 202 { ok:true, submission_id, status:"QUEUED" } from Staff
5.4 Negative tests (surface Staff rules properly)
  - years_in_business=6, monthly_revenue=12000 → Expect 400 with both rule messages
5.5 Push-to-client test
  - From Staff, click “Push products” (sends upserts/deletes)
  - In Client, confirm IndexedDB updated and UI reflects changes without page reload

6) ACCEPTANCE CRITERIA (CLIENT)
- Steps 1→7 usable end-to-end with zero product API calls during steps (after initial seed)
- Documents selection reflects product.required_documents
- Submission payload matches Staff schema and succeeds on happy path
- Validation errors from Staff rendered clearly to user on failure path
- Push-to-client updates local product store correctly (upserts & deletes)

Commit & deliverable
- git commit -am "Client: local products cache only, normalized schema, steps collect business criteria, robust submission UX"
- git push; tag release
