#!/usr/bin/env bash
# ============================
# CLIENT APP â€“ ONE-BLOCK TESTER
# Builds a real intake from Staff truth, validates, submits,
# (optionally uploads 2 test docs if an endpoint exists),
# and writes /tmp/submission_continuity.json for Staff to verify.
# Requirements: bash, curl, jq
# Env (override if needed): CLIENT_BASE, STAFF_BASE, TRACE
# ============================
set -euo pipefail

need(){ command -v "$1" >/dev/null || { echo "Missing $1"; exit 1; }; }; need curl; need jq

CLIENT_BASE="${CLIENT_BASE:-http://localhost:5000}"
STAFF_BASE="${STAFF_BASE:-https://staff.boreal.financial}"
TRACE="${TRACE:-/tmp/submission_continuity.json}"

# 0) Best-effort pull from Staff into Client cache
curl -fsS -X POST "$CLIENT_BASE/internal/pull-staff-products" -H 'content-type: application/json' -d '{}' >/dev/null || true

# 1) Read Staff catalog (source of truth) and pick a product (prefer US -> CA -> first)
S_RAW="$(curl -fsS "$STAFF_BASE/api/v1/products")"
PID="$(echo "$S_RAW" | jq -r '
  ([.[] | select((.countryOffered // .country_offered // .country)=="US")][0].id)
  // ([.[] | select((.countryOffered // .country_offered // .country)=="CA")][0].id)
  // .[0].id
')"
[ -n "$PID" ] && [ "$PID" != "null" ] || { echo "No Staff product found"; exit 1; }

SPROD="$(echo "$S_RAW" | jq -c --arg id "$PID" '.[]|select(.id==$id)')"
SCNTRY="$(echo "$SPROD" | jq -r '.countryOffered // .country_offered // .country // empty')"
[ -n "$SCNTRY" ] || { echo "Selected Staff product missing country"; exit 1; }

# 2) Derive constraints (midpoint if min/max present; otherwise safe defaults)
SMIN="$(echo "$SPROD" | jq -r '.minimumLendingAmount // .min_amount // empty')"
SMAX="$(echo "$SPROD" | jq -r '.maximumLendingAmount // .max_amount // empty')"
if [[ -n "${SMIN:-}" && -n "${SMAX:-}" && "${SMIN//[^0-9.]}" != "" && "${SMAX//[^0-9.]}" != "" ]]; then
  AMOUNT="$(( ( ${SMIN%.*:-0} + ${SMAX%.*:-0} ) / 2 ))"
else
  AMOUNT=25000
fi
STIB="$(echo "$SPROD" | jq -r '.min_time_in_business // empty')"
SREV="$(echo "$SPROD" | jq -r '.min_monthly_revenue // empty')"
TIB="$([ -n "${STIB:-}" ] && echo "${STIB%.*}" || echo 120)"
REV="$([ -n "${SREV:-}" ] && echo "${SREV%.*}" || echo 100000)"
IND="Technology"

# 3) Build intake payload (canonical)
INTAKE="$(jq -n --arg pid "$PID" --arg c "$SCNTRY" \
  --argjson amt "$AMOUNT" --argjson tib "$TIB" --argjson rev "$REV" \
  --arg ind "$IND" \
  '{product_id:$pid,country:$c,amount:$amt,timeInBusinessMonths:$tib,monthlyRevenue:$rev,industry:$ind}')"

# 4) Validate via Client (if implemented)
curl -fsS -X POST "$CLIENT_BASE/api/applications/validate-intake" \
  -H 'content-type: application/json' -d "$INTAKE" >/dev/null || true

# 5) Submit via Client and capture application id
APP="$(curl -fsS -X POST "$CLIENT_BASE/api/applications" -H 'content-type: application/json' -d "$INTAKE")"
APP_ID="$(echo "$APP" | jq -r '.id // .application_id // .applicationId // empty')"
[ -n "$APP_ID" ] || { echo "No application ID returned"; echo "$APP" | jq '.' || true; exit 1; }

# 6) Determine required_documents for the product (prefer Staff truth-at-submit)
REQ_DOCS="$(echo "$SPROD" | jq -c '.required_documents // []')"

# 7) Optional: try to upload two small test files if an endpoint exists
mkdir -p /tmp/test_docs
echo "Example bank statement content" > /tmp/test_docs/bank_statement.txt
echo "Example tax return content" > /tmp/test_docs/tax_return.txt

UPLOADED='[]'
try_upload(){
  local endpoint="$1" file="$2" dtype="$3"
  resp="$(curl -s -w "\n%{http_code}" -X POST "$CLIENT_BASE$endpoint" \
     -F "file=@${file}" -F "doc_type=${dtype}" -F "application_id=${APP_ID}" 2>/dev/null || echo -e "{}\n000")"
  code="$(echo "$resp" | tail -n1)"
  body="$(echo "$resp" | head -n -1)"
  if [[ "$code" == "200" || "$code" == "201" ]]; then
    UPLOADED="$(jq -c --arg t "$dtype" --arg f "$(basename "$file")" \
      '. + [{type:$t,file:$f}]' <<<"$UPLOADED")"
    return 0
  fi
  return 1
}
# probe common endpoints; ignore failures
for ep in "/api/applications/$APP_ID/documents" "/api/applications/$APP_ID/files" "/api/documents" "/api/upload"; do
  try_upload "$ep" "/tmp/test_docs/bank_statement.txt" "bank_statements" && break || true
done
for ep in "/api/applications/$APP_ID/documents" "/api/applications/$APP_ID/files" "/api/documents" "/api/upload"; do
  try_upload "$ep" "/tmp/test_docs/tax_return.txt" "tax_returns" && break || true
done

# 8) Write continuity trace for Staff verification (stable schema)
jq -n \
  --arg app_id "$APP_ID" \
  --argjson intake "$INTAKE" \
  --argjson staff_product "$SPROD" \
  --arg client_base "$CLIENT_BASE" \
  --arg staff_base "$STAFF_BASE" \
  --arg timestamp "$(date -Iseconds)" \
  --argjson required_documents "$REQ_DOCS" \
  --argjson uploaded_documents "$UPLOADED" \
  '{
    meta:{timestamp:$timestamp, client_base:$client_base, staff_base:$staff_base, test:"client_e2e_submission"},
    app_id:$app_id,
    intake:$intake,
    staff_product_at_submit:$staff_product,
    required_documents:$required_documents,
    uploaded_documents:$uploaded_documents
  }' > "$TRACE"

echo "CLIENT OK: wrote $TRACE with app_id=$APP_ID"
