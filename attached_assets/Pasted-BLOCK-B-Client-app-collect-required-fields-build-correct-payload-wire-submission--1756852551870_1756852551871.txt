BLOCK B — Client app: collect required fields, build correct payload, wire submission
// ─────────────────────────────────────────────────────────────────────────────
// CLIENT APP — Fix submission flow (no Twilio here)
// - Collect years_in_business & monthly_revenue in the form flow
// - Fetch CSRF once
// - Submit to staff endpoint and handle 400s nicely
// ─────────────────────────────────────────────────────────────────────────────

/** 1) Add the two required fields to the form state (Step 1 or Step 3) */
type ApplicationState = {
  country: "CA"|"US"|null;
  amount: number;
  product_id: string|null;
  // REQUIRED business criteria:
  years_in_business: number|null;   // ← add
  monthly_revenue: number|null;     // ← add
  // existing fields...
};

// Ensure these are persisted to local storage the same way as other fields.

/** 2) CSRF bootstrap (on app start or before first POST) */
export async function ensureCsrf() {
  const seen = sessionStorage.getItem("csrf:bootstrapped");
  if (seen) return;
  await fetch(`${import.meta.env.VITE_STAFF_API}/csrf-token`, { credentials: "include" });
  sessionStorage.setItem("csrf:bootstrapped", "1");
}

/** 3) Build the submission payload from local state + selected product */
export async function submitApplication(state: ApplicationState, profile: {
  business_legal_name: string;
  industry: string;
  contact_name: string;
  contact_email: string;
  contact_phone: string;
}, documents: { type: string; url?: string }[]) {
  if (!state.product_id) throw new Error("No product selected");
  if (!state.country)     throw new Error("Country is required");
  if (!state.years_in_business || !state.monthly_revenue)
    throw new Error("Business criteria missing");

  await ensureCsrf();

  const body = {
    product_id: state.product_id,
    country: state.country,
    amount: state.amount,
    years_in_business: state.years_in_business,
    monthly_revenue: state.monthly_revenue,
    business_legal_name: profile.business_legal_name,
    industry: profile.industry,
    contact_name: profile.contact_name,
    contact_email: profile.contact_email,
    contact_phone: profile.contact_phone,
    documents,
    client_session_id: crypto.randomUUID(),
  };

  const r = await fetch(`${import.meta.env.VITE_STAFF_API}/v1/applications`, {
    method: "POST",
    credentials: "include",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });

  if (r.status === 400) {
    const j = await r.json();
    // Show inline field errors from j.errors
    throw new Error((j.errors?.map((e:any)=>e.message).join(" ")) || "Validation failed");
  }
  if (!r.ok) throw new Error(`Submission failed (HTTP ${r.status})`);

  return r.json(); // { ok:true, submission_id, status:"QUEUED" }
}

/** 4) UI wiring
 - Step 1/3: add inputs
   • Years in business (number)
   • Monthly revenue (currency)
 - Step 5: unchanged (doc requirements already working)
 - Step 7: call submitApplication(...) and show success/validation errors
*/

/** 5) ENV
VITE_STAFF_API=https://staff.boreal.financial/api
*/


Client acceptance

Form adds years_in_business and monthly_revenue and persists them.

ensureCsrf() runs once; submission sends a valid payload.

On 400, users see clear inline messages; on 202, users see a confirmation with submission_id.

No calls to staff products during Steps 1/2/5 (those already use local cache).