# ==== 0) SAFETY: fail fast on errors ====
set -euo pipefail

# ==== 1) DE-DUPLICATION (remove legacy/duplicate Step 2/5 + old engine) ====
# Keep ONLY the canonical routes:
#   client/src/routes/apply/step-2/index.tsx
#   client/src/routes/apply/step-5/index.tsx
#   client/src/routes/apply/step-7/index.tsx (or Step7_Submit.tsx)
# Remove legacy/backup/duplicate files that shadow behavior.
canon_step2="client/src/routes/apply/step-2/index.tsx"
canon_step5="client/src/routes/apply/step-5/index.tsx"
mkdir -p .trash-client-$(date +%Y%m%d_%H%M%S)

# 1a) Remove old recommendation engine(s)
for f in \
  client/src/lib/recommendations/engine.ts \
  client/src/lib/recommendations/engine/*.ts \
  client/src/lib/recommendations/*.old.* \
  client/src/lib/products/recommendationEngine*.ts \
  client/src/**/Step2_Recommendations*.tsx \
  client/src/**/CategoryCards*.tsx \
  client/src/**/DocumentsUpload*.tsx \
  client/src/routes/Step5_DocumentRequirements*.tsx \
  client/src/routes/**/step-2/*.old.* \
  client/src/routes/**/step-5/*.old.* \
  client/src/**/__backup__/** \
  client/src/**/backup/** \
  client/src/**/deprecated/** ; do
  [ -e "$f" ] && mv "$f" .trash-client-*/ || true
done

# 1b) Ensure we’re not serving a stale service-worker in dev
if [ -f public/service-worker.js ]; then
  sed -i '1s;^;self.addEventListener("install", e=>self.skipWaiting());self.addEventListener("activate", e=>self.clients.claim());\nif(!self.location.hostname.match(/localhost|127\.0\.0\.1/)){/* prod ok */}else{self.addEventListener("fetch", e=>{});} \n;' public/service-worker.js || true
fi

# ==== 2) SHARED APP STATE (read/write Step 1 + Step 2) ====
# Create or update a tiny state helper used by Steps 2,5,7 without new deps.
mkdir -p client/src/lib/state
cat > client/src/lib/state/appState.ts <<'TS'
export type Intake = {
  amountRequested?: number;
  country?: string;
  province?: string;
  industry?: string;
  [k: string]: any;
};
export type Step2Category = {
  id: string;            // e.g., "line_of_credit"
  label: string;         // e.g., "Line of Credit"
  score?: number;        // best-match score
};
const K_INTAKE = "bf:intake";
const K_STEP2  = "bf:step2";

export function getIntake(): Intake | null {
  try { return JSON.parse(localStorage.getItem(K_INTAKE) || "null"); } catch { return null; }
}
export function setIntake(v: Intake){ localStorage.setItem(K_INTAKE, JSON.stringify(v||{})); }

export function getStep2(): Step2Category | null {
  try { return JSON.parse(localStorage.getItem(K_STEP2) || "null"); } catch { return null; }
}
export function setStep2(cat: Step2Category | null){
  if (cat) localStorage.setItem(K_STEP2, JSON.stringify(cat));
  else localStorage.removeItem(K_STEP2);
}
TS

# ==== 3) CATEGORY DEFINITIONS & DOC RULES (single source of truth) ====
mkdir -p client/src/lib/docs
cat > client/src/lib/docs/requirements.ts <<'TS'
import type { Intake, Step2Category } from "../state/appState";

/** Canonical product categories — extendable without code changes elsewhere */
export const PRODUCT_CATEGORIES: { id: string; label: string }[] = [
  { id: "line_of_credit",        label: "Line of Credit" },
  { id: "term_loan",             label: "Term Loan" },
  { id: "invoice_factoring",     label: "Invoice Factoring" },
  { id: "equipment_financing",   label: "Equipment Financing" },
  { id: "purchase_order",        label: "Purchase Order Financing" },
  { id: "working_capital",       label: "Working Capital" },
];

/** Build required documents from Step 1 intake + Step 2 category */
export function buildRequiredDocuments(intake: Intake, cat: Step2Category | null): string[] {
  const base = [
    "Bank Statements (last 6 months)",
    "Business Financial Statements (P&L & Balance Sheet)",
    "Business Tax Returns (last 2–3 years)",
    "Business Registration / Articles",
  ];
  // Amount-based extras (example threshold)
  const amount = Number(intake?.amountRequested ?? 0);
  if (amount >= 25000) base.push("Personal Financial Statement", "Personal Guarantee");

  const id = cat?.id;
  switch (id) {
    case "invoice_factoring":
      return [...base, "A/R Aging", "Sample Invoices (unpaid)"];
    case "equipment_financing":
      return [...base, "Equipment Quote / Spec Sheet"];
    case "purchase_order":
      return [...base, "Purchase Orders", "Customer Credit Information"];
    case "line_of_credit":
      return [...base, "Cash Flow Statement"];
    case "term_loan":
      return [...base, "Cash Flow Statement"];
    case "working_capital":
      return base;
    default:
      return base;
  }
}
TS

# ==== 4) STEP 2 — Category UI (clickable, aria/keyboard, overlay guard, auto-select) ====
mkdir -p client/src/routes/apply/step-2
cat > "$canon_step2" <<'TSX'
import React, { useEffect, useMemo, useState } from "react";
import { getIntake, getStep2, setStep2 } from "../../../lib/state/appState";
import { PRODUCT_CATEGORIES } from "../../../lib/docs/requirements";

type Cat = { id:string; label:string; score?:number };

const guardStyles: React.CSSProperties = {
  position:"relative", zIndex: 2,
};
const overlayKiller = `
  *, *::before, *::after { }
  #step2-root { position: relative; z-index: 2; }
  body [data-overlay], body .overlay, body .modal, body .scrim {
    pointer-events: none !important;
  }
`;

export default function Step2() {
  const intake = useMemo(()=>getIntake()||{}, []);
  const [cats, setCats] = useState<Cat[]>([]);
  const [selected, setSelected] = useState<Cat | null>(getStep2());

  // naive score: prefer categories by amount/industry (can replace later)
  useEffect(()=>{
    const base = PRODUCT_CATEGORIES.map(c=>({ ...c, score:0 }));
    const amt = Number(intake?.amountRequested ?? 0);
    for (const c of base) {
      if (c.id==="invoice_factoring" && (intake?.industry||"").toLowerCase().includes("construction")) c.score!+=1;
      if (c.id==="equipment_financing" && (intake?.industry||"").toLowerCase().includes("equipment")) c.score!+=1;
      if (["term_loan","line_of_credit","working_capital"].includes(c.id) && amt>=10000) c.score!+=1;
    }
    base.sort((a,b)=> (b.score??0)-(a.score??0));
    setCats(base);
    // auto-select best if none set
    if (!getStep2() && base.length) {
      setSelected(base[0]); setStep2(base[0]);
      console.log("[Step2] Auto-selected:", base[0]);
    }
  }, []);

  function choose(c:Cat){
    setSelected(c); setStep2(c);
    console.log("[Step2] Saved category:", c);
  }

  return (
    <div id="step2-root" style={guardStyles}>
      <style dangerouslySetInnerHTML={{__html: overlayKiller}}/>
      <h1 className="title">Choose Product Category</h1>
      <p className="subtitle">Pick the financing type that best matches your needs.</p>

      <div className="grid" role="list">
        {cats.map(c=>(
          <button
            key={c.id}
            data-testid={`cat-${c.id}`}
            role="button"
            type="button"
            aria-pressed={selected?.id===c.id}
            className={`card ${selected?.id===c.id ? "selected":""}`}
            onClick={()=>choose(c)}
            onKeyDown={e=>{ if(e.key==="Enter"||e.key===" ") { e.preventDefault(); choose(c);} }}
          >
            <div className="card-head">
              <span className="label">{c.label}</span>
              {typeof c.score==="number" && <span className="score">Match {Math.round((c.score/2)*100)}%</span>}
            </div>
            {selected?.id===c.id && <div className="badge">Selected</div>}
          </button>
        ))}
      </div>

      <div className="footer">
        <a className="btn secondary" href="/apply/step-1">Back</a>
        <a className={`btn primary ${selected?'':'disabled'}`} href="/apply/step-3" onClick={e=>{ if(!selected){ e.preventDefault(); alert("Please choose a category to continue."); }}}>Continue</a>
      </div>

      <style>{`
        .title{font-size:1.5rem;font-weight:600;margin:8px 0;}
        .subtitle{color:#667085;margin-bottom:12px}
        .grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(240px,1fr));gap:12px;margin:12px 0;}
        .card{background:#fff;border:1px solid #EAECF0;border-radius:12px;padding:16px;text-align:left;cursor:pointer;outline:none}
        .card:hover{box-shadow:0 2px 10px rgba(16,24,40,0.08)}
        .card.selected{border-color:#16a34a;box-shadow:0 0 0 2px rgba(22,163,74,0.25)}
        .card-head{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}
        .label{font-weight:600}
        .score{font-size:.85rem;color:#475467}
        .badge{margin-top:4px;display:inline-block;background:#DCFCE7;color:#166534;padding:2px 8px;border-radius:999px;font-size:.8rem}
        .footer{margin-top:16px;display:flex;gap:8px;justify-content:flex-end}
        .btn{padding:10px 16px;border-radius:10px;text-decoration:none}
        .btn.primary{background:#16a34a;color:#fff}
        .btn.primary.disabled{opacity:.6;pointer-events:none}
        .btn.secondary{background:#F2F4F7;color:#344054}
      `}</style>
    </div>
  );
}
TSX

# ==== 5) STEP 5 — document list driven by Step 1 + Step 2 ====
cat > "$canon_step5" <<'TSX'
import React, { useMemo } from "react";
import { getIntake, getStep2 } from "../../../lib/state/appState";
import { buildRequiredDocuments } from "../../../lib/docs/requirements";

export default function Step5Documents(){
  const intake = useMemo(()=>getIntake()||{},[]);
  const cat    = useMemo(()=>getStep2(),[]);
  const docs   = buildRequiredDocuments(intake, cat);

  return (
    <div>
      <h1 className="title">Required Documents</h1>
      <p className="subtitle">Based on your details and selected financing category.</p>

      <div className="pill-row">
        <span className="pill">{cat?.label || "No category selected"}</span>
        {"·"}
        <span className="pill">{intake?.country || "Country NA"}</span>
        {"·"}
        <span className="pill">${Number(intake?.amountRequested||0).toLocaleString()}</span>
      </div>

      <ul className="doc-list">
        {docs.map((d,i)=>(<li key={i} data-doc-card>{d}</li>))}
      </ul>

      <div className="footer">
        <a className="btn secondary" href="/apply/step-4">Back</a>
        <a className="btn primary" href="/apply/step-6">Continue</a>
      </div>

      <style>{`
        .title{font-size:1.5rem;font-weight:600;margin:8px 0;}
        .subtitle{color:#667085;margin-bottom:12px}
        .pill-row{display:flex;gap:8px;align-items:center;color:#475467;margin:8px 0;}
        .pill{background:#F2F4F7;border:1px solid #EAECF0;border-radius:999px;padding:4px 10px;font-size:.85rem}
        .doc-list{margin:12px 0;padding-left:20px}
        .doc-list li{margin:6px 0}
        .footer{margin-top:16px;display:flex;gap:8px;justify-content:flex-end}
        .btn{padding:10px 16px;border-radius:10px;text-decoration:none}
        .btn.primary{background:#16a34a;color:#fff}
        .btn.secondary{background:#F2F4F7;color:#344054}
      `}</style>
    </div>
  )
}
TSX

# ==== 6) STEP 7 SUBMISSION — include Step 2 category in payload ====
# Patch the submit action to include: loanProductCategory & loanProductCategoryLabel
# Adjust the path below if your Step 7 file name differs.
submit_file="client/src/routes/Step7_Submit.tsx"
if [ -f "$submit_file" ]; then
  # idempotent insert (safe re-run)
  grep -q "loanProductCategoryLabel" "$submit_file" || \
  sed -i 's/const payload = {[^}]*/&\n  loanProductCategory: (JSON.parse(localStorage.getItem("bf:step2")||"null")||{}).id,\n  loanProductCategoryLabel: (JSON.parse(localStorage.getItem("bf:step2")||"null")||{}).label,\n/' "$submit_file"
fi

# ==== 7) RUNTIME GUARD TESTS (quick sanity) ====
# Console helper you can paste in the browser console on /apply/step-2
cat > /tmp/step2-debug.txt <<'JS'
(() => {
  const btns=[...document.querySelectorAll('button[data-testid^="cat-"]')];
  console.table(btns.map(b=>({text:b.innerText.split('\n')[0], pe:getComputedStyle(b).pointerEvents, z:getComputedStyle(b).zIndex})));
  console.log('Saved category:', localStorage.getItem('bf:step2'));
})();
JS
echo "Paste this in the console at /apply/step-2:"
cat /tmp/step2-debug.txt

# ==== 8) E2E HEADLESS TEST (optional) using Playwright if available ====
# Creates a minimal test to ensure Step2->Step5 link & submission payload fields present.
mkdir -p client/tests
cat > client/tests/step2_step5_submit.spec.ts <<'TS'
import { test, expect } from '@playwright/test';
test('Step2->Step5 and payload carries category', async ({ page }) => {
  await page.addInitScript(() => {
    localStorage.setItem('bf:intake', JSON.stringify({amountRequested:500000,country:'CA',industry:'Construction'}));
  });
  await page.goto('http://localhost:5000/apply/step-2');
  await page.waitForSelector('[data-testid^="cat-"]');
  const first = page.locator('[data-testid^="cat-"]').first();
  const text = await first.innerText();
  await first.click();
  // proceed
  await page.click('text=Continue');
  await page.goto('http://localhost:5000/apply/step-5');
  await expect(page.locator('[data-doc-card]')).toHaveCountGreaterThan(2);
});
TS
# Note: run manually if Playwright is installed:
#   cd client && npx playwright test tests/step2_step5_submit.spec.ts --headed

# ==== 9) BUILD ====
npm run build
echo "CLIENT APP: Done."
