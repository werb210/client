CLIENT APP — GLOBAL BLOCK A — Replit Universal Rules (apply to this app)
Do only what’s inside the blocks. No substitutions.
Keep existing routes and API endpoints.
All fetches must use credentials:"include".
Cookies must be HttpOnly; Secure; SameSite=None; Path=/.
Do not introduce /test-login or any bypass routes.
Proceed through all blocks without asking to continue.
CLIENT APP — BLOCK 1: Add “Report an Issue” (with screenshot)
npm i html2canvas --silent
applypatch <<'PATCH'
*** Begin Patch
*** Add File: src/lib/screenshot.ts
@@
+import html2canvas from "html2canvas";
+export async function captureScreenAsDataUrl(root: HTMLElement = document.body): Promise<string>{
+  const canvas = await html2canvas(root, { useCORS: true, logging: false, scale: 1 });
+  return canvas.toDataURL("image/png");
+}
*** End Patch
PATCH
applypatch <<'PATCH'
*** Begin Patch
*** Add File: src/components/ReportIssueButton.tsx
@@
+import { useState } from "react";
+import { captureScreenAsDataUrl } from "../lib/screenshot";
+export default function ReportIssueButton({ appId, reportedBy }:{ appId?:string; reportedBy:string }){
+  const [open,setOpen]=useState(false); const [title,setTitle]=useState(""); const [desc,setDesc]=useState(""); const [busy,setBusy]=useState(false);
+  async function submit(){
+    setBusy(true);
+    const screenshot = await captureScreenAsDataUrl();
+    await fetch("/api/support/report",{ method:"POST", credentials:"include", headers:{ "Content-Type":"application/json" },
+      body: JSON.stringify({ title, description: desc, appId, screenshot, reportedBy }) });
+    setBusy(false); setOpen(false); setTitle(""); setDesc("");
+    alert("Thanks — your report has been sent to Support.");
+  }
+  return (<>
+    <button className="auth-btn secondary" onClick={()=>setOpen(true)}>Report an Issue</button>
+    {open && <div className="modal"><div className="card pad" role="dialog" aria-modal="true" style={{maxWidth:560}}>
+      <div className="section-title">Report an Issue</div>
+      <div className="auth-field"><label>Title</label><input className="auth-input" value={title} onChange={e=>setTitle(e.target.value)} placeholder="Short summary"/></div>
+      <div className="auth-field"><label>Description</label><textarea className="auth-input" rows={6} value={desc} onChange={e=>setDesc(e.target.value)} placeholder="What happened? Steps to reproduce."/></div>
+      <div style={{display:"flex",gap:8,justifyContent:"flex-end"}}>
+        <button className="auth-btn" onClick={()=>setOpen(false)} disabled={busy}>Cancel</button>
+        <button className="lm-inbound" onClick={submit} disabled={!title || !desc || busy}>{busy?"Submitting…":"Submit"}</button>
+      </div>
+    </div></div>}
+  </>);
+}
*** End Patch
PATCH
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/pages/ApplicationLayout.tsx
@@
-import React from "react";
+import React from "react";
+import ReportIssueButton from "../components/ReportIssueButton";
@@
-  return (<div>{children}</div>);
+  return (<div>
+    <div style={{display:"flex",justifyContent:"flex-end",marginBottom:12}}>
+      <ReportIssueButton appId={app?.id} reportedBy={user?.email||"client@unknown"} />
+    </div>
+    {children}
+  </div>);
*** End Patch
PATCH
If your client app shell differs, place the ReportIssueButton in the global header or the application stepper header.
CLIENT APP — BLOCK 2: Build
npm run build || npm run dev &
sleep 2
