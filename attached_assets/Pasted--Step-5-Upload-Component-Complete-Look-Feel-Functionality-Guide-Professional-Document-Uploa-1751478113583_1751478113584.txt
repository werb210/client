# Step 5 Upload Component - Complete Look, Feel & Functionality Guide
## Professional Document Upload System with Dynamic Requirements

This guide provides everything needed to reproduce the exact Step 5 upload component including visual design, user experience, and complete functionality that other Replit applications can implement.

---

## ðŸŽ¯ VISUAL DESIGN & USER EXPERIENCE

### Component Overview
- **Clean Card-Based Layout** with 2-column responsive grid
- **Dynamic Status Indicators** showing complete/required states
- **Professional Upload Areas** with drag-and-drop and file selection
- **Real-Time Progress Tracking** with file lists and removal options
- **Smart Document Detection** based on user's loan product selection

### Color Scheme & Visual States
```css
/* Complete State */
.document-complete {
  border: 2px solid #22c55e; /* Green border */
  background: #f0fdf4; /* Light green background */
}

/* Required State */
.document-required {
  border: 2px solid #e5e7eb; /* Gray border */
  background: white;
  hover: #dbeafe; /* Blue hover */
}

/* Upload Area */
.upload-area {
  border: 2px dashed #d1d5db; /* Dashed gray border */
  hover: #9ca3af; /* Darker gray on hover */
  padding: 1rem;
  text-align: center;
  transition: all 0.2s;
}
```

---

## ðŸ“‹ COMPLETE IMPLEMENTATION

### 1. Core TypeScript Interfaces

```typescript
// interfaces/DocumentTypes.ts
interface UploadedFile {
  id: string;
  name: string;
  size: number;
  type: string;
  file: File;
  status: "uploading" | "completed" | "error";
  documentType: string;
  preview?: string;
  uploadProgress?: number;
}

interface DocumentRequirement {
  name: string;
  description: string;
  quantity: number;
}

interface DynamicDocumentRequirementsProps {
  formData: {
    headquarters?: string;
    lookingFor?: string;
    fundingAmount?: string;
    accountsReceivableBalance?: string;
  };
  uploadedFiles: UploadedFile[];
  onFilesUploaded: (files: UploadedFile[]) => void;
  selectedProduct?: string;
  onRequirementsChange?: (allComplete: boolean, totalRequirements: number) => void;
}
```

### 2. Main Upload Component

```typescript
// components/DynamicDocumentRequirements.tsx
import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { CheckCircle, FileText, AlertCircle, RefreshCcw } from 'lucide-react';
import { Button } from '@/components/ui/button';

export function DynamicDocumentRequirements({
  formData,
  uploadedFiles,
  onFilesUploaded,
  selectedProduct,
  onRequirementsChange
}: DynamicDocumentRequirementsProps) {
  
  // Determine document category based on user selection
  const getDocumentCategory = () => {
    if (selectedProduct && selectedProduct.toLowerCase().includes('line of credit')) {
      return 'line_of_credit';
    }
    
    if (formData.lookingFor === 'equipment') {
      return 'equipment_financing';
    } else if (formData.lookingFor === 'capital') {
      return 'term_loan';
    } else if (formData.lookingFor === 'both') {
      return 'line_of_credit';
    } else {
      return 'term_loan';
    }
  };

  const documentCategory = getDocumentCategory();

  // Format category names for display
  const formatCategoryName = (category: string) => {
    const categoryNames = {
      'line_of_credit': 'Business Line of Credit',
      'term_loan': 'Term Loan',
      'equipment_financing': 'Equipment Financing',
      'factoring': 'Invoice Factoring',
      'working_capital': 'Working Capital',
      'purchase_order_financing': 'Purchase Order Financing'
    };
    return categoryNames[category as keyof typeof categoryNames] || category;
  };

  // Fetch required documents from API
  const { data: requiredDocs, isLoading: docsLoading, error: docsError, refetch } = useQuery({
    queryKey: ['/api/loan-products/required-documents', documentCategory, formData.headquarters, formData.fundingAmount],
    queryFn: async () => {
      const params = new URLSearchParams({
        headquarters: formData.headquarters || 'united_states',
        fundingAmount: formData.fundingAmount || '$50000',
        ...(formData.accountsReceivableBalance && { accountsReceivableBalance: formData.accountsReceivableBalance })
      });
      
      const response = await fetch(`/api/loan-products/required-documents/${documentCategory}?${params}`);
      if (!response.ok) throw new Error('Failed to fetch required documents');
      return response.json();
    },
    enabled: !!(documentCategory && formData.headquarters && formData.fundingAmount),
    retry: 1,
  });

  // Process document requirements with fallback
  let documentRequirements = Array.isArray(requiredDocs?.data) ? requiredDocs.data : [];
  
  // Fallback to standard business loan documents if no specific requirements found
  if (documentRequirements.length === 0 && !docsLoading && !docsError) {
    documentRequirements = [
      { name: "Bank Statements", description: "Last 6 months of business bank statements", quantity: 6 },
      { name: "Tax Returns", description: "Last 3 years of business tax returns", quantity: 3 },
      { name: "Financial Statements", description: "Recent profit & loss and balance sheet", quantity: 3 },
      { name: "Business License", description: "Valid business registration or license", quantity: 1 },
      { name: "Articles of Incorporation", description: "Legal business formation documents", quantity: 1 }
    ];
  }

  // Check completion status
  useEffect(() => {
    if (documentRequirements.length > 0) {
      const completedDocs = documentRequirements.filter(doc => {
        const documentFiles = uploadedFiles.filter(f => 
          f.documentType?.toLowerCase().includes(doc.name.toLowerCase().replace(/\s+/g, '_')) ||
          f.name.toLowerCase().includes(doc.name.toLowerCase().split(' ')[0])
        );
        return documentFiles.length >= doc.quantity;
      });
      
      const allComplete = completedDocs.length === documentRequirements.length;
      onRequirementsChange?.(allComplete, documentRequirements.length);
    }
  }, [uploadedFiles, documentRequirements, onRequirementsChange]);

  // Error state
  if (docsError && !requiredDocs) {
    return (
      <div className="text-center py-8">
        <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-gray-900 mb-2">Unable to Load Document Requirements</h3>
        <p className="text-gray-600 mb-4">We're having trouble loading the specific document requirements for your loan type.</p>
        <Button onClick={() => refetch()} variant="outline">
          <RefreshCcw className="w-4 h-4 mr-2" />
          Try Again
        </Button>
      </div>
    );
  }

  // Loading state
  if (docsLoading) {
    return (
      <div className="text-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p className="text-gray-600">Loading document requirements...</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header Section */}
      <div className="bg-blue-50 p-4 rounded-lg">
        <h3 className="text-lg font-semibold text-blue-900 mb-2">
          Required Documents for {formatCategoryName(documentCategory)}
        </h3>
        <p className="text-sm text-blue-800">
          Based on your loan selection: {selectedProduct ? formatCategoryName(selectedProduct) : 'Standard requirements'}
        </p>
        <p className="text-xs text-blue-600 mt-1">
          Showing {documentRequirements.length} required document types
        </p>
      </div>

      {/* Document Requirements Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {documentRequirements.length > 0 ? documentRequirements.map((doc: DocumentRequirement, index: number) => (
          <DocumentUploadCard
            key={index}
            doc={doc}
            uploadedFiles={uploadedFiles}
            onFilesUploaded={onFilesUploaded}
            cardIndex={index}
          />
        )) : (
          <div className="col-span-full text-center py-8">
            <p className="text-gray-500">No document requirements loaded yet.</p>
          </div>
        )}
      </div>
    </div>
  );
}
```

### 3. Individual Document Card Component

```typescript
// components/DocumentUploadCard.tsx
interface DocumentUploadCardProps {
  doc: DocumentRequirement;
  uploadedFiles: UploadedFile[];
  onFilesUploaded: (files: UploadedFile[]) => void;
  cardIndex: number;
}

export function DocumentUploadCard({ 
  doc, 
  uploadedFiles, 
  onFilesUploaded, 
  cardIndex 
}: DocumentUploadCardProps) {
  
  // Filter files for this document type
  const documentFiles = uploadedFiles.filter(f => 
    f.documentType?.toLowerCase().includes(doc.name.toLowerCase().replace(/\s+/g, '_')) ||
    f.name.toLowerCase().includes(doc.name.toLowerCase().split(' ')[0])
  );
  
  const isComplete = documentFiles.length >= doc.quantity;

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files).map(file => ({
        id: Math.random().toString(36).substr(2, 9),
        name: file.name,
        size: file.size,
        type: file.type,
        file,
        status: "completed" as const,
        documentType: doc.name.toLowerCase().replace(/\s+/g, '_')
      }));
      onFilesUploaded([...uploadedFiles, ...newFiles]);
    }
  };

  const handleFileRemove = (fileId: string) => {
    const updatedFiles = uploadedFiles.filter(f => f.id !== fileId);
    onFilesUploaded(updatedFiles);
  };

  return (
    <div className={`bg-white rounded-lg border-2 transition-all duration-200 ${
      isComplete 
        ? 'border-green-200 bg-green-50' 
        : 'border-gray-200 hover:border-blue-200'
    }`}>
      <div className="p-6">
        {/* Card Header */}
        <div className="flex items-start justify-between mb-4">
          <div className="flex-1">
            <div className="flex items-center space-x-3 mb-2">
              <h3 className="text-lg font-semibold text-gray-900">{doc.name}</h3>
              {isComplete && (
                <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center">
                  <CheckCircle className="w-4 h-4 text-green-600" />
                </div>
              )}
            </div>
            <p className="text-sm text-gray-600 mb-3">{doc.description}</p>
            <div className="flex items-center space-x-4">
              <span className="text-sm font-medium text-gray-700">
                Required: {doc.quantity} file{doc.quantity !== 1 ? 's' : ''}
              </span>
              <span className={`text-sm font-medium ${
                isComplete ? 'text-green-600' : 'text-blue-600'
              }`}>
                Uploaded: {documentFiles.length}
              </span>
            </div>
          </div>
          
          {/* Status Badge */}
          <div className="ml-4">
            {isComplete ? (
              <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                Complete
              </span>
            ) : (
              <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                Required
              </span>
            )}
          </div>
        </div>

        {/* Upload Area */}
        <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 transition-colors">
          <input
            type="file"
            multiple
            accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
            onChange={handleFileUpload}
            className="hidden"
            id={`upload-${cardIndex}`}
          />
          <label htmlFor={`upload-${cardIndex}`} className="cursor-pointer">
            <div className="space-y-2">
              <FileText className="w-8 h-8 mx-auto text-gray-400" />
              <div>
                <span className="text-sm font-medium text-blue-600 hover:text-blue-500">Choose files</span>
                <span className="text-sm text-gray-500"> or drag and drop</span>
              </div>
              <p className="text-xs text-gray-500">PDF, DOC, DOCX, JPG, PNG up to 10MB each</p>
            </div>
          </label>
        </div>

        {/* Uploaded Files List */}
        {documentFiles.length > 0 && (
          <div className="mt-4 space-y-2">
            {documentFiles.map((file) => (
              <UploadedFileItem
                key={file.id}
                file={file}
                onRemove={handleFileRemove}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
```

### 4. Uploaded File Item Component

```typescript
// components/UploadedFileItem.tsx
interface UploadedFileItemProps {
  file: UploadedFile;
  onRemove: (fileId: string) => void;
}

export function UploadedFileItem({ file, onRemove }: UploadedFileItemProps) {
  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div className="flex items-center justify-between py-2 px-3 bg-gray-50 rounded border">
      <div className="flex items-center space-x-3">
        <FileText className="w-4 h-4 text-gray-500" />
        <span className="text-sm font-medium text-gray-900">{file.name}</span>
        <span className="text-xs text-gray-500">({formatFileSize(file.size)})</span>
        {file.status === "uploading" && (
          <div className="w-4 h-4">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
          </div>
        )}
        {file.status === "completed" && (
          <CheckCircle className="w-4 h-4 text-green-500" />
        )}
        {file.status === "error" && (
          <AlertCircle className="w-4 h-4 text-red-500" />
        )}
      </div>
      <button
        onClick={() => onRemove(file.id)}
        className="text-red-500 hover:text-red-700 text-sm font-medium transition-colors"
      >
        Remove
      </button>
    </div>
  );
}
```

### 5. Enhanced Drag-and-Drop Upload Area

```typescript
// components/DragDropUploadArea.tsx
import React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';

interface DragDropUploadAreaProps {
  onFilesSelected: (files: File[]) => void;
  accept?: string[];
  maxSize?: number;
  multiple?: boolean;
  documentType: string;
}

export function DragDropUploadArea({
  onFilesSelected,
  accept = ['.pdf', '.doc', '.docx', '.jpg', '.jpeg', '.png'],
  maxSize = 10 * 1024 * 1024, // 10MB
  multiple = true,
  documentType
}: DragDropUploadAreaProps) {
  
  const onDrop = useCallback((acceptedFiles: File[]) => {
    onFilesSelected(acceptedFiles);
  }, [onFilesSelected]);

  const { getRootProps, getInputProps, isDragActive, isDragReject } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'application/msword': ['.doc'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],
      'image/jpeg': ['.jpg', '.jpeg'],
      'image/png': ['.png']
    },
    maxSize,
    multiple
  });

  return (
    <div
      {...getRootProps()}
      className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors cursor-pointer ${
        isDragActive 
          ? 'border-blue-400 bg-blue-50' 
          : isDragReject 
          ? 'border-red-400 bg-red-50'
          : 'border-gray-300 hover:border-gray-400'
      }`}
    >
      <input {...getInputProps()} />
      <div className="space-y-2">
        <FileText className="w-8 h-8 mx-auto text-gray-400" />
        {isDragActive ? (
          <p className="text-sm text-blue-600">Drop the files here...</p>
        ) : isDragReject ? (
          <p className="text-sm text-red-600">Some files are not supported</p>
        ) : (
          <>
            <div>
              <span className="text-sm font-medium text-blue-600 hover:text-blue-500">Choose files</span>
              <span className="text-sm text-gray-500"> or drag and drop</span>
            </div>
            <p className="text-xs text-gray-500">
              {accept.join(', ').toUpperCase()} up to {Math.round(maxSize / (1024 * 1024))}MB each
            </p>
          </>
        )}
      </div>
    </div>
  );
}
```

### 6. Backend API Endpoint

```typescript
// server/routes.ts - Required Documents API
app.get("/api/loan-products/required-documents/:category", async (req, res) => {
  try {
    const category = req.params.category;
    const fundingAmount = req.query.fundingAmount as string;
    const country = req.query.country as string;
    const headquarters = req.query.headquarters as string;
    const accountsReceivableBalance = req.query.accountsReceivableBalance as string;

    console.log(`ðŸ”„ DYNAMIC DOCUMENTS REQUEST for category: ${category}`);
    console.log(`Filters - Country: ${country || headquarters}, Funding: ${fundingAmount}, AR: ${accountsReceivableBalance}`);

    // Get required documents from storage layer
    const requiredDocuments = await storage.getRequiredDocumentsByCategory(
      category,
      fundingAmount,
      country || headquarters,
      undefined, // lookingFor parameter
      accountsReceivableBalance
    );

    console.log(`ðŸ“„ Found ${requiredDocuments.length} document requirements for ${category}`);

    res.json({ 
      success: true, 
      data: requiredDocuments,
      category,
      filters: { fundingAmount, country: country || headquarters, accountsReceivableBalance }
    });
  } catch (error: any) {
    console.error("Error fetching required documents:", error);
    res.status(500).json({ 
      success: false, 
      message: "Failed to fetch required documents",
      error: error.message 
    });
  }
});
```

### 7. Storage Layer Implementation

```typescript
// server/storage.ts
async getRequiredDocumentsByCategory(
  category: string, 
  fundingAmount?: string, 
  country?: string, 
  lookingFor?: string, 
  accountsReceivableBalance?: string
): Promise<Array<{name: string, description: string, quantity: number}>> {
  try {
    // Build WHERE conditions for filtering
    const conditions = [`product_type = $1`];
    const params = [category];
    let paramIndex = 2;

    // Add country filter
    if (country) {
      const countryColumn = country.toLowerCase() === 'canada' ? 'offered_in_canada' : 'offered_in_us';
      conditions.push(`${countryColumn} = $${paramIndex}`);
      params.push(true);
      paramIndex++;
    }

    // Add funding amount filter
    if (fundingAmount) {
      const amount = parseInt(fundingAmount.replace(/[$,]/g, ''));
      conditions.push(`min_loan_amount <= $${paramIndex} AND max_loan_amount >= $${paramIndex}`);
      params.push(amount);
      paramIndex++;
    }

    const whereClause = conditions.join(' AND ');
    
    const query = `
      SELECT DISTINCT 
        UNNEST(string_to_array(required_documents, ',')) as document_name
      FROM loan_products 
      WHERE ${whereClause}
      AND required_documents IS NOT NULL 
      AND required_documents != ''
    `;

    const result = await this.client.query(query, params);
    
    // Process and format document requirements
    const documents = result.rows
      .map(row => row.document_name?.trim())
      .filter(Boolean)
      .filter((doc, index, self) => self.indexOf(doc) === index); // Remove duplicates

    // Convert to required format with descriptions and quantities
    return documents.map(docName => this.formatDocumentRequirement(docName));
    
  } catch (error) {
    console.error('Error fetching required documents:', error);
    return [];
  }
}

private formatDocumentRequirement(docName: string): {name: string, description: string, quantity: number} {
  const documentMappings = {
    'Bank Statements': {
      description: 'Last 6 months of business bank statements',
      quantity: 6
    },
    'Tax Returns': {
      description: 'Last 3 years of business tax returns',
      quantity: 3
    },
    'Financial Statements': {
      description: 'Recent profit & loss and balance sheet',
      quantity: 3
    },
    'Business License': {
      description: 'Valid business registration or license',
      quantity: 1
    },
    'Articles of Incorporation': {
      description: 'Legal business formation documents',
      quantity: 1
    },
    'Equipment List': {
      description: 'Detailed list of equipment to be financed',
      quantity: 1
    },
    'Invoices': {
      description: 'Outstanding customer invoices for factoring',
      quantity: 10
    },
    'Accounts Receivable Aging': {
      description: 'Current accounts receivable aging report',
      quantity: 1
    }
  };

  const mapping = documentMappings[docName as keyof typeof documentMappings];
  return {
    name: docName,
    description: mapping?.description || `Required ${docName.toLowerCase()}`,
    quantity: mapping?.quantity || 1
  };
}
```

### 8. Integration with Form Step

```typescript
// In your main form component (Step 5)
const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);
const [allRequiredDocsComplete, setAllRequiredDocsComplete] = useState(false);
const [totalRequiredDocs, setTotalRequiredDocs] = useState(0);

const handleRequirementsChange = (allComplete: boolean, totalRequirements: number) => {
  setAllRequiredDocsComplete(allComplete);
  setTotalRequiredDocs(totalRequirements);
};

// In your Step 5 render
{currentStep === 4 && (
  <div className="space-y-6">
    <div className="text-center">
      <Upload className="w-16 h-16 mx-auto text-blue-600 mb-4" />
      <h3 className="text-xl font-semibold mb-2">Document Upload</h3>
      <p className="text-gray-600 mb-6">
        Upload the required documents for your business loan application.
      </p>
    </div>

    <DynamicDocumentRequirements
      formData={form.getValues()}
      uploadedFiles={uploadedFiles}
      onFilesUploaded={setUploadedFiles}
      selectedProduct={selectedProduct}
      onRequirementsChange={handleRequirementsChange}
    />

    {/* Continue Button */}
    <div className="flex justify-between pt-6">
      <Button variant="outline" onClick={() => setCurrentStep(3)}>
        Previous
      </Button>
      <Button 
        onClick={() => setCurrentStep(5)}
        disabled={!allRequiredDocsComplete}
      >
        Continue to Terms & Signature
        <ArrowRight className="ml-2 h-4 w-4" />
      </Button>
    </div>
  </div>
)}
```

---

## ðŸŽ¨ RESPONSIVE DESIGN

### Mobile Optimizations
```css
/* Mobile-first responsive grid */
.document-grid {
  @apply grid grid-cols-1 gap-4;
}

@media (min-width: 768px) {
  .document-grid {
    @apply grid-cols-2 gap-6;
  }
}

/* Mobile upload area */
@media (max-width: 640px) {
  .upload-area {
    @apply p-3;
  }
  
  .document-card {
    @apply p-4;
  }
  
  .file-item {
    @apply flex-col space-y-2 space-x-0;
  }
}
```

### Visual States & Animations
```css
/* Status animations */
.status-badge {
  @apply transition-all duration-200;
}

.document-complete {
  @apply animate-pulse;
  animation-duration: 2s;
  animation-iteration-count: 1;
}

/* Hover effects */
.upload-area:hover {
  @apply border-blue-400 bg-blue-50;
}

.file-remove:hover {
  @apply text-red-700 font-semibold;
}
```

---

## ðŸ“Š TESTING CHECKLIST

### Visual Design
- âœ… Test 2-column responsive grid layout
- âœ… Verify complete/required state colors
- âœ… Test hover effects on upload areas
- âœ… Verify status badges display correctly
- âœ… Test mobile responsive design

### Functionality
- âœ… Test dynamic document loading based on loan type
- âœ… Verify file upload with multiple files
- âœ… Test file removal functionality
- âœ… Verify completion tracking
- âœ… Test continue button state management
- âœ… Test API integration with backend

### User Experience
- âœ… Test drag-and-drop file upload
- âœ… Verify loading states during API calls
- âœ… Test error handling for API failures
- âœ… Verify file size and type validation
- âœ… Test progress indicators and feedback

---

## ðŸŽ¯ SUCCESS CRITERIA

- **Professional Visual Design**: Clean card layout with proper status indicators
- **Dynamic Document Requirements**: Real-time loading based on loan product selection
- **Complete File Management**: Upload, display, and removal functionality
- **Progress Tracking**: Real-time completion status with continue button control
- **Mobile Responsive**: Perfect experience on all device sizes
- **Error Handling**: Graceful fallbacks and user feedback
- **API Integration**: Seamless backend communication for document requirements

This system creates a professional, user-friendly document upload experience that adapts to the user's specific loan requirements while maintaining a clean, intuitive interface.

---

## ðŸ“¦ REQUIRED DEPENDENCIES

```bash
# Install required packages
npm install lucide-react @tanstack/react-query react-dropzone
npm install @/components/ui/button @/components/ui/card # Shadcn components
```

The complete implementation provides a production-ready Step 5 upload component that other Replit applications can use to create the same professional document upload experience.