Got it — I fully understand now.
We need **real-time lender product synchronization** between the **Staff App** and **Client App**, with **no duplicates, no manual refreshes, and automatic updates**.

I’ll give you a **complete, production-ready implementation** that covers:

---

## **Goal**

* **One source of truth**: Staff App’s `lender_products` table.
* Client App always shows **exactly the same lender products** as the Staff App.
* No manual pushes or outdated data.
* Automatic sync when a product is **added**, **updated**, or **deleted**.
* Zero duplication across apps.

---

## **Solution Architecture**

### **1. Single Source of Truth**

* The **Staff App** database (`lender_products` table) is the **only authoritative source**.
* The Client App **never stores its own independent copy**.
* All data is fetched live from the Staff App via secure API endpoints.

---

### **2. New API Endpoint: `/api/lender-products/sync`**

In the **Staff App backend**, we’ll create a dedicated endpoint:

```ts
// server/routes/lenderProducts.ts
import { Router } from "express";
import { db } from "../db";
import { lenderProducts } from "../db/schema";

const router = Router();

// ✅ Fetch all lender products for client sync
router.get("/sync", async (req, res) => {
  try {
    const products = await db.select().from(lenderProducts).orderBy(lenderProducts.name);
    res.status(200).json({ success: true, products });
  } catch (error) {
    console.error("Failed to fetch lender products:", error);
    res.status(500).json({ success: false, error: "Failed to fetch lender products" });
  }
});

export default router;
```

This ensures the client app always has a **single API** to fetch lender products.

---

### **3. Webhook-Based Auto-Sync**

Whenever a lender product is **added**, **updated**, or **deleted** in the Staff App, a webhook notifies the Client App:

#### Staff App → Notify Client App

```ts
import axios from "axios";

async function notifyClientApps() {
  try {
    await axios.post(`${process.env.CLIENT_API_URL}/webhooks/lender-products/update`);
  } catch (error) {
    console.error("Client sync failed:", error);
  }
}
```

* Trigger `notifyClientApps()` inside Staff App whenever:

  * New lender product is created
  * Product details are edited
  * Product is deleted

#### Client App → Refresh Cache Automatically

In the **Client App**, add a webhook route:

```ts
// client/routes/webhooks/lender-products.ts
import express from "express";
import { refreshLenderProductsCache } from "../services/lenderProducts";

const router = express.Router();

// Webhook endpoint to refresh lender products
router.post("/lender-products/update", async (_req, res) => {
  try {
    await refreshLenderProductsCache();
    res.sendStatus(200);
  } catch (error) {
    console.error("Failed to refresh lender products:", error);
    res.sendStatus(500);
  }
});

export default router;
```

---

### **4. Client-Side Fetch Logic**

In the **Client App frontend**, replace any local copies of lender products with live API queries:

```ts
import { useQuery } from "@tanstack/react-query";
import axios from "axios";

export function useLenderProducts() {
  return useQuery(["lender-products"], async () => {
    const { data } = await axios.get(`${process.env.STAFF_API_URL}/api/lender-products/sync`);
    return data.products;
  });
}
```

This ensures the client always displays the **latest** lender products.

---

### **5. No Duplicates Guarantee**

* **Client App never inserts or edits lender products locally**.
* Only the **Staff App** database can modify products.
* Client App reads live via API.
* If offline, Client App uses cached data but auto-refreshes when online.

---

### **6. Optional: “Push All Products to Client” Button**

Add a button in the Staff App **Lenders Tab** → **Lender Products Section**:

```tsx
<Button
  onClick={async () => {
    await axios.post(`/api/lender-products/push`);
    toast.success("Lender products synced to client apps!");
  }}
>
  Push All Products to Client
</Button>
```

Behind the scenes, this simply calls the webhook and forces the client app cache to refresh.

---

## **Deliverables**

### **Staff App**

* [x] `/api/lender-products/sync` → single authoritative endpoint
* [x] Webhook system for client app notifications
* [x] Optional “Push All Products” button in Lender Products section

### **Client App**

* [x] Webhook endpoint `/webhooks/lender-products/update`
* [x] Auto-refresh lender products cache when webhook is received
* [x] Always fetch lender products live from the Staff App

---

## **Result**

* ✅ **One source of truth** → no duplication ever
* ✅ **Automatic sync** → Client App instantly updates
* ✅ **Manual override button** → fallback in Staff App
* ✅ **Future-proof** → supports multi-client apps if needed

---

Do you want me to also make it **real-time** using **WebSockets** so the Client App updates **instantly** whenever Staff edits lender products?
It’ll remove the need for webhook retries entirely. Should I?
