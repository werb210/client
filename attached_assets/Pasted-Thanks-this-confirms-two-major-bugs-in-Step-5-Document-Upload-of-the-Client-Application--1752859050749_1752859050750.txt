Thanks — this confirms two major bugs in **Step 5 (Document Upload)** of the **Client Application**.

---

## 🧨 Critical Bugs Identified:

### 1. 🔁 **Bank Statements Showing Twice**

* **Symptom**: Bank Statements category is **duplicated**, showing the same uploaded files twice.
* **Likely Cause**: The `DocumentUploadSection` is being rendered **twice** for the same `document_type` (`bank_statements`) due to:

  * Improper deduplication in `requiredDocuments` array.
  * Or accidental double-mount in component tree.

---

### 2. ❌ **Accounts Receivable Not Uploading**

* **Symptom**: A\_R Aging Summary file appears, but:

  * Upload icon is stuck in red (`x`) status.
  * File never becomes "accepted".
  * Document count remains at `0` or errors silently.

* **Likely Cause**:

  * File is uploaded to the backend, but the client doesn’t mark it `status: success`.
  * Could be due to:

    * File size check failing (unlikely at 31.5 KB).
    * API response malformed (missing `documentId`).
    * Incorrect matching in upload response parsing.

---

## ✅ Replit Action Plan (Client App Only)

### 📌 Fix 1 — Prevent Duplicate Upload Blocks

In `Step5Documents.tsx`:

```tsx
const uniqueDocumentTypes = Array.from(
  new Set(requiredDocuments.map(doc => doc.document_type))
);
```

Replace any `map()` or `.forEach()` rendering that might use a raw list with duplicates.

Then:

```tsx
uniqueDocumentTypes.map((type) => (
  <DocumentUploadSection documentType={type} ... />
))
```

---

### 📌 Fix 2 — Ensure Upload Success Status is Registered

In `DocumentUploadSection.tsx`, find the upload handler:

```tsx
onUploadComplete={(response) => {
  if (response.status === 200 && response.data.documentId) {
    markAsUploaded(documentType, response.data.documentId);
  } else {
    markAsFailed(documentType);
  }
}}
```

Also make sure response parsing is not relying on `response.body.documentId` instead of `response.data.documentId`.

---

### 📌 Fix 3 — Validate A/R Document Handling

Check that `accounts_receivable` is present in the required document config and not being overridden by any fallback label.

```tsx
if (docType === "accounts_receivable") {
  console.log("✅ uploading A/R document:", file.name);
}
```

Confirm it's not being interpreted as `ar_summary` or another legacy alias.

---

## ✅ Replit Testing Instructions

1. Run full application from Step 1 → Step 5.
2. Upload:

   * 6 bank statement PDFs.
   * 1 A/R document (PDF or XLSX).
3. Confirm:

   * No duplicate document sections.
   * No visual mismatch in status.
   * Console shows clean `POST /api/public/documents/...` responses.
4. Continue to Step 6 and confirm documents persist in preview.

---

Would you like me to generate a complete `Step5Documents.tsx` cleanup patch for Replit to apply directly?
