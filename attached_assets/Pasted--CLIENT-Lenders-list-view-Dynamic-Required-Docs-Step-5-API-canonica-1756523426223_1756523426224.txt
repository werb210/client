# ┏━━━━━━━━ CLIENT: Lenders (list/view) + Dynamic Required Docs (Step 5) ━━━━━━━━┓
# • API: canonical /v1/products, /lenders, /required-docs usage (single source)
# • UI: Lenders Directory + Lender Detail (read-only by default)
# • Step 5: fetch required docs with productId + lenderId (server aggregator)
# • Optional internal admin: enable create/edit/delete only if VITE_ADMIN_MUTATION_TOKEN is set
# • NO-DUP: remove any legacy lender services/components
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
set -euo pipefail

echo "== CLIENT ENV =="
echo "VITE_STAFF_API_URL=${VITE_STAFF_API_URL:-https://staff.boreal.financial/api}"
echo "VITE_CLIENT_APP_SHARED_TOKEN set? $([ -n "${VITE_CLIENT_APP_SHARED_TOKEN:-}" ] && echo yes || echo no)"
echo "VITE_ADMIN_MUTATION_TOKEN set? $([ -n "${VITE_ADMIN_MUTATION_TOKEN:-}" ] && echo yes || echo no) (optional)"

BASE="${VITE_STAFF_API_URL:-https://staff.boreal.financial/api}"
mkdir -p src/lib/api src/features/lenders pages scripts reports

# 0) NO-DUP CLEANUP (remove legacy lender files)
rm -f src/services/lenders.ts src/services/lenderService.ts src/api/lenders*.ts 2>/dev/null || true

# 1) API client for lenders (read-only; admin mutations gated by env)
cat > src/lib/api/lenders.ts <<'TS'
export type Lender = {
  id: string; name: string; legal_name?: string|null; slug?: string|null;
  website?: string|null; contact_email?: string|null; contact_phone?: string|null;
  country?: string|null; is_active: boolean;
};

const BASE = (import.meta.env.VITE_STAFF_API_URL || "").replace(/\/+$/,"");
const TOK  = import.meta.env.VITE_CLIENT_APP_SHARED_TOKEN || "";
const ADMIN = import.meta.env.VITE_ADMIN_MUTATION_TOKEN || "";

async function j(path: string, init: RequestInit = {}) {
  const headers: Record<string,string> = { Authorization: `Bearer ${TOK}`, ...(init.headers as any || {}) };
  if (ADMIN && (init.method === "POST" || init.method === "PATCH" || init.method === "DELETE")) {
    headers["X-Admin-Token"] = ADMIN;
    headers["Content-Type"] = headers["Content-Type"] || "application/json";
  }
  const r = await fetch(`${BASE}${path}`, { ...init, headers, cache: "no-store" });
  const ct = r.headers.get("content-type") || "";
  const body = ct.includes("json") ? await r.json() : await r.text();
  if (!r.ok) throw new Error(`${init.method||"GET"} ${path} failed: ${r.status}`);
  return body;
}

export async function listLenders(params?: { q?: string; country?: string; active?: boolean; limit?: number; offset?: number }): Promise<Lender[]> {
  const q = new URLSearchParams();
  if (params?.q) q.set("q", params.q);
  if (params?.country) q.set("country", params.country);
  if (params?.active !== undefined) q.set("active", String(params.active));
  if (params?.limit) q.set("limit", String(params.limit));
  if (params?.offset) q.set("offset", String(params.offset));
  return j(`/lenders?${q.toString()}`);
}

export async function getLender(id: string): Promise<Lender> {
  return j(`/lenders/${encodeURIComponent(id)}`);
}

export async function createLender(data: Partial<Lender> & { id: string; name: string }): Promise<{ ok: true; id: string }> {
  if (!ADMIN) throw new Error("admin_mutation_disabled");
  return j(`/lenders`, { method: "POST", body: JSON.stringify(data) });
}

export async function updateLender(id: string, data: Partial<Lender>): Promise<{ ok: true }> {
  if (!ADMIN) throw new Error("admin_mutation_disabled");
  return j(`/lenders/${encodeURIComponent(id)}`, { method: "PATCH", body: JSON.stringify(data) });
}

export async function deleteLender(id: string): Promise<{ ok: true }> {
  if (!ADMIN) throw new Error("admin_mutation_disabled");
  return j(`/lenders/${encodeURIComponent(id)}`, { method: "DELETE" });
}
TS

# 2) Step 5: ensure we pass lenderId when known (uses previously added fetchRequiredDocs)
cat > src/features/lenders/Step5DocsBridge.ts <<'TS'
import { fetchRequiredDocs } from "../../lib/api/requiredDocs";
export async function getStep5RequiredDocs(productId?: string, lenderId?: string) {
  return fetchRequiredDocs({ productId, lenderId });
}
TS

# 3) Minimal UI hooks/pages (skeletons; plug into your router)
cat > src/features/lenders/useLenders.ts <<'TS'
import { useEffect, useState } from "react";
import { listLenders, type Lender } from "../../lib/api/lenders";
export function useLenders(params?: { q?: string; country?: string; active?: boolean }) {
  const [data,setData]=useState<Lender[]|null>(null); const [err,setErr]=useState<Error|null>(null);
  useEffect(()=>{ let on=true; (async()=>{ try{ const rows=await listLenders(params); if(on) setData(rows); }catch(e:any){ if(on) setErr(e);} })(); return ()=>{on=false}; },[params?.q,params?.country,params?.active]);
  return { data, err, loading: data===null && !err };
}
TS

cat > pages/LendersDirectory.tsx <<'TSX'
import React from "react";
import { useLenders } from "../features/lenders/useLenders";
export default function LendersDirectory() {
  const { data, loading, err } = useLenders({ active:true });
  if (loading) return <div>Loading lenders…</div>;
  if (err) return <div>Error loading lenders.</div>;
  return (
    <div className="p-4">
      <h1 className="text-xl font-semibold mb-3">Lenders</h1>
      <ul className="space-y-2">
        {data?.map(l => (
          <li key={l.id} className="border rounded p-3">
            <div className="font-medium">{l.name}</div>
            <div className="text-sm opacity-80">{l.website || "—"} • {l.country || "—"}</div>
          </li>
        ))}
      </ul>
    </div>
  );
}
TSX

# 4) Smoke (read-only): expect ≥30 lenders once aligned with Staff instance
echo "== CLIENT SMOKE: lenders list =="
curl -sS -H "Authorization: Bearer ${VITE_CLIENT_APP_SHARED_TOKEN:-}" "$BASE/lenders?active=true&limit=5" | jq 'length'
echo "→ Expect ≥ 1 now; ≥ 30 when aligned with Staff data."

# 5) Optional internal admin smokes (only if VITE_ADMIN_MUTATION_TOKEN set)
if [ -n "${VITE_ADMIN_MUTATION_TOKEN:-}" ]; then
  echo "== CLIENT ADMIN SMOKE (optional) =="
  NEW_ID="lend_cli_$(date +%s)"
  curl -sS -X POST "$BASE/lenders" \
    -H "Authorization: Bearer ${VITE_CLIENT_APP_SHARED_TOKEN:-}" \
    -H "X-Admin-Token: ${VITE_ADMIN_MUTATION_TOKEN:-}" \
    -H "Content-Type: application/json" \
    -d "{\"id\":\"$NEW_ID\",\"name\":\"CLI Lender\",\"country\":\"US\"}" | jq '.'

  curl -sS -H "Authorization: Bearer ${VITE_CLIENT_APP_SHARED_TOKEN:-}" "$BASE/lenders/$NEW_ID" | jq '.'

  curl -sS -X PATCH "$BASE/lenders/$NEW_ID" \
    -H "Authorization: Bearer ${VITE_CLIENT_APP_SHARED_TOKEN:-}" \
    -H "X-Admin-Token: ${VITE_ADMIN_MUTATION_TOKEN:-}" \
    -H "Content-Type: application/json" \
    -d '{"website":"https://cli.example"}' | jq '.'

  curl -sS -X DELETE "$BASE/lenders/$NEW_ID" \
    -H "Authorization: Bearer ${VITE_CLIENT_APP_SHARED_TOKEN:-}" \
    -H "X-Admin-Token: ${VITE_ADMIN_MUTATION_TOKEN:-}" | jq '.'
else
  echo "(skip) No VITE_ADMIN_MUTATION_TOKEN — mutations disabled client-side."
fi

echo "✅ CLIENT: Lenders list/view wired; Step 5 pulls dynamic docs via productId+lenderId; no legacy endpoints."
