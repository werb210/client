[CLIENT APP]

Goal: verify duplicates, hard-dedupe in Step 2/Step 5, and give you a one-command report.

1) FILE: client/src/lib/api.ts  (ADD/REPLACE the helpers + call sites)

//// --- DEDUPE HELPERS (add near top, after types) ---
function uniqBy<T>(arr: T[], key: (x: T) => string): T[] {
  const seen = new Set<string>();
  const out: T[] = [];
  for (const x of arr) {
    const k = key(x);
    if (!seen.has(k)) { seen.add(k); out.push(x); }
  }
  return out;
}

function dedupeProducts(products: CanonicalProduct[]): CanonicalProduct[] {
  // 1) strict by id, 2) soft by signature (name+lender+country+category+range)
  const strict = uniqBy(products, p => p.id);
  return uniqBy(strict, p =>
    `${(p.name||"").toLowerCase()}|${(p.lender_name||"").toLowerCase()}|${(p.country||"").toUpperCase()}|${(p.category||"").toLowerCase()}|${p.min_amount}|${p.max_amount}`
  );
}

function normalizeDocs(docs: RequiredDoc[] = []): RequiredDoc[] {
  // collapse strings → objects, lower-case by key/label, keep first required
  const asObjs = docs.map((d, i) =>
    typeof d === "string" ? { key: `doc_${i}`, label: d, required: true } : d
  );
  // guarantee bank_6m present exactly once
  const withMinimum = [{ key: "bank_6m", label: "Last 6 months bank statements", required: true, months: 6 }, ...asObjs];
  return uniqBy(withMinimum, d => `${(d as any).key || ""}|${(d as any).label?.toLowerCase?.()||""}`);
}

//// --- CALL dedupeProducts INSIDE fetchCatalogProducts() BEFORE RETURN ---
  // ...after you map canonical/legacy shapes to CanonicalProduct[] → call:
  const mapped = /* your existing mapped array */;
  return dedupeProducts(mapped);

//// --- CALL normalizeDocs INSIDE listDocuments() JUST BEFORE RETURN ---
  // replace plain return with:
  return normalizeDocs(DOCS_FALLBACK[cat] ?? DOCS_FALLBACK["Working Capital"]);

2) FILE: client/scripts/dup-check.sh  (CREATE – makes a clear report)
#!/usr/bin/env bash
set -euo pipefail
base="http://localhost:5000"

echo "== Source check (catalog→legacy fallback) =="
if curl -fsS "$base/api/catalog/export-products?includeInactive=1" >/dev/null; then
  src="catalog"
  data="$(curl -fsS "$base/api/catalog/export-products?includeInactive=1")"
  items='.products'
else
  src="legacy"
  data="$(curl -fsS "$base/api/lender-products")"
  items='.products'
fi
echo "Using source: $src"

echo "== Duplicate product IDs =="
echo "$data" | jq "$items | group_by(.id) | map(select(length>1) | {id: .[0].id, count: length})"

echo "== Duplicate product signatures (name+lender+country+category+range) =="
echo "$data" | jq -r "$items
  | map({
      sig: ((.name//.productName|tostring|ascii_downcase)
          + \"|\" + (.lender_name//.lenderName|tostring|ascii_downcase)
          + \"|\" + ((.country//.countryOffered|tostring|ascii_upcase))
          + \"|\" + ((.category//.productCategory|tostring|ascii_downcase))
          + \"|\" + ((.min_amount//.minimumLendingAmount|tostring))
          + \"|\" + ((.max_amount//.maximumLendingAmount|tostring))),
      id
    })
  | group_by(.sig)
  | map(select(length>1) | {sig: .[0].sig, ids: map(.id)})
"

echo "== Step 5 docs (normalized) =="
curl -fsS -X POST "$base/api/required-docs" -H 'Content-Type: application/json' \
  -d '{"category":"Working Capital","country":"US","amount":50000}' \
  | jq '.documents? // "staff-501-fallback"'
echo "Minimum doc enforced (client): Last 6 months bank statements"

3) RUN IT
chmod +x client/scripts/dup-check.sh
./client/scripts/dup-check.sh

Expected right now: no duplicate IDs; minimal or zero signature dups; Step-5 shows/guarantees “Last 6 months bank statements”.
