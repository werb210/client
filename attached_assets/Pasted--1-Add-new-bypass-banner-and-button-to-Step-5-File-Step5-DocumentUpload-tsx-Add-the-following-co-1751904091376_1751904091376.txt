âœ… 1. Add new bypass banner and button to Step 5
File: Step5_DocumentUpload.tsx

Add the following component above the required documents list:

tsx
Copy
Edit
<ProceedBypassBanner onBypass={handleBypass} />
Implement the handleBypass function:

tsx
Copy
Edit
const handleBypass = async () => {
  dispatch({ type: "UPDATE_FORM_DATA", payload: { bypassedDocuments: true } });

  await api.post(`/api/applications/${state.applicationId}/nudge-documents`, {
    bypassed: true,
  });

  navigate("/step-6-signature");
};
Import the banner component:

tsx
Copy
Edit
import { ProceedBypassBanner } from "@/components/ProceedBypassBanner";
âœ… 2. Create the ProceedBypassBanner component
File: components/ProceedBypassBanner.tsx

tsx
Copy
Edit
export const ProceedBypassBanner = ({ onBypass }: { onBypass: () => void }) => (
  <div className="mb-6 rounded-xl border border-orange-300 bg-orange-50 p-6">
    <p className="mb-4 text-sm text-orange-900">
      If you do not have the required documents ready at this time you can
      proceed, but understand this will greatly delay your application as it
      will not be sent to the Lender Partners until all have been received.
    </p>
    <button
      type="button"
      onClick={onBypass}
      className="inline-flex items-center rounded-md border border-gray-400 px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100"
    >
      Proceed without Required Documents
    </button>
  </div>
);
âœ… 3. Create new landing page: /upload-documents/:id
File: routes/LateUpload.tsx

tsx
Copy
Edit
export default function LateUpload() {
  const { id } = useParams(); // application ID
  const [rules, setRules] = useState<DocumentRule[]>([]);
  const [files, setFiles] = useState<UploadedFile[]>([]);
  const navigate = useNavigate();

  useEffect(() => {
    api.get(`/api/public/applications/${id}/required-docs`).then(r => setRules(r.data.rules));
  }, [id]);

  const handleUploadComplete = async (newFiles: UploadedFile[]) => {
    await api.post(`/api/public/upload/${id}`, newFiles);
    navigate("/upload-complete");
  };

  return (
    <DocumentUploadUI
      rules={rules}
      existingFiles={files}
      onComplete={handleUploadComplete}
    />
  );
}
âœ… 4. Create confirmation page: /upload-complete
File: routes/UploadComplete.tsx

tsx
Copy
Edit
export default () => (
  <div className="mx-auto mt-24 max-w-md text-center">
    <h1 className="mb-6 text-2xl font-semibold text-gray-800">
      Thank you for the required documents.
    </h1>
    <p className="text-gray-600">
      We will review and complete your application package shortly.
    </p>
  </div>
);
âœ… 5. Update React Router
File: App.tsx or wherever routes are declared

tsx
Copy
Edit
<Route path="/upload-documents/:id" element={<LateUpload />} />
<Route path="/upload-complete" element={<UploadComplete />} />
âœ… 6. Add warning banner if user bypassed documents
File: MainLayout.tsx

tsx
Copy
Edit
{state.bypassedDocuments && state.uploadedDocuments.length === 0 && (
  <Link
    to={`/upload-documents/${state.applicationId}`}
    className="block bg-yellow-50 p-3 text-center text-sm text-yellow-800"
  >
    ðŸ“‘ Required documents pending â€“ click here to upload
  </Link>
)}
âœ… 7. Update shared schema
File: shared/schema.ts

ts
Copy
Edit
export interface ApplicationForm {
  // ...
  uploadedDocuments: UploadedFile[];
  bypassedDocuments?: boolean;
}