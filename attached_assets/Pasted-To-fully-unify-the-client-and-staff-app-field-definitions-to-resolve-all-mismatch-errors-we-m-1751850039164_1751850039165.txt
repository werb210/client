To fully unify the **client and staff app field definitions** (to resolve all mismatch errors), we must **align the application form schema**, **the database**, and **the API DTOs**. Here's how to proceed:

---

## ✅ Phase 1: Field Schema Unification

### 🔁 Step 1: Audit All Sources of Field Definitions

| Source                          | What to check                                 |
| ------------------------------- | --------------------------------------------- |
| `client/src/types/Form.ts`      | Check client-side form field types            |
| `staff/src/db/schema.ts`        | Check Drizzle schema for `applications` table |
| `staff/src/api/applications.ts` | Check API endpoints for expected DTOs         |
| `staff/src/lib/validators.ts`   | Zod schema or custom validators, if any       |

Ensure field names, types, and casing match **exactly** (e.g., `businessName` vs `Business Name`).

---

### 🔄 Step 2: Define Single Source of Truth (SOT)

* Create a shared field definition (e.g., `shared/src/schema/applicationFields.ts`) with:

```ts
export interface ApplicationFields {
  businessName: string;
  businessAddress: string;
  useOfFunds: string;
  // ... all final agreed fields
}
```

Then import this into both client and staff apps where needed (`Form`, API validators, DB schema).

---

## ✅ Phase 2: Unify API Contracts

### 📤 Step 3: Align the Submit Payload

Ensure `client` submits application data in the correct shape:

```ts
POST /api/applications
{
  businessName: "ABC Inc",
  useOfFunds: "Working capital",
  ...
}
```

**Action**:

* Update the client-side API submission (`submitApplication.ts`)
* Use `fetch("/api/applications", { method: 'POST', body: JSON.stringify(fields) })`

### 📥 Step 4: Validate in Staff

Ensure `staff` API uses either:

* Zod validator
* Manual validation + fallback sanitization
* Matches Drizzle field types

Respond with clear 400 errors on missing/malformed fields for debugging.

---

## ✅ Phase 3: Test All APIs + Secrets

### 🧪 Step 5: Full API Smoke Test

#### Application API

* [x] `POST /api/applications` → Create application ✅
* [x] `GET /api/applications/:id` → Fetch data ✅

#### SignNow API

* [x] `POST /api/sign` → Triggers template creation ✅
* [x] Webhook → Simulate callback with signed data ✅

#### Document Upload API

* [x] `POST /api/applications/:id/documents` → Upload test file ✅
* [x] `GET /api/applications/:id/documents` → View uploaded files ✅

#### Lender APIs

* [x] `GET /api/lenders` → Load dropdown ✅
* [x] `POST /api/lenders/:id/credentials` → Save username/password ✅

---

### 🔐 Step 6: Secrets Validation

On both apps (`client` and `staff`), check `.env` or Replit Secrets:

| Secret          | Purpose                  | Test               |
| --------------- | ------------------------ | ------------------ |
| `JWT_SECRET`    | Auth JWT signing         | ✅ test token login |
| `SIGNNOW_KEY`   | SignNow API access       | ✅ create envelope  |
| `STAFF_API_URL` | Used by client for proxy | ✅ test fetch       |
| `DATABASE_URL`  | Drizzle ORM connection   | ✅ run DB query     |

On Replit:

1. Go to Secrets
2. Confirm all keys present and correct casing
3. Remove any legacy or duplicate variables

---

## ✅ Final Deliverable Instructions for Replit

Please apply the following exactly:

---

### 🔁 Restore Unified Application Schema

1. Remove all unused or legacy application field structures.
2. Replace with shared structure in `shared/schema/applicationFields.ts`.
3. Ensure both the client form and API submit call use that structure.

---

### ✅ Enforce Schema Contract in API

1. Apply strict Zod (or other) validation in the `/api/applications` POST route.
2. Ensure the shape matches the client form payload exactly.
3. Return `400 Bad Request` with details if mismatched.

---

### 🧪 Run Full Smoke Test

1. Test all endpoints (submit, sign, document upload).
2. Test real submission from the client form.
3. Check logs for any CORS, missing fields, or shape mismatch.

---

Would you like me to generate the unified `ApplicationFields` interface and Zod schema to insert now?
