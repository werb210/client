Here is the **complete E2E test for the Client Application** using real documents to validate the full application submission, document upload, and S3 integration:

---

## ‚úÖ CLIENT APPLICATION E2E TEST ‚Äì REAL DOCUMENTS

### üîß Requirements

* All 6 **real bank statement PDFs** must be accessible in the `./attached_assets/` folder:

  * `November 2024.pdf`
  * `December 2024.pdf`
  * `January 2025.pdf`
  * `February 2025.pdf`
  * `March 2025.pdf`
  * `April 2025.pdf`
* Client app must point to the **staff API** at `http://localhost:5000`

---

### üß™ Step 1: Application Creation (POST /api/public/applications)

```bash
node -e "
  const fetch = require('node-fetch');
  const { randomUUID } = require('crypto');
  const applicationId = randomUUID();

  console.log('üÜî Generated Application ID:', applicationId);

  fetch('http://localhost:5000/api/public/applications', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer test-token'
    },
    body: JSON.stringify({
      applicationId,
      form_data: {
        step1: {
          fundingAmount: 100000,
          requestedAmount: 100000,
          productCategory: 'Equipment Financing',
          fundsPurpose: 'Expansion'
        },
        step3: {
          businessType: 'Corporation',
          operatingName: 'A10 Recovery Test',
          businessPhone: '+1-555-555-1234',
          businessCity: 'Toronto',
          businessState: 'ON'
        },
        step4: {
          applicantFirstName: 'Todd',
          applicantLastName: 'Werb',
          applicantEmail: 'a10test@boreal.financial',
          applicantTitle: 'CEO'
        }
      }
    })
  }).then(res => {
    console.log('üìä Application POST response:', res.status);
    return res.text();
  }).then(console.log).catch(console.error);
"
```

---

### üì§ Step 2: Upload Real Bank Statement Documents (POST /api/public/upload/\:applicationId)

```bash
node -e "
  const fs = require('fs');
  const FormData = require('form-data');
  const fetch = require('node-fetch');

  const applicationId = 'PUT_APPLICATION_ID_HERE';
  const documents = [
    'November 2024.pdf',
    'December 2024.pdf',
    'January 2025.pdf',
    'February 2025.pdf',
    'March 2025.pdf',
    'April 2025.pdf'
  ];

  (async () => {
    for (const filename of documents) {
      const path = \`./attached_assets/\${filename}\`;
      if (!fs.existsSync(path)) {
        console.error('‚ùå File not found:', path);
        continue;
      }

      const file = fs.readFileSync(path);
      const form = new FormData();
      form.append('document', file, {
        filename,
        contentType: 'application/pdf'
      });
      form.append('documentType', 'bank_statements');

      const res = await fetch(\`http://localhost:5000/api/public/upload/\${applicationId}\`, {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer test-token'
        },
        body: form
      });

      console.log(\`üìÑ Uploading \${filename} ‚Äì Response:\`, res.status);
      const text = await res.text();
      console.log(text);
    }
  })();
"
```

> üîÅ Replace `PUT_APPLICATION_ID_HERE` with the actual UUID from Step 1 output.

---

### üèÅ Step 3: Finalize the Application (PATCH /api/public/applications/\:id/finalize)

```bash
curl -X PATCH http://localhost:5000/api/public/applications/PUT_APPLICATION_ID_HERE/finalize \
  -H "Authorization: Bearer test-token" \
  -H "Content-Type: application/json"
```

---

### ‚úÖ Final Output Expectations

* Staff portal shows:

  * Application card with populated fields.
  * **All 6 real bank statements** listed in the **Documents tab**.
  * S3 links (pre-signed or accessible) valid and downloadable.
* Application status: `submitted`.

---

### üîí Data Verification (Optional SQL)

```sql
SELECT * FROM documents WHERE application_id = 'PUT_APPLICATION_ID_HERE';
SELECT * FROM applications WHERE id = 'PUT_APPLICATION_ID_HERE';
```

---

Would you like me to trigger this now using your real files in Replit?
