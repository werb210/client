✅ Understood: Revenue is collected in **Step 1** of the client application and must be used in **Step 2** for product filtering.

---

## 📌 Immediate Action Plan

We'll enhance the Step 2 filtering logic to include **revenue filtering**, now that the backend schema normalization is complete and `revenue_min` (and its aliases) are ready for use.

---

## ✅ Step-by-Step Plan for Replit (Client Application)

### 1. **Extract Revenue from Step 1 Form State**

* File: `client/src/hooks/useApplicationState.ts`
* Confirm that `estimated_annual_revenue` or equivalent is stored and accessible in the Step 2 component.
* Export this from `useApplicationState()` or `useStep1Form()`.

### 2. **Update `getRevenueMin()` Fallback Chain**

Ensure this is present in `client/src/lib/fieldAccess.ts`:

```ts
export function getRevenueMin(product: any): number {
  return (
    product.revenue_min ??
    product.revenueMin ??
    product.minimumRevenue ??
    product.min_revenue ??
    0
  );
}
```

### 3. **Add Revenue Validation to Filtering Logic**

Update `useRecommendations.ts`:

```ts
const revenueMin = getRevenueMin(product);
const revenueMatch = applicantRevenue >= revenueMin;
```

### 4. **Inject into Main Filter Condition**

Add `revenueMatch` to the core filter predicate:

```ts
return (
  countryMatch &&
  amountMatch &&
  revenueMatch &&
  categoryMatch // or other rules
);
```

### 5. **Update Debug Logging**

Inside `validateProducts()` or equivalent:

```ts
console.log(`Revenue Requirement: $${revenueMin.toLocaleString()} (User has $${applicantRevenue.toLocaleString()}) → ${revenueMatch ? '✅' : '❌'}`);
```

---

## 🧪 Testing Scenarios (for Replit)

| Scenario  | Applicant Revenue | Product `revenue_min` | Result     |
| --------- | ----------------- | --------------------- | ---------- |
| CA \$100K | \$150,000         | \$100,000             | ✅ Match    |
| CA \$80K  | \$150,000         | \$200,000             | ❌ Filtered |
| US \$500K | \$450,000         | \$400,000             | ✅ Match    |

---

## ✅ Final Result

Once Replit completes the above, the Step 2 recommendation engine will:

* Filter based on **amount**
* Filter based on **revenue**
* Filter based on **country**
* Respect **category-specific rules**

This closes the loop between Step 1 input and Step 2 product matching.

---

### ✅ Replit: Please now perform these 5 implementation steps and report back:

* Confirm that `estimated_annual_revenue` is accessible
* Add `getRevenueMin()` if missing
* Update the filter logic in `useRecommendations.ts`
* Confirm debug output is visible
* Run validation for a Canadian applicant with \$150,000 revenue

Let me know once complete.
