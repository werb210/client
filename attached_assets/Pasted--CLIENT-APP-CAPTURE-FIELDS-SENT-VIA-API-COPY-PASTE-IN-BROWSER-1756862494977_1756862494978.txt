// ==============================
// CLIENT APP â€” CAPTURE FIELDS SENT VIA API (COPY/PASTE IN BROWSER DEVTOOLS CONSOLE)
// Purpose: capture EXACT JSON your client app sends on submission, and the files posted on /v1/applications/:id/docs
// Output: stores to window.__capture and copies JSON to clipboard on submit
// Steps:
// 1) Open the client app in the browser, go to Step 7 (Submit).
// 2) Open DevTools Console, paste this whole block, press Enter.
// 3) Submit the application. After it finishes, run:
//      copy(JSON.stringify(__capture, null, 2))
//    then paste the clipboard into a file named client_payload.json for the STAFF block to compare.
// ==============================
(() => {
  window.__capture = { appPayload: null, files: [] };

  const origFetch = window.fetch;
  window.fetch = async function(input, init = {}) {
    const url = typeof input === 'string' ? input : input.url;
    const method = (init && init.method) || (typeof input !== 'string' ? input.method : 'GET') || 'GET';

    // Capture main submission payload
    if (url.includes('/v1/applications') && method.toUpperCase() === 'POST' && !/\/v1\/applications\/[^/]+\/docs/.test(url)) {
      const req = new Request(input, init);
      let bodyText = '';
      try {
        bodyText = init && init.body ? init.body : await req.clone().text();
      } catch {}
      try { window.__capture.appPayload = JSON.parse(bodyText); }
      catch { window.__capture.appPayload = { raw: bodyText }; }
      console.log('ðŸ“¦ Captured client submission payload:', window.__capture.appPayload);
      try { copy(JSON.stringify(window.__capture.appPayload, null, 2)); console.log('âœ… Payload copied to clipboard'); } catch {}
    }

    // Capture docs upload files (best effort)
    if (url.match(/\/v1\/applications\/[^/]+\/docs/) && method.toUpperCase() === 'POST') {
      if (init && init.body instanceof FormData) {
        const files = [];
        for (const [k, v] of init.body.entries()) {
          if (v && typeof v === 'object' && 'name' in v && 'size' in v) {
            files.push({ field: k, name: v.name, size: v.size, type: v.type || '' });
          }
        }
        if (files.length) {
          window.__capture.files.push(...files);
          console.log('ðŸ“„ Captured document upload files:', files);
        }
      }
    }

    return origFetch.apply(this, arguments);
  };

  // Fallback: track FormData.append to catch files even if Request body is opaque
  const origAppend = FormData.prototype.append;
  FormData.prototype.append = function(name, value, filename) {
    if (value && typeof value === 'object' && 'name' in value && 'size' in value) {
      (window.__capture.files ||= []).push({ field: name, name: value.name, size: value.size, type: value.type || '', filename: filename || value.name });
    }
    return origAppend.apply(this, arguments);
  };

  console.log('âœ… Interceptors installed. Submit now, then run: copy(JSON.stringify(__capture, null, 2))');
})();
