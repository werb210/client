Here‚Äôs a full diagnostic instruction set **you can give Replit** to **generate a comprehensive analysis report for the *Client Application*** ‚Äî **without making any changes**, just a read-only audit.

---

# üìã Replit Diagnostic Instructions: Client Application Health Report (Read-Only)

**‚ùóÔ∏è DO NOT PERFORM ANY MODIFICATIONS OR CODE FIXES. ONLY WRITE A REPORT.**

---

## üéØ Objective

Produce a detailed audit of the **Client application** to identify:

* üîç Runtime errors or console warnings
* üîß Broken components or page-level crashes
* üßº Unused components, files, or API hooks (orphaned code)
* üì° Missing or failing API endpoints
* üö´ Dead routes or broken navigation
* üìÅ Redundant imports or dependency bloat
* ‚öôÔ∏è Configuration mismatches (e.g., CORS, token handling, public URLs)
* üîê Misaligned or unused authentication/session logic
* üìä Linting & TypeScript errors/warnings

---

## üõ†Ô∏è Required Analysis Sections

Replit must produce a full diagnostic report broken down into the following categories:

---

### 1. ‚úÖ **Runtime Health Check**

* Audit the console output during a full client session
* List all:

  * JavaScript errors
  * React warnings (e.g., controlled/uncontrolled components)
  * 404/500s from API calls

*Include timestamped logs and route context.*

---

### 2. üß± **Component and Route Map**

* List all components and pages/routes in the app
* Identify:

  * Components that are imported but never used
  * Pages that are defined in routing config but not linked to
  * Pages/components that are **linked but fail to render**

---

### 3. üîÅ **API Hook and Endpoint Check**

* List all custom hooks (e.g., `useLenderProducts`, `useSubmitApplication`, etc.)
* For each:

  * Show associated endpoint (e.g., `/api/public/applications`)
  * Status: ‚úÖ Success, ‚ùå Failing, ‚ö†Ô∏è Missing implementation
  * Method used (GET, POST, etc.)
  * Whether endpoint is reachable or returns error

---

### 4. üóëÔ∏è **Unused Code & Dependencies**

* Identify:

  * Files/components not imported anywhere
  * API functions or hooks that are defined but never called
  * npm packages that are installed but not used (`package.json`)
  * Duplicated components or stylesheets

---

### 5. üß™ **Linting and TypeScript Warnings**

* Run full `tsc` and ESLint check
* Report:

  * All TS errors or warnings
  * Unused imports/vars
  * Type mismatches or `any`-typed props
  * Failed builds due to type safety

---

### 6. üîê **Authentication Logic Audit**

* Verify that:

  * All login/session/token logic is clearly defined and used
  * No broken cookie or localStorage access attempts
  * Only appropriate routes check authentication (client app has limited auth)

---

### 7. üåê **Network & API Consistency**

* Check for:

  * Hardcoded URLs that should use `.env` or config files
  * Incorrect API base paths
  * CORS issues between client ‚Üî staff

---

### 8. üß≠ **Navigation & Route Health**

* Validate that:

  * Every route is reachable from UI
  * Broken links or navigation errors are reported
  * Redirections behave correctly (e.g., from step 5 to step 6)

---

### 9. üìÑ **Form Submission & Data Flow**

* Verify:

  * All steps from 1‚Äì7 pass form data and persist it
  * `completedSteps` array is built properly
  * `termsAccepted` and `privacyAccepted` fields are set and sent

---

### 10. üìà **Performance Footprint**

* Report:

  * Bundle size estimate
  * Large third-party libs (>500kB)
  * Initial render time
  * Total API calls made on load

---

## ‚ö†Ô∏è Final Instructions for Replit

* **Do not alter code, routes, configs, or endpoints.**
* **Do not delete or clean anything.**
* **Only produce a clean Markdown report with detailed bullet points.**

---

## üì§ Output Format

Please generate a single Markdown `.md` report named:

```
client-diagnostic-report.md
```

And include:

* ‚úÖ Summary of what passed
* ‚ùå List of failures and suggested fixes
* ‚ö†Ô∏è List of warnings or potential improvements

---

Once the report is ready, you can paste it here and I‚Äôll review and tell you what to do next. Let me know if you'd like me to draft a parallel audit checklist for the **Staff app** as well.
