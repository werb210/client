# ┏ CLIENT (PROD): align to Staff snapshot, enforce one system, no legacy refs ━━━┓
# What this does:
# 1) Consumes Staff’s EXPECTED_* and enforces token FP match
# 2) Switches to STRICT mode automatically once Staff publishes headers+44 products
# 3) Verifies ONLY canonical endpoints are used (/v1/products, /required-docs, /lenders)
# 4) Deletes any legacy references (files/routes) so there’s no duplication
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
set -euo pipefail

echo "== CLIENT ENV =="
echo "VITE_STAFF_API_URL=${VITE_STAFF_API_URL:-https://staff.boreal.financial/api}"
echo "VITE_CLIENT_APP_SHARED_TOKEN set? $([ -n "${VITE_CLIENT_APP_SHARED_TOKEN:-}" ] && echo yes || echo no)"
BASE="${VITE_STAFF_API_URL:-https://staff.boreal.financial/api}"
mkdir -p scripts reports

# 1) Paste EXACT values from Staff (from reports/EXPECTED_FOR_CLIENT.env)
#    If Staff is not deployed yet, EXPECTED_DB_HOST may be empty and EXPECTED_PRODUCTS=0.
export EXPECTED_DB_HOST=""
export EXPECTED_TOKEN_FP="0944508707a9"
export EXPECTED_PRODUCTS="0"
export EXPECTED_LENDERS="30"
export EXPECTED_MIN_REQUIRED_DOCS="3"

# 2) NO LEGACY ENDPOINTS — hard fail if any references exist
echo "== LEGACY ENDPOINT SCAN =="
! grep -R --line-number -E '/lender-products|/api/v1/lender-products|/products\\b(?!.*v1)|lenderproducts' client/src || \
  (echo "❌ Found legacy endpoints in client code. Remove them and use ONLY: /v1/products, /lenders, /required-docs"; exit 2)

# 3) Single alignment script (NO DUPES) — TOKEN_ONLY until Staff publishes headers+data
rm -f scripts/alignment.mjs scripts/check_alignment.mjs 2>/dev/null || true
cat > scripts/alignment.mjs <<'JS'
import crypto from "crypto";
const BASE=(process.env.VITE_STAFF_API_URL||"https://staff.boreal.financial/api").replace(/\/+$/,'');
const TOK =process.env.VITE_CLIENT_APP_SHARED_TOKEN||"";
const EXP_DB   = process.env.EXPECTED_DB_HOST||"";
const EXP_FP   = process.env.EXPECTED_TOKEN_FP||"";
const EXP_PROD = Number(process.env.EXPECTED_PRODUCTS||"0");
const EXP_LEND = Number(process.env.EXPECTED_LENDERS||"0");
const EXP_REQ  = Number(process.env.EXPECTED_MIN_REQUIRED_DOCS||"0");
const fp = s => crypto.createHash("sha256").update(s).digest("hex").slice(0,12);
const TOKEN_ONLY = (EXP_DB==="" || EXP_PROD===0);

async function j(p){const u=`${BASE}${p}${p.includes("?")?"&":"?"}t=${Date.now()}`;const r=await fetch(u,{headers:{Authorization:`Bearer ${TOK}`}});const h=Object.fromEntries([...r.headers.entries()].map(([k,v])=>[k.toLowerCase(),v]));const ct=r.headers.get("content-type")||"";let b=null;try{b=ct.includes("json")?await r.json():await r.text();}catch{};return {u,status:r.status,headers:h,body:b};}

(async()=>{
  const myFp = fp(TOK);
  const prods = await j("/v1/products");
  const lends = await j("/lenders?active=true&limit=5");
  const docs  = await j("/required-docs");
  const prodCount = Array.isArray(prods.body)? prods.body.length : null;
  const lendPeek  = Array.isArray(lends.body)? lends.body.length : null;
  const hdrDb     = prods.headers["x-db-host"]||null;
  const out = {
    mode: TOKEN_ONLY ? "TOKEN_ONLY" : "STRICT",
    base: BASE,
    my_token_fp: myFp, expected_token_fp: EXP_FP, token_fp_match: myFp===EXP_FP,
    x_db_host: hdrDb, expected_db_host: EXP_DB, db_host_match: hdrDb===EXP_DB,
    products_status: prods.status, products_count: prodCount, expected_products: EXP_PROD,
    lenders_status: lends.status, lenders_peek_count: lendPeek, expected_lenders_min: Math.min(EXP_LEND,5),
    required_docs_status: docs.status, required_docs_count: Array.isArray(docs.body)? docs.body.length : null, expected_min_required_docs: EXP_REQ
  };
  console.log(JSON.stringify(out,null,2));

  if (myFp!==EXP_FP) process.exit(10); // always enforce token

  if (!TOKEN_ONLY) {
    if (prods.status!==200 || !hdrDb || hdrDb!==EXP_DB) process.exit(20);
    if (!(typeof prodCount==="number" && prodCount>=EXP_PROD)) process.exit(30);
    if (!(lends.status===200 && typeof lendPeek==="number" && lendPeek>=1)) process.exit(31);
    if (!(docs.status===200 && (out.required_docs_count??0) >= EXP_REQ)) process.exit(40);
  }
})();
JS

set +e
node scripts/alignment.mjs | tee reports/client_alignment.json
rc=$?
set -e

if [ $rc -ne 0 ]; then
  echo ""
  case $rc in
    10) echo "❌ TOKEN mismatch → set VITE_CLIENT_APP_SHARED_TOKEN to Staff’s CLIENT_SHARED_BEARER so FP=${EXPECTED_TOKEN_FP}."; exit 2;;
    20) echo "❌ INSTANCE/header mismatch → will resolve after Staff deploys & publishes DB host; clear SW/CDN caches if stale."; exit 2;;
    30) echo "❌ DATA mismatch (products) → Staff PROD not synced to populated DB or old build."; exit 2;;
    31) echo "❌ LENDERS peek < 1 → expect ~${EXPECTED_LENDERS}; re-check after Staff deploy."; exit 2;;
    40) echo "❌ /required-docs < ${EXPECTED_MIN_REQUIRED_DOCS} or 404 → Staff route not deployed; re-check after deploy."; exit 2;;
    *)  echo "❌ Alignment failed. Inspect reports/client_alignment.json"; exit 2;;
  esac
fi

echo "✅ CLIENT alignment ok (mode shown above)."
echo "   TOKEN_ONLY = waiting on Staff deploy; STRICT = full header+count validation active."
