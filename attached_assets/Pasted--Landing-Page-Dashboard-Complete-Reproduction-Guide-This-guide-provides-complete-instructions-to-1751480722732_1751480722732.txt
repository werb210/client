# Landing Page & Dashboard Complete Reproduction Guide

This guide provides complete instructions to reproduce the exact Boreal Financial landing page experience in any Replit application, including all features, styling, endpoints, and authentication.

## Overview

The landing page serves as the public-facing entry point for the business loan application platform, featuring:
- Professional branding with Boreal Financial color scheme
- Authentication-aware navigation
- Feature highlights and benefits section
- Call-to-action buttons that route to application process
- Responsive design with professional gradients and styling

## Dependencies Installation

```bash
# Core dependencies
npm install react wouter @tanstack/react-query
npm install lucide-react react-icons
npm install tailwindcss @tailwindcss/typography postcss autoprefixer
npm install @radix-ui/react-slot class-variance-authority clsx tailwind-merge

# Backend dependencies
npm install express cors express-session
npm install @neondatabase/serverless drizzle-orm
npm install @types/express @types/express-session
```

## Step 1: CSS Variables & Styling (client/src/index.css)

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: 210 20% 98%; /* #F7F9FC */
  --foreground: 210 40% 15%; /* #1E2A3A */
  --primary: 210 100% 25%; /* #003D7A - Boreal Financial Navy */
  --primary-foreground: 0 0% 100%;
  --accent: 28 100% 52%; /* #FF8C00 - Professional Orange Accent */
  --accent-foreground: 0 0% 100%;
  
  /* Custom Boreal Financial colors */
  --cbf-navy: 210 100% 25%; /* #003D7A */
  --cbf-navy-light: 210 85% 35%; /* #1A5490 */
  --cbf-navy-dark: 210 100% 20%; /* #002F5F */
  --cbf-orange: 28 100% 52%; /* #FF8C00 */
  --cbf-orange-light: 28 100% 60%; /* #FFA31A */
  --cbf-gray: 210 15% 45%; /* #64748B */
}
```

## Step 2: Authentication Hook (client/src/hooks/useAuth.ts)

```typescript
import { useQuery } from "@tanstack/react-query";
import { User } from "@shared/schema";

export function useAuth() {
  const { data: user, isLoading, error, refetch } = useQuery<User | null>({
    queryKey: ["/api/auth/user"],
    queryFn: async () => {
      try {
        const response = await fetch("/api/auth/user", {
          method: "GET",
          credentials: "include",
          headers: { "Content-Type": "application/json" }
        });
        
        if (response.status === 401) return null;
        if (!response.ok) return null;
        
        return await response.json();
      } catch (error) {
        return null;
      }
    },
    retry: false,
    staleTime: 0,
    refetchOnWindowFocus: true,
  });

  return {
    user: user ?? null,
    isLoading,
    error,
    isAuthenticated: !!user,
    hasCompletedApplication: user?.hasCompletedApplication || false,
    refetch,
  };
}
```

## Step 3: Landing Page Component (client/src/pages/landing.tsx)

```tsx
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { CheckCircle, FileText, DollarSign, Shield, ArrowRight, Lock, LogOut } from "lucide-react";
import { useState } from "react";
import { useAuth } from "@/hooks/useAuth";

export default function Landing() {
  const [isLoading, setIsLoading] = useState(false);
  const { isAuthenticated } = useAuth();

  const handleLogin = () => {
    setIsLoading(true);
    window.location.href = '/login';
  };

  const handleLogout = () => {
    fetch('/api/auth/logout', { method: 'POST', credentials: 'include' })
      .then(() => window.location.href = '/');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      {/* Navigation Bar */}
      <nav className="bg-white/95 backdrop-blur-sm border-b border-slate-200 shadow-sm">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="font-bold text-xl text-[hsl(var(--cbf-navy))]">
            Boreal Financial
          </div>
          <div className="flex items-center space-x-3">
            {isAuthenticated ? (
              <Button 
                variant="outline" 
                onClick={handleLogout}
                className="text-red-600 hover:text-red-700 border-red-300"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </Button>
            ) : (
              <>
                <Button variant="ghost" onClick={handleLogin} disabled={isLoading}>
                  {isLoading ? "Redirecting..." : "Sign In"}
                </Button>
                <Button 
                  onClick={handleLogin}
                  disabled={isLoading}
                  className="bg-[hsl(var(--cbf-navy))] hover:bg-[hsl(var(--cbf-navy-dark))] text-white"
                >
                  {isLoading ? (
                    <span className="flex items-center">
                      <Lock className="w-4 h-4 mr-2 animate-pulse" />
                      Authenticating...
                    </span>
                  ) : (
                    <span className="flex items-center">
                      Get Started
                      <ArrowRight className="w-4 h-4 ml-2" />
                    </span>
                  )}
                </Button>
              </>
            )}
          </div>
        </div>
      </nav>
      
      <div className="container mx-auto px-4 py-16">
        {/* Hero Section */}
        <div className="text-center mb-16">
          <h1 className="text-4xl md:text-6xl font-bold text-[hsl(var(--cbf-navy))] mb-6">
            Professional Business Financing Solutions
          </h1>
          <p className="text-xl text-[hsl(var(--cbf-gray))] mb-8 max-w-3xl mx-auto">
            Connecting Canadian and US businesses with tailored financing solutions. 
            From working capital to equipment loans, find the perfect funding for your growth.
          </p>
          <Button 
            size="lg" 
            className="bg-[hsl(var(--cbf-orange))] hover:bg-[hsl(var(--cbf-orange-light))] text-white px-8 py-3 text-lg font-semibold"
            onClick={handleLogin}
            disabled={isLoading}
          >
            {isLoading ? (
              <span className="flex items-center">
                <Lock className="w-5 h-5 mr-2 animate-pulse" />
                Authenticating...
              </span>
            ) : (
              <span className="flex items-center">
                Start Your Application
                <ArrowRight className="w-5 h-5 ml-2" />
              </span>
            )}
          </Button>
        </div>

        {/* Features Grid */}
        <div className="grid md:grid-cols-3 gap-8 mb-16">
          <Card className="border-none shadow-lg hover:shadow-xl transition-shadow bg-white/80 backdrop-blur-sm">
            <CardHeader>
              <div className="w-12 h-12 bg-[hsl(var(--cbf-navy))]/10 rounded-lg flex items-center justify-center mb-4">
                <FileText className="w-6 h-6 text-[hsl(var(--cbf-navy))]" />
              </div>
              <CardTitle className="text-[hsl(var(--cbf-navy))]">Streamlined Application</CardTitle>
              <CardDescription className="text-[hsl(var(--cbf-gray))]">
                Complete your business loan application in minutes with our intuitive, multi-step process.
              </CardDescription>
            </CardHeader>
          </Card>

          <Card className="border-none shadow-lg hover:shadow-xl transition-shadow bg-white/80 backdrop-blur-sm">
            <CardHeader>
              <div className="w-12 h-12 bg-[hsl(var(--cbf-orange))]/10 rounded-lg flex items-center justify-center mb-4">
                <DollarSign className="w-6 h-6 text-[hsl(var(--cbf-orange))]" />
              </div>
              <CardTitle className="text-[hsl(var(--cbf-navy))]">Competitive Rates</CardTitle>
              <CardDescription className="text-[hsl(var(--cbf-gray))]">
                Access competitive financing options tailored to your business needs.
              </CardDescription>
            </CardHeader>
          </Card>

          <Card className="border-none shadow-lg hover:shadow-xl transition-shadow bg-white/80 backdrop-blur-sm">
            <CardHeader>
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
                <Shield className="w-6 h-6 text-green-600" />
              </div>
              <CardTitle className="text-[hsl(var(--cbf-navy))]">Secure & Compliant</CardTitle>
              <CardDescription className="text-[hsl(var(--cbf-gray))]">
                Bank-level security with full compliance to financial regulations.
              </CardDescription>
            </CardHeader>
          </Card>
        </div>

        {/* Benefits Section */}
        <div className="bg-white/60 backdrop-blur-sm rounded-2xl p-8 mb-16 border border-white/20">
          <h2 className="text-3xl font-bold text-[hsl(var(--cbf-navy))] mb-8 text-center">
            Why Choose Boreal Financial?
          </h2>
          <div className="grid md:grid-cols-2 gap-6">
            <div className="flex items-start space-x-3">
              <CheckCircle className="w-6 h-6 text-green-500 mt-1 flex-shrink-0" />
              <div>
                <h3 className="font-semibold text-[hsl(var(--cbf-navy))] mb-1">Fast Approval</h3>
                <p className="text-[hsl(var(--cbf-gray))] text-sm">Get decisions within 24-48 hours.</p>
              </div>
            </div>
            <div className="flex items-start space-x-3">
              <CheckCircle className="w-6 h-6 text-green-500 mt-1 flex-shrink-0" />
              <div>
                <h3 className="font-semibold text-[hsl(var(--cbf-navy))] mb-1">Flexible Terms</h3>
                <p className="text-[hsl(var(--cbf-gray))] text-sm">6 months to 10 years repayment options.</p>
              </div>
            </div>
            <div className="flex items-start space-x-3">
              <CheckCircle className="w-6 h-6 text-green-500 mt-1 flex-shrink-0" />
              <div>
                <h3 className="font-semibold text-[hsl(var(--cbf-navy))] mb-1">No Hidden Fees</h3>
                <p className="text-[hsl(var(--cbf-gray))] text-sm">Transparent pricing with clear terms.</p>
              </div>
            </div>
            <div className="flex items-start space-x-3">
              <CheckCircle className="w-6 h-6 text-green-500 mt-1 flex-shrink-0" />
              <div>
                <h3 className="font-semibold text-[hsl(var(--cbf-navy))] mb-1">Expert Support</h3>
                <p className="text-[hsl(var(--cbf-gray))] text-sm">Dedicated financing specialists available.</p>
              </div>
            </div>
          </div>
        </div>

        {/* Call to Action */}
        <div className="text-center">
          <h2 className="text-3xl font-bold text-[hsl(var(--cbf-navy))] mb-4">
            Ready to Grow Your Business?
          </h2>
          <p className="text-[hsl(var(--cbf-gray))] mb-8 max-w-2xl mx-auto">
            Join thousands of businesses that have secured funding through our platform.
          </p>
          <Button 
            size="lg" 
            className="bg-[hsl(var(--cbf-navy))] hover:bg-[hsl(var(--cbf-navy-dark))] text-white px-12 py-4 text-lg font-semibold"
            onClick={handleLogin}
            disabled={isLoading}
          >
            {isLoading ? (
              <span className="flex items-center">
                <Lock className="w-5 h-5 mr-2 animate-pulse" />
                Authenticating...
              </span>
            ) : (
              <span className="flex items-center">
                Apply Now
                <ArrowRight className="w-5 h-5 ml-2" />
              </span>
            )}
          </Button>
        </div>
      </div>
    </div>
  );
}
```

## Step 4: Backend Authentication (server/auth.ts)

```typescript
import express from 'express';
import session from 'express-session';
import { users, type User } from '@shared/schema';
import { db } from './db';
import { eq } from 'drizzle-orm';

const router = express.Router();

export const sessionConfig = session({
  secret: process.env.SESSION_SECRET || 'development-secret',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    httpOnly: true,
    maxAge: 24 * 60 * 60 * 1000, // 24 hours
  }
});

export const isAuthenticated = (req: any, res: any, next: any) => {
  if (req.session?.isAuthenticated && req.session?.user) {
    return next();
  }
  res.status(401).json({ message: 'Unauthorized' });
};

router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ message: 'Email and password required' });
    }

    const [user] = await db.select().from(users).where(eq(users.email, email));
    if (!user) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    req.session.isAuthenticated = true;
    req.session.user = user;

    res.json({ success: true, user: { email: user.email, firstName: user.firstName } });
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

router.get('/user', isAuthenticated, async (req: any, res) => {
  res.json(req.session.user);
});

router.post('/logout', (req: any, res) => {
  req.session.destroy((err: any) => {
    if (err) return res.status(500).json({ message: 'Logout failed' });
    res.clearCookie('connect.sid');
    res.json({ success: true });
  });
});

export default router;
```

## Step 5: Database Schema (shared/schema.ts)

```typescript
import { pgTable, varchar, timestamp, boolean } from "drizzle-orm/pg-core";

export const users = pgTable("users", {
  id: varchar("id").primaryKey().notNull(),
  email: varchar("email").unique(),
  firstName: varchar("first_name"),
  lastName: varchar("last_name"),
  hasCompletedApplication: boolean("has_completed_application").default(false),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export type User = typeof users.$inferSelect;
export type InsertUser = typeof users.$inferInsert;
```

## Step 6: Main App Router (client/src/App.tsx)

```tsx
import { Switch, Route } from 'wouter';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { useAuth } from '@/hooks/useAuth';
import Landing from '@/pages/landing';

const queryClient = new QueryClient();

function Router() {
  const { isAuthenticated, isLoading } = useAuth();

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <Switch>
      <Route path="/" component={Landing} />
    </Switch>
  );
}

export default function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <Router />
    </QueryClientProvider>
  );
}
```

## Step 7: Environment Setup

Create `.env` file:
```bash
DATABASE_URL=your_postgresql_connection_string
SESSION_SECRET=your_session_secret_key
NODE_ENV=development
```

## Step 8: Testing

1. Start the application: `npm run dev`
2. Visit `http://localhost:5173`
3. Test authentication flow
4. Verify responsive design on mobile/desktop
5. Check navigation and logout functionality

This complete guide provides everything needed to recreate the exact Boreal Financial landing page experience.