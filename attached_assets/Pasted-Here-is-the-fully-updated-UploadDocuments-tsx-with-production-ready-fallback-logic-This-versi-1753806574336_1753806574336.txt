Here is the **fully updated `UploadDocuments.tsx`** with production-ready fallback logic. This version:

* ✅ Supports unauthenticated document uploads from SMS links
* ✅ Parses `applicationId` from the query string
* ✅ Gracefully handles staff backend failure
* ✅ Always renders the upload interface

---

### ✅ `client/src/pages/UploadDocuments.tsx`

```tsx
import React, { useEffect, useState } from "react";
import { useSearchParams } from "react-router-dom";
import DocumentUploadSection from "../components/DocumentUploadSection"; // adjust import path if needed

const UploadDocuments: React.FC = () => {
  const [searchParams] = useSearchParams();
  const applicationIdFromQuery = searchParams.get("app");

  const [applicationId, setApplicationId] = useState<string | null>(null);
  const [applicationData, setApplicationData] = useState<any>(null);
  const [apiFailed, setApiFailed] = useState(false);

  // Set applicationId from query
  useEffect(() => {
    if (applicationIdFromQuery) {
      setApplicationId(applicationIdFromQuery);
    }
  }, [applicationIdFromQuery]);

  // Attempt to fetch application data
  useEffect(() => {
    const fetchData = async () => {
      if (!applicationIdFromQuery) return;

      try {
        const res = await fetch(
          `${import.meta.env.VITE_API_BASE_URL}/api/public/applications/${applicationIdFromQuery}`
        );

        if (!res.ok) throw new Error("API call failed");

        const data = await res.json();
        setApplicationData(data);
      } catch (error) {
        console.error("❌ Failed to fetch application data:", error);
        setApiFailed(true);
      }
    };

    fetchData();
  }, [applicationIdFromQuery]);

  // Render error if query param is missing
  if (!applicationId) {
    return (
      <div className="container mx-auto p-4">
        <h1 className="text-xl font-semibold text-red-600">
          Invalid application link
        </h1>
        <p className="mt-2">Please check the SMS link or contact support.</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Upload Required Documents</h1>

      {!applicationData && apiFailed && (
        <div className="mb-4 p-3 bg-yellow-100 border border-yellow-300 rounded">
          <p className="text-yellow-800">
            We couldn’t load your full application, but you can still upload your documents.
          </p>
        </div>
      )}

      <DocumentUploadSection applicationId={applicationId} />
    </div>
  );
};

export default UploadDocuments;
```

---

### ✅ What to do next in Replit

1. Replace the contents of `UploadDocuments.tsx` with the above.
2. Ensure `DocumentUploadSection` is properly receiving and using `applicationId`.
3. Deploy to production.
4. Test with real SMS link like:

   ```
   https://clientportal.boreal.financial/upload-documents?app=49bd45ff-e466-4baa-b08d-cac46a288533
   ```

Let me know if you also want the updated `DocumentUploadSection.tsx` scaffold to accept and use `applicationId`.
