# [CLIENT APPLICATION BLOCK]
set -euo pipefail

cd client

# 0) Feature flag defaults (opt-out possible if needed)
if [ -f ".env.example" ]; then
  grep -q "^VITE_LOSSLESS_SUBMIT=" .env.example || echo "VITE_LOSSLESS_SUBMIT=1" >> .env.example
fi
if [ -f ".env" ]; then
  grep -q "^VITE_LOSSLESS_SUBMIT=" .env || echo "VITE_LOSSLESS_SUBMIT=1" >> .env
fi

# 1) Snapshot helper excludes File/Blob; safe to create/overwrite.
mkdir -p src/lib
cat > src/lib/getFormSnapshot.ts <<'TS'
export function getFormSnapshot(state: any){
  if (!state || typeof state !== 'object') return {};
  const prune = (v:any): any => {
    if (v===null || v===undefined) return v;
    if (Array.isArray(v)) return v.map(prune);
    if (typeof v === 'object') {
      const out: any = {};
      for (const k of Object.keys(v)) {
        const val = v[k];
        if (typeof val === 'function') continue;
        // Drop binary objects to avoid large payloads
        if ((typeof File!=="undefined" && val instanceof File) || (typeof Blob!=="undefined" && val instanceof Blob)) continue;
        out[k] = prune(val);
      }
      return out;
    }
    return v;
  };
  return prune(state);
}
TS

# 2) Patch submit to attach snapshot under both `payload` and `formFields`, gated by VITE_LOSSLESS_SUBMIT.
SUBMIT="src/lib/submitApplication.ts"
if [ -f "$SUBMIT" ]; then
  node -e '
const fs=require("fs");const p=process.argv[1];
let t=fs.readFileSync(p,"utf8"); 
if(!t.includes("getFormSnapshot")) t=`import { getFormSnapshot } from "./getFormSnapshot";\n`+t;
// Replace the JSON.stringify(payload) call with a gated wrapper (idempotent).
if(!t.includes("/* LOSSLESS_WRAP */")){
  t=t.replace(/JSON\\.stringify\\(\\s*payload\\s*\\)/,
`JSON.stringify((()=>{ /* LOSSLESS_WRAP */
  try{
    if (import.meta.env?.VITE_LOSSLESS_SUBMIT === "0") return payload;
    const snap=(typeof window!=="undefined" && (window as any).__APP_STATE__)||{};
    const out:any={...payload};
    const snapshot=getFormSnapshot(snap);
    out.payload = snapshot;
    out.formFields = snapshot; // Staff Zod passthrough
    return out;
  }catch(_){ return payload; }
})())`);
}
fs.writeFileSync(p,t);
console.log("Patched", p);
' "$SUBMIT"
else
  echo "WARNING: $SUBMIT not found; please adjust path if your submit file differs."
fi

# 3) Expose minimal state reference (no behavior change). If app already exposes, this is a harmless no-op.
for f in src/main.tsx src/main.ts src/App.tsx; do
  if [ -f "$f" ] && ! rg -n "__APP_STATE__" "$f" >/dev/null 2>&1; then
    cat >> "$f" <<'TS'

// Dev-safe: expose minimal app state if available for snapshotting
try{ (window as any).__APP_STATE__ = (window as any).__APP_STATE__ || (window as any).__FORM_STATE__ || (window as any).__store || {}; }catch{}
TS
    echo "Exposed __APP_STATE__ in $f"
    break
  fi
done

# 4) Guard rails: ensure docs upload path and field name remain unchanged (Step 5 safety checks).
rg -n "/v1/applications/.*/docs" src || true
rg -n "append\\(\\s*[\"\\']files[\"\\']" src || true

echo
echo "=== VERIFICATION ==="
echo "• Build Client, submit one application."
echo "• This change only adds snapshot to final POST when VITE_LOSSLESS_SUBMIT!=0."
echo "• Step 2 recommender & Step 5 uploads remain untouched."
echo "✅ CLIENT block applied."
