# PURPOSE
# No UI changes required to the Client forms for creation/edit (those live in Staff).
# Do ensure Client reads the new fields and honors them in Step 2/5 & submission.

set -euo pipefail

echo "== 1) Make sure Client fetch uses v1 (no defaults) =="
mkdir -p client/src/lib
cat > client/src/lib/products.ts <<'TS'
export type CanonicalProduct = {
  id: string;
  name: string;
  lender_name?: string|null;
  country: "CA"|"US"|null;
  category: string|null;
  min_amount: number|null;
  max_amount: number|null;
  active: boolean;
  required_documents: string[];
  min_time_in_business: number|null;
  min_monthly_revenue: number|null;
};

const norm = (x:any)=> (x??"").toString().trim().toUpperCase();
function toCanonical(p:any): CanonicalProduct {
  return {
    id: p.id,
    name: p.productName ?? p.name ?? "",
    lender_name: p.lenderName ?? null,
    country: ["CA","US"].includes(norm(p.countryOffered)) ? (norm(p.countryOffered) as any) : null,
    category: p.productCategory ?? null,
    min_amount: p.minimumLendingAmount ?? null,
    max_amount: p.maximumLendingAmount ?? null,
    active: (p.isActive ?? true) === true,
    required_documents: Array.isArray(p.required_documents) ? p.required_documents : [],
    min_time_in_business: p.min_time_in_business ?? null,
    min_monthly_revenue: p.min_monthly_revenue ?? null,
  };
}

export async function fetchProducts(): Promise<CanonicalProduct[]> {
  const r = await fetch("/api/v1/products", { credentials: "include" });
  if (r.ok) {
    const j = await r.json();
    if (Array.isArray(j)) return j.map(toCanonical);
  }
  // legacy fallback (optional)
  const r2 = await fetch("/api/lender-products");
  const j2 = await r2.json();
  return (j2.products ?? []).map((p:any)=>({
    id: p.id, name: p.name ?? p.productName ?? "", lender_name: p.lender_name ?? null,
    country: ["CA","US"].includes(norm(p.country)) ? (norm(p.country) as any) : null,
    category: p.category ?? p.productCategory ?? null,
    min_amount: p.min_amount ?? p.minimumLendingAmount ?? null,
    max_amount: p.max_amount ?? p.maximumLendingAmount ?? null,
    active: (p.active ?? p.isActive ?? true) === true,
    required_documents: Array.isArray(p.required_documents) ? p.required_documents : [],
    min_time_in_business: p.min_time_in_business ?? null,
    min_monthly_revenue: p.min_monthly_revenue ?? null,
  }));
}
TS

echo "== 2) Step 2 / Step 5 continue to work without changes =="
cat > client/src/lib/qa-products.sh <<'SH'
#!/usr/bin/env bash
set -euo pipefail
echo "Total (v1): $(curl -s http://localhost:5000/api/v1/products | jq 'length')"
echo "By country: "; curl -s http://localhost:5000/api/v1/products | jq 'group_by(.countryOffered)|map({k:.[0].countryOffered, n:length})'
SH
chmod +x client/src/lib/qa-products.sh

echo "== 3) Smoke test =="
client/src/lib/qa-products.sh || true
echo "== Client ready (reads new Staff-created products) =="
