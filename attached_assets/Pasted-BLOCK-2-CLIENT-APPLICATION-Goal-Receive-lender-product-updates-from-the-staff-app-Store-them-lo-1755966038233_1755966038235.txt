BLOCK 2 — CLIENT APPLICATION
Goal

Receive lender product updates from the staff app.

Store them locally (IndexedDB or localStorage).

Serve products offline for Step 2 and Step 5.

1. Add Sync API Endpoint

File: pages/api/sync/lender-products.ts

import { NextApiRequest, NextApiResponse } from "next";
import fs from "fs";
import path from "path";

const PRODUCTS_PATH = path.join(process.cwd(), "data", "lenderProducts.json");

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  const key = req.headers.authorization?.replace("Bearer ", "");
  if (key !== process.env.CLIENT_SYNC_KEY) {
    return res.status(403).json({ error: "Unauthorized" });
  }

  try {
    fs.writeFileSync(PRODUCTS_PATH, JSON.stringify(req.body.products, null, 2));
    console.log("✅ Lender products updated locally");
    return res.status(200).json({ success: true });
  } catch (err) {
    console.error("❌ Failed to update lender products:", err);
    return res.status(500).json({ error: "Failed to save products" });
  }
}

2. Add Environment Variable

File: .env

CLIENT_SYNC_KEY=bf_client_sync_42c1a97f12b94b87a8d3b3

3. Update Step 2 & Step 5 Logic

Replace hardcoded lender products with dynamic load from local storage:

File: hooks/useLenderProducts.ts

import { useEffect, useState } from "react";

export function useLenderProducts() {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    async function fetchProducts() {
      try {
        const res = await fetch("/data/lenderProducts.json");
        const data = await res.json();
        setProducts(data);
      } catch {
        console.error("❌ Failed to load lender products");
      }
    }
    fetchProducts();
  }, []);

  return products;
}

4. Use Products in Form Steps

Step 2 (Product Recommendations):

const products = useLenderProducts();
const categories = [...new Set(products.map(p => p.category))];


Step 5 (Document Requirements):

const selectedProduct = products.find(p => p.id === selectedProductId);
const requiredDocs = selectedProduct?.requiredDocuments || [];

5. Test End-to-End

Add a new lender product in the staff app.

Confirm staff pushes data → client.

Reload client app.

Validate:

Step 2 recommendations update automatically.

Step 5 document requirements match the new product.

Outcome

Staff app remains the single source of truth ✅

Client app automatically syncs lender products ✅

No duplicate storage logic ✅

Offline-ready recommendations + docs ✅