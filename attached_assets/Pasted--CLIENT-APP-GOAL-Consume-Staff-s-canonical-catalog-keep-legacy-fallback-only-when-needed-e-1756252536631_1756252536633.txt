[CLIENT APP]

# GOAL
# Consume Staff’s canonical catalog, keep legacy fallback only when needed,
# enforce strict field normalization, provide a “show all fields” view,
# remove duplicates/old endpoint usage, then rebuild.

# 1) BASE URL + PROXY (point at Staff correctly)
# FILE: client/.env
VITE_STAFF_BASE=/                # same-origin proxy (recommended)
# or, if hitting a remote staff host:
# VITE_STAFF_BASE=https://staff.boreal.financial

# FILE: client/src/lib/api.ts  (centralize fetch)
const BASE = import.meta.env.VITE_STAFF_BASE ?? "/";
const j = async (p: string, init?: RequestInit) => {
  const r = await fetch(BASE.replace(/\/$/,"") + p, {credentials:"include", ...init});
  if (!r.ok) throw new Error(`api ${p} -> ${r.status}`);
  return r.json();
};

# 2) CANONICAL PRODUCT TYPE + FIELD ALIASING
# FILE: client/src/lib/catalog.ts
export type CanonicalProduct = {
  id: string; name: string; lender_id: string; lender_name: string;
  country: "CA"|"US"; category: string; min_amount: number; max_amount: number;
  interest_rate_min?: number|null; interest_rate_max?: number|null;
  term_min?: number|null; term_max?: number|null; active: boolean;
  required_documents: Array<{key:string;label:string;required:boolean;months?:number}>;
};

type Aliases = Record<string,string>;
let ALIASES: Aliases = {};
export async function getAliases(): Promise<Aliases> {
  if (Object.keys(ALIASES).length) return ALIASES;
  const f = await j("/api/catalog/fields");
  ALIASES = f?.legacy_aliases ?? {};
  return ALIASES;
}

export function normalize(raw: any, a: Aliases): CanonicalProduct {
  const pick = (k:string) => raw[k] ?? raw[Object.keys(a).find(x=>a[x]===k)!];
  const country = String(pick("country") ?? "").toUpperCase();
  const category = String(pick("category") ?? "");
  return {
    id: String(pick("id")),
    name: String(pick("name")),
    lender_id: String(pick("lender_id") ?? ""),
    lender_name: String(pick("lender_name") ?? pick("lenderName") ?? ""),
    country: (country === "CA" || country === "US" ? country : "US"),
    category,
    min_amount: Number(pick("min_amount") ?? 0),
    max_amount: Number(pick("max_amount") ?? 0),
    interest_rate_min: pick("interest_rate_min") ?? null,
    interest_rate_max: pick("interest_rate_max") ?? null,
    term_min: pick("term_min") ?? null,
    term_max: pick("term_max") ?? null,
    active: Boolean(pick("active") ?? true),
    required_documents: Array.isArray(raw.required_documents) && raw.required_documents.length
      ? raw.required_documents
      : [{key:"bank_6m",label:"Last 6 months bank statements",required:true,months:6}]
  };
}

# 3) SINGLE SOURCE FETCH (catalog first, legacy fallback only on 404/501)
export async function fetchCatalogNormalized(): Promise<CanonicalProduct[]> {
  const aliases = await getAliases().catch(()=> ({} as Aliases));
  try {
    const ex = await j("/api/catalog/export-products?includeInactive=1");
    return (ex.products ?? []).map((p:any)=>normalize(p, aliases));
  } catch (e:any) {
    // fallback ONLY if Staff hasn’t mounted catalog yet
    const legacy = await j("/api/lender-products");
    const rows = legacy.products ?? legacy.data ?? [];
    return rows.map((p:any)=>normalize(p, await getAliases().catch(()=>({} as Aliases))));
  }
}

# 4) UI: “SHOW ALL FIELDS & VALUES” (continuity check page)
# FILE: client/src/pages/debug/CatalogDump.tsx
import { useEffect, useState } from "react";
import { fetchCatalogNormalized } from "@/lib/catalog";
export default function CatalogDump(){
  const [rows,setRows]=useState<CanonicalProduct[]>([]);
  useEffect(()=>{ fetchCatalogNormalized().then(setRows).catch(()=>setRows([])); },[]);
  if (!rows.length) return <div>Loading catalog…</div>;
  const fields: (keyof CanonicalProduct)[] = ["id","name","lender_id","lender_name","country","category","min_amount","max_amount","interest_rate_min","interest_rate_max","term_min","term_max","active","required_documents"];
  return (
    <div style={{fontFamily:"ui-monospace",padding:16}}>
      <h1>Catalog Dump (Canonical Fields)</h1>
      {rows.map((p,i)=>(
        <div key={p.id} style={{border:"1px solid #ddd",borderRadius:12,margin:"12px 0",padding:12}}>
          <div style={{fontWeight:700,marginBottom:8}}>{i+1}. {p.name} — {p.lender_name}</div>
          {fields.map(f=>(
            <div key={String(f)}><strong>{String(f)}:</strong> {f==="required_documents" ? JSON.stringify(p[f]) : String((p as any)[f] ?? "")}</div>
          ))}
        </div>
      ))}
    </div>
  );
}

# 5) ROUTE REGISTRATION
# FILE: client/src/v2-design-system/MainLayout.tsx (or your router)
{ /* debug route */ }
<Route path="/debug/catalog-dump" element={<CatalogDump />} />

# 6) REMOVE DUPLICATES & LEGACY CALLS (keep fallback in api only)
# (a) Nuke stray helper/types that re-define product fields
rm -f client/src/lib/finalizedLenderSync.ts client/src/types/enhancedLenderProduct.ts 2>/dev/null || true
# (b) Replace any direct calls to /api/lender-products with catalog export
grep -RIl "/api/lender-products" client | xargs -r sed -i 's|/api/lender-products|/api/catalog/export-products?includeInactive=1|g'

# 7) STEP 5 REQUIRED DOCS (try Staff first, fallback to baseline)
# FILE: client/src/lib/api.ts (export listDocuments)
export async function listDocuments(input:{category?:string;country?:string;amount?:number;}) {
  try {
    const r = await j("/api/required-docs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(input)});
    const docs = r?.documents ?? r?.requiredDocs ?? [];
    if (Array.isArray(docs) && docs.length) return docs;
  } catch {}
  return [{key:"bank_6m",label:"Last 6 months bank statements",required:true,months:6}];
}

# 8) BUILD & RUNTIME CHECKS
npm run build
# Verify canonical fields present and diversity intact
curl -s "${VITE_STAFF_BASE%/}/api/catalog/fields" | jq '.canonical_fields|length'
curl -s "${VITE_STAFF_BASE%/}/api/catalog/export-products" | jq '.total, [.products[].country]|unique, [.products[].category]|unique'
# Open /debug/catalog-dump and visually confirm every field renders per product.
