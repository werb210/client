[CLIENT APP]

# Files: add or update exactly as shown.

# --- client/src/lib/api.ts (append to the module; ensure exported) ---
export type RequiredDocsInput = {
  category?: string;
  country?: string;
  amount?: number;
  lenderId?: string;
  timeInBusinessMonths?: number;
  monthlyRevenue?: number;
  creditScore?: number;
};

export type RequiredDoc =
  | { key: string; label: string; required: boolean; reason?: string }
  | string;

const DOCS_FALLBACK: Record<string, RequiredDoc[]> = {
  "Working Capital": [
    { key: "bank_3m", label: "Last 3 months bank statements", required: true },
    { key: "void_cheque", label: "Void cheque", required: true },
    { key: "gov_id", label: "Government-issued ID", required: true },
  ],
  "Business Line of Credit": [
    { key: "bank_6m", label: "Last 6 months bank statements", required: true },
    { key: "yr_fin", label: "Most recent year financials or NOA", required: false },
  ],
  "Term Loan": [
    { key: "tax_returns", label: "Most recent business tax return", required: true },
    { key: "fin_statements", label: "YTD financial statements", required: true },
  ],
  "Equipment Financing": [
    { key: "equipment_quote", label: "Equipment quote/invoice", required: true },
    { key: "bank_3m", label: "Last 3 months bank statements", required: true },
  ],
  "Invoice Factoring": [
    { key: "ar_aging", label: "A/R aging report", required: true },
    { key: "sample_invoices", label: "Sample customer invoices", required: true },
  ],
  "Purchase Order Financing": [
    { key: "purchase_orders", label: "Approved purchase orders", required: true },
    { key: "supplier_quote", label: "Supplier quote", required: true },
  ],
};

export async function listDocuments(input: RequiredDocsInput): Promise<RequiredDoc[]> {
  try {
    const r = await fetch("/api/required-docs", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify(input),
    });
    if (r.ok) {
      const j = await r.json();
      const docs = j?.documents ?? j?.requiredDocs ?? j?.data ?? [];
      if (Array.isArray(docs) && docs.length) return docs as RequiredDoc[];
    }
  } catch {}
  const cat = input.category ?? "Working Capital";
  return DOCS_FALLBACK[cat] ?? [];
}

export type LenderProductRow = {
  id?: string;
  name?: string;
  product_name?: string;
  lender_name?: string;
  lenderName?: string;
  country?: string;
  min_amount?: number;
  minimumLendingAmount?: number;
  max_amount?: number;
  maximumLendingAmount?: number;
  category?: string;
  productCategory?: string;
};

export async function fetchLenderProductsLive(params?: {
  country?: "US" | "CA";
  amount?: number;
  includeInactive?: boolean;
}) {
  const qs = new URLSearchParams();
  if (params?.country) qs.set("country", params.country);
  if (params?.amount) qs.set("amount", String(params.amount));
  if (params?.includeInactive) qs.set("includeInactive", "1");
  const r = await fetch(`/api/catalog/export-products?${qs.toString()}`, { credentials: "include" });
  if (!r.ok) throw new Error(`export-products ${r.status}`);
  const j = await r.json();
  const rows: LenderProductRow[] = Array.isArray(j.products) ? j.products : [];
  const total = j.total ?? rows.length ?? 0;
  return { total, products: rows };
}

export async function getMatchingCategories(amount: number, country: "US" | "CA") {
  const r = await fetch(`/api/catalog/categories?amount=${amount}&country=${country}`);
  if (!r.ok) return [];
  const j = await r.json();
  return Array.isArray(j?.categories) ? j.categories as string[] : [];
}

# --- client/src/components/DynamicDocumentRequirements.tsx (ensure import + normalization) ---
import { listDocuments, type RequiredDoc } from "@/lib/api";

function normalizeDocs(docs: RequiredDoc[]) {
  return (docs ?? []).map((d, i) =>
    typeof d === "string" ? { key: `doc_${i}`, label: d, required: true } : d
  );
}
