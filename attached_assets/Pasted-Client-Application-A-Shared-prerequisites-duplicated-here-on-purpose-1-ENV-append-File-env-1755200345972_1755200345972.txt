Client Application
A) Shared prerequisites (duplicated here on purpose)

1) ENV (append):
File: .env

# ===== Notifications =====
NOTIFY_SSE_HEARTBEAT_MS=25000
NOTIFY_DIGEST_HOUR=8
TIMEZONE=America/Edmonton


2) DB migration:
File: server/db/migrations/2025_08_14_notifications.sql

CREATE TABLE IF NOT EXISTS notifications (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid,
  contact_id uuid,
  type varchar(32) NOT NULL,
  title text NOT NULL,
  body text,
  link_url text,
  read_at timestamptz,
  created_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_notif_user ON notifications(user_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_notif_contact ON notifications(contact_id, created_at DESC);


Run:

npm run db:migrate


3) Shared services (same as staff):
File: server/services/notify.ts
(identical to the Staff block; copy the same file content)

4) Client-scoped routes (SSE + REST):
File: server/routes/client/notifications.ts

import { Router } from "express";
import { db } from "../../db/client";
import { sql } from "drizzle-orm";
import { subscribe, notifyContact } from "../../services/notify";

const router = Router();

/* Assume your client auth sets req.contact?.id */
router.get("/", async (req:any, res) => {
  const cid = req.contact?.id || req.query.contactId; // fallback for local testing
  if (!cid) return res.status(401).json({ error: "Unauthorized" });
  const r = await db.execute(sql`
    SELECT id, type, title, body, link_url, read_at, created_at
    FROM notifications WHERE contact_id=${cid}
    ORDER BY created_at DESC
    LIMIT 100
  `);
  res.json(r.rows || []);
});

router.post("/:id/read", async (req:any, res) => {
  const cid = req.contact?.id || req.query.contactId; if (!cid) return res.status(401).end();
  await db.execute(sql`UPDATE notifications SET read_at=now() WHERE id=${req.params.id} AND contact_id=${cid}`);
  res.json({ ok: true });
});

router.get("/stream", async (req:any, res) => {
  const cid = req.contact?.id || req.query.contactId; if (!cid) return res.status(401).end();
  res.setHeader("Content-Type","text/event-stream");
  res.setHeader("Cache-Control","no-cache");
  res.setHeader("Connection","keep-alive");
  res.flushHeaders?.();

  const hb = Number(process.env.NOTIFY_SSE_HEARTBEAT_MS || 25000);
  const write = (chunk:string) => { try { res.write(chunk); } catch(_){} };
  const sink = { write, closed: false };
  const unsubscribe = subscribe("contact", cid, sink);

  write(`event: hello\ndata: ${JSON.stringify({ contactId: cid })}\n\n`);
  const timer = setInterval(()=> write(`event: ping\ndata: {}\n\n`), hb);

  req.on("close", () => { clearInterval(timer); unsubscribe(); try { res.end(); } catch(_){} });
});

/* Dev helper to test */
router.post("/test", async (req:any, res) => {
  const cid = req.contact?.id || req.body?.contactId; if (!cid) return res.status(400).json({ error: "contactId required" });
  const id = await notifyContact(cid, { type:"test", title:"Client test", body:"Hello from server" });
  res.json({ ok: true, id });
});

export default router;


Mount:
File: server/index.ts

import clientNotificationsRouter from "./routes/client/notifications";
app.use("/api/client/notifications", clientNotificationsRouter);

B) Client-specific UI

Bell + Center (client portal):
File: client/src/client/NotifBellClient.tsx

import React, { useEffect, useState } from "react";

export default function NotifBellClient({ contactId }:{ contactId:string }){
  const [count, setCount] = useState(0);
  useEffect(()=>{
    const es = new EventSource(`/api/client/notifications/stream?contactId=${encodeURIComponent(contactId)}`);
    es.addEventListener("notification", ()=> setCount(c=>c+1));
    es.addEventListener("ping", ()=>{});
    return ()=> es.close();
  }, [contactId]);
  return (
    <a href={`/client/notifications?contactId=${encodeURIComponent(contactId)}`} className="relative inline-flex items-center">
      <span className="material-icons">notifications</span>
      {count > 0 && <span className="absolute -top-1 -right-1 bg-red-600 text-white text-[10px] px-1 rounded">{count}</span>}
    </a>
  );
}


File: client/src/client/NotificationsClient.tsx

import React, { useEffect, useState } from "react";

export default function NotificationsClient(){
  const [items, setItems] = useState<any[]>([]);
  const contactId = new URLSearchParams(location.search).get("contactId") || "";
  async function load(){ setItems(await (await fetch(`/api/client/notifications?contactId=${encodeURIComponent(contactId)}`)).json()); }
  async function read(id:string){
    await fetch(`/api/client/notifications/${id}/read?contactId=${encodeURIComponent(contactId)}`, { method:"POST" });
    await load();
  }
  useEffect(()=>{ load(); }, []);
  return (
    <div className="p-4">
      <h1 className="text-xl font-semibold mb-3">Updates</h1>
      <ul className="space-y-2">
        {items.map(n=>(
          <li key={n.id} className="border rounded p-3 bg-white flex items-start justify-between">
            <div>
              <div className="font-medium">{n.title}</div>
              <div className="text-sm text-gray-600">{new Date(n.created_at).toLocaleString()}</div>
              {n.body && <div className="text-sm mt-1">{n.body}</div>}
            </div>
            {!n.read_at && <button className="text-xs underline" onClick={()=>read(n.id)}>Mark read</button>}
          </li>
        ))}
      </ul>
    </div>
  );
}


Wire (client routes / header):
File: client/src/App.tsx

import NotifBellClient from "./client/NotifBellClient";
import NotificationsClient from "./client/NotificationsClient";

/* In client portal header JSX (pass the logged-in contactId): */
{/* <NotifBellClient contactId={contactId} /> */}

/* Route: */
<Route path="/client/notifications" element={<NotificationsClient />} />

C) Playwright smoke tests (client)

File: tests/notifications-client.spec.ts

import { test, expect } from "@playwright/test";

test("Client notifications page loads", async ({ page }) => {
  await page.goto("/client/notifications?contactId=TEST");
  await expect(page.getByText(/Updates/i)).toBeVisible();
});


Run:

npx playwright test tests/notifications-client.spec.ts

D) Reporting (client)

Paste back:

Server logs showing /api/client/notifications/* mounted and a stream connection.

POST /api/client/notifications/test with a real contactId → confirm in UI.

Complete a mock sign or mock KYC for that contact → confirm a new client notification row.

✅ This step delivers

Real-time SSE notifications for both Staff & Client apps (with toast counters).

Notification Center pages to review and mark read.

Daily email digest to staff for unread items.

Event hooks wired to SLA breaches, e-sign completion, and KYC approval.