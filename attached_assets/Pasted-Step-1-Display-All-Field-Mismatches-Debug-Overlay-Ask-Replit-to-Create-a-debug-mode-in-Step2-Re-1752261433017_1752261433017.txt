Step 1: Display All Field Mismatches (Debug Overlay)
Ask Replit to:

Create a debug mode in Step2_Recommendations.tsx that:

Displays every field from the 41 lender products loaded from IndexedDB

Compares each product‚Äôs fields (e.g., category, fundingRange, industry) to the form input

Highlights missing, null, or unexpected format values

Prints a live debug table:
Product ID | Category | Funding Range | Match Score | Matching Field Issues

üì¶ Step 2: Isolate Schema Expectations
Ask Replit to:

Create a mapping schema file expectedLenderFields.ts that defines required fields:

ts
Copy
Edit
export const expectedLenderFields = {
  id: 'string',
  name: 'string',
  category: 'string',
  minFunding: 'number',
  maxFunding: 'number',
  requiredDocuments: 'string[]',
  matchCriteria: 'object', // Add more as needed
};
Then:

Loop through every lender product in Step2_Recommendations.tsx and log:

ts
Copy
Edit
for (const [key, expectedType] of Object.entries(expectedLenderFields)) {
  const actualType = typeof product[key];
  if (actualType !== expectedType) {
    console.warn(`Field mismatch in product ${product.id}: ${key} is ${actualType}, expected ${expectedType}`);
  }
}
This will catch structural mismatches across the product cache.

üîß Step 3: Auto-Fix Field Mapping Issues
Ask Replit to:

Create a new utility sanitizeLenderProduct.ts in client/src/lib/ that:

Normalizes category field (Invoice Factoring ‚Üí invoice_factoring)

Fills in missing fields with sensible defaults

Logs every auto-correction to the browser console

Example:

ts
Copy
Edit
export function sanitizeLenderProduct(product: any) {
  return {
    ...product,
    category: (product.category || '').toLowerCase().replace(/ /g, '_'),
    requiredDocuments: Array.isArray(product.requiredDocuments)
      ? product.requiredDocuments
      : [],
    // More normalizations as needed
  };
}
Apply this in lenderProductSync.ts before writing to IndexedDB and also in Step 2 logic before scoring.

‚úÖ Step 4: Run Full Diagnostics
Once implemented, instruct Replit:

Run a diagnostic across all 41 cached lender products and report:

Products missing critical fields

Fields with incorrect types

Count of products skipped during Step 2 matching

Any products that failed the sanitizeLenderProduct() normalization

üß™ Final Step: Manual QA in Console
Use this one-liner in the browser dev console:

ts
Copy
Edit
(async () => {
  const { get } = await import('idb-keyval');
  const products = await get('lender_products_cache');
  products.forEach(p => {
    if (!p.category || typeof p.category !== 'string') {
      console.warn('‚ö†Ô∏è Missing or invalid category for product', p.id);
    }
  });
})();
‚úÖ Summary for Replit
Please implement the following in the CLIENT application only:

Debug overlay in Step 2 to show field mapping per product

expectedLenderFields.ts schema with field type checks

sanitizeLenderProduct.ts to normalize malformed products

Real-time logging of all field issues + fix attempts

Diagnostic output in console for unmatched or corrupted products

Tell Replit to report back all auto-fixes and unmatched fields.