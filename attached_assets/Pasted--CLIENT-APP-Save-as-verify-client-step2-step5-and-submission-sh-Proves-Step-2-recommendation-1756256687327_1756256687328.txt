[CLIENT APP]

# Save as: verify_client_step2_step5_and_submission.sh
# Proves Step 2 (recommendations), Step 5 (docs), and probes a Submission API.

set -euo pipefail
base="${BASE_URL:-http://localhost:5000}"

node - <<'JS'
const base = process.env.BASE_URL || 'http://localhost:5000';

async function getCatalog() {
  // Prefer dump; fallback to legacy.
  let res = await fetch(`${base}/api/catalog/dump?limit=500`);
  if (res.status === 200) {
    const j = await res.json();
    return { schema: j.canonical_fields, products: j.products };
  }
  // Fallback: legacy ‚Üí normalize minimal fields needed for tests
  const legacy = await fetch(`${base}/api/lender-products`);
  const l = await legacy.json();
  const prods = (l.products || []).map(p => ({
    id: p.id,
    name: p.productName || p.name,
    lender_name: p.lenderName || p.lender_name,
    country: (p.countryOffered || p.country || '').toUpperCase(),
    category: p.productCategory || p.category || 'Working Capital',
    min_amount: Number(p.minimumLendingAmount ?? p.min_amount ?? 0),
    max_amount: Number(p.maximumLendingAmount ?? p.max_amount ?? Number.MAX_SAFE_INTEGER),
    active: (p.isActive ?? p.active) !== false,
  }));
  return { schema: [
      {name:'id'},{name:'name'},{name:'lender_name'},{name:'country'},{name:'category'},
      {name:'min_amount'},{name:'max_amount'},{name:'active'}
    ], products: prods };
}

// Simple Step 2 engine: filter + score + group
function recommend(products, { amount, country, category }) {
  const amt = Number(amount||0);
  const cc = String(country||'').toUpperCase();
  const matches = products.filter(p =>
    p.active !== false &&
    p.country === cc &&
    (isFinite(p.min_amount) ? p.min_amount <= amt : true) &&
    (isFinite(p.max_amount) ? amt <= p.max_amount : true)
  );
  const scored = matches
    .map(p => ({ p, score: Math.abs((p.max_amount ?? Number.MAX_SAFE_INTEGER) - amt) }))
    .sort((a,b) => a.score - b.score || (b.p.max_amount??0)-(a.p.max_amount??0))
    .map(x => x.p);

  const byCat = new Map();
  for (const p of scored) {
    const cat = p.category || 'Working Capital';
    if (!byCat.has(cat)) byCat.set(cat, []);
    byCat.get(cat).push(p);
  }
  const out = [];
  if (category && byCat.has(category)) out.push({ category, products: byCat.get(category) });
  for (const c of byCat.keys()) if (!category || c!==category) out.push({ category:c, products:byCat.get(c) });
  return out;
}

async function listDocs({ category, country, amount }) {
  try {
    const r = await fetch(`${base}/api/required-docs`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ category, country, amount })
    });
    if (r.ok) {
      const j = await r.json();
      const docs = j.documents || j.requiredDocs || j.data || [];
      if (Array.isArray(docs) && docs.length) return docs.map((d,i) => typeof d==='string' ? {key:`doc_${i}`,label:d,required:true} : d);
    }
  } catch {}
  return [{ key:'bank_6m', label:'Last 6 months bank statements', required:true, months:6 }];
}

(async () => {
  console.log('üîé Loading catalog (dump ‚Üí legacy fallback)‚Ä¶');
  const { schema, products } = await getCatalog();
  if (!products.length) throw new Error('No products');
  console.log(`‚úÖ Loaded ${products.length} products (${schema.length} canonical fields)`);

  // --- STEP 2 TESTS ---
  console.log('\nüß™ STEP 2: US $100k');
  let recs = recommend(products, { amount: 100000, country: 'US' });
  console.log('Categories:', recs.map(r => `${r.category}(${r.products.length})`).join(', '));
  if (!recs.length) throw new Error('No recommendations for US $100k');

  console.log('üß™ STEP 2: CA $50k');
  recs = recommend(products, { amount: 50000, country: 'CA' });
  console.log('Categories:', recs.map(r => `${r.category}(${r.products.length})`).join(', ') || 'none');
  // OK if zero if staff truly has no CA; otherwise expect >0.

  // --- STEP 5 TESTS ---
  console.log('\nüß™ STEP 5: Docs for Working Capital / US / $100k');
  const docs = await listDocs({ category: 'Working Capital', country: 'US', amount: 100000 });
  console.log('Docs:', docs.map(d => (d.label||d).toString()).join(' | '));
  const has6m = docs.some(d => (d.label||'').toLowerCase().includes('bank') && JSON.stringify(d).toLowerCase().includes('6'));
  if (!has6m) throw new Error('6-month bank statements not present (fallback or staff)');

  // --- SUBMISSION API PROBE ---
  console.log('\nüß™ SUBMISSION API probe (tries common endpoints)‚Ä¶');
  const endpoints = [
    {m:'POST',u:'/api/submissions'},
    {m:'POST',u:'/api/applications'},
    {m:'POST',u:'/api/submit'},
    {m:'POST',u:'/api/intake/submit'},
    {m:'POST',u:'/api/applications/submit'},
  ];
  const sampleProduct = products.find(p => p.active !== false) || products[0];
  const payload = {
    applicant: { legal_name: "TestCo LLC", email: "qa@example.com", phone: "+1-555-0100" },
    amount: 100000,
    country: "US",
    product_id: sampleProduct.id,
    category: sampleProduct.category,
    docs: [{ key:"bank_6m", provided:true }]
  };

  let ok = false;
  for (const ep of endpoints) {
    try {
      const r = await fetch(`${base}${ep.u}`, { method: ep.m, headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) });
      console.log(`${ep.m} ${ep.u} ‚Üí ${r.status}`);
      if (String(r.status).startsWith('2')) { ok = true; break; }
    } catch (e) {
      console.log(`${ep.m} ${ep.u} ‚Üí error (${e.message})`);
    }
  }
  if (!ok) console.log('‚ÑπÔ∏è No known Submission API accepted; confirm the correct endpoint when available.');

  console.log('\n‚úÖ CLIENT Step 2 & Step 5 smoke tests completed.');
})();
JS

echo "‚úÖ CLIENT TESTS FINISHED"
