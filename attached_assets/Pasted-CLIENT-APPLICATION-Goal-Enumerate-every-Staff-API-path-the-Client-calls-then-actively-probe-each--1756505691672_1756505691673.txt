CLIENT APPLICATION

Goal: Enumerate every Staff API path the Client calls, then actively probe each (OPTIONS/GET/POST as applicable) and record: URL, method, request headers, sample payload (if any), HTTP status, body snippet, error code/message, and CORS details.

Files Touched

scripts/api-link-audit.client.mjs (new)

reports/ (new directory for outputs; git-ignored)

Block (paste in Client repo root shell):

# =========================
# CLIENT ‚Äî PREP
# =========================
set -euo pipefail

# 0) Ensure dirs
mkdir -p reports

# 1) Environment echo (do not print secrets)
echo "üîé CLIENT ENV SUMMARY"
echo "‚Ä¢ VITE_STAFF_API_URL=${VITE_STAFF_API_URL:-<unset>}"
echo "‚Ä¢ STAFF_API_BASE=${STAFF_API_BASE:-<unset>}"

# 2) Create script to scan code for outbound Staff API calls and probe them
cat > scripts/api-link-audit.client.mjs <<'EOF'
import fs from "fs";
import path from "path";
import {execSync} from "child_process";
import http from "http";
import https from "https";

const STAFF_BASE = process.env.VITE_STAFF_API_URL || process.env.STAFF_API_BASE || "";
if (!STAFF_BASE) {
  console.error("‚ùå No STAFF base URL (VITE_STAFF_API_URL or STAFF_API_BASE). Set one and re-run.");
  process.exit(2);
}

const rg = (pat) => execSync(`rg -n --hidden -g '!node_modules' '${pat}'`, {encoding:"utf8", stdio:["pipe","pipe","ignore"]}).toString();
const hits = [];
try {
  // common fetch/axios patterns
  const patterns = [
    "fetch\\(([`'\"]).*?\\1",
    "axios\\.(get|post|put|patch|delete)\\(([`'\"]).*?\\2",
  ];
  for (const p of patterns) {
    const out = rg(p);
    if (out) hits.push(...out.split("\n").filter(Boolean));
  }
} catch { /* no hits */ }

const endpoints = new Set();
// Extract URLs (relative or absolute); keep only those that target staff API domain or begin with /api
for (const line of hits) {
  const m = line.match(/(['"`])((?:https?:\/\/[^'"]+|\/api[^'"]*))\1/);
  if (m) endpoints.add(m[2]);
}

// Normalize to absolute URLs against STAFF_BASE for /api* paths
const urls = [...endpoints].map(u => u.startsWith("http") ? u : STAFF_BASE.replace(/\/+$/,"") + u);

function simpleFetch(url, method="GET", headers={}, body=null) {
  return new Promise((resolve) => {
    try {
      const lib = url.startsWith("https") ? https : http;
      const u = new URL(url);
      const req = lib.request({
        method, hostname: u.hostname, port: u.port || (u.protocol==="https:"?443:80),
        path: u.pathname + (u.search||""), headers
      }, (res) => {
        let data=""; res.on("data", c => data += c);
        res.on("end", () => resolve({ok:true, status:res.statusCode, headers:res.headers, body:data.slice(0,1000)}));
      });
      req.on("error", (e) => resolve({ok:false, error:e.message}));
      if (body) req.write(body);
      req.end();
    } catch(e) {
      resolve({ok:false, error:String(e)});
    }
  });
}

const methodsToTry = (url) => {
  // Heuristic: document upload routes -> POST; everything else try OPTIONS, GET, POST
  if (/\/documents\/upload\b/.test(url)) return ["OPTIONS","POST"];
  if (/\/upload\b/.test(url)) return ["OPTIONS","POST"];
  if (/\/create\b/.test(url)) return ["OPTIONS","POST"];
  if (/\/delete\b/.test(url)) return ["OPTIONS","DELETE"];
  return ["OPTIONS","GET","POST"];
};

const sampleJson = JSON.stringify({ping:"client-diagnostic", time:new Date().toISOString()});

(async () => {
  const results = [];
  for (const url of urls) {
    for (const method of methodsToTry(url)) {
      const headers = {
        "Accept":"application/json, */*",
      };
      let body = null;
      if (method==="POST" || method==="PUT" || method==="PATCH") {
        headers["Content-Type"] = "application/json";
        body = sampleJson;
      }
      const r = await simpleFetch(url, method, headers, body);
      // Pull potential CORS signals from headers
      const h = (r.headers||{});
      results.push({
        source:"client",
        base: STAFF_BASE,
        url, method,
        status: r.status ?? null,
        ok: !!r.ok && (r.status>=200 && r.status<600),
        error: r.error ?? null,
        cors: {
          allowOrigin: h["access-control-allow-origin"] || null,
          allowMethods: h["access-control-allow-methods"] || null,
          allowHeaders: h["access-control-allow-headers"] || null,
          vary: h["vary"] || null,
        },
        bodySnippet: r.body ?? null,
        time: new Date().toISOString()
      });
    }
  }
  fs.writeFileSync("reports/client_api_probe.json", JSON.stringify(results, null, 2));
  console.log("‚úÖ Wrote reports/client_api_probe.json with", results.length, "entries.");
})();
EOF

# 3) Run the audit
node scripts/api-link-audit.client.mjs || true

# 4) Summarize to markdown for humans
node -e 'const r=require("./reports/client_api_probe.json"); const byUrl={}; for(const x of r){(byUrl[x.url]??=[]).push(x)}; let out="# Client‚ÜíStaff API Probe\\n\\n"; for(const [url,rows] of Object.entries(byUrl)){ out+=`## ${url}\\n`; rows.forEach(x=>{ out+=`- **${x.method}** ‚Üí status: ${x.status??"ERR"}; error: ${x.error??"-"}; CORS[origin:${x.cors?.allowOrigin??"-"}]\\n`; }); out+="\\n"; } require("fs").writeFileSync("reports/client_api_probe.md", out); console.log("üìù Wrote reports/client_api_probe.md");'

# 5) Show quick sample
echo "----- SAMPLE (first 20 lines) -----"
head -n 20 reports/client_api_probe.md || true