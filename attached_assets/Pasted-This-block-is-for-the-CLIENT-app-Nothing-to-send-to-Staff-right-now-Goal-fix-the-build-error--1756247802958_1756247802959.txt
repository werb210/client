This block is for the CLIENT app. (Nothing to send to Staff right now.)

Goal: fix the build error (“listDocuments isn’t exported from client/src/lib/api.ts”) and keep Step 5 working even if Staff’s endpoint is unavailable.

1) Update client/src/lib/api.ts — add the types + listDocuments export with a safe fallback.

// client/src/lib/api.ts

// --- Types ---
export type RequiredDocsInput = {
  category?: string;
  country?: string;
  amount?: number;
  lenderId?: string;
  timeInBusinessMonths?: number;
  monthlyRevenue?: number;
  creditScore?: number;
};

export type RequiredDoc =
  | { key: string; label: string; required: boolean; reason?: string }
  | string;

// --- Fallbacks by category (used if server isn't ready) ---
const DOCS_FALLBACK: Record<string, RequiredDoc[]> = {
  "Working Capital": [
    { key: "bank_3m", label: "Last 3 months bank statements", required: true },
    { key: "void_cheque", label: "Void cheque", required: true },
    { key: "gov_id", label: "Government-issued ID", required: true },
  ],
  "Business Line of Credit": [
    { key: "bank_6m", label: "Last 6 months bank statements", required: true },
    { key: "yr_fin", label: "Most recent year financials or NOA", required: false },
  ],
  "Term Loan": [
    { key: "tax_returns", label: "Most recent business tax return", required: true },
    { key: "fin_statements", label: "YTD financial statements", required: true },
  ],
  "Equipment Financing": [
    { key: "equipment_quote", label: "Equipment quote/invoice", required: true },
    { key: "bank_3m", label: "Last 3 months bank statements", required: true },
  ],
  "Invoice Factoring": [
    { key: "ar_aging", label: "A/R aging report", required: true },
    { key: "sample_invoices", label: "Sample customer invoices", required: true },
  ],
  "Purchase Order Financing": [
    { key: "purchase_orders", label: "Approved purchase orders", required: true },
    { key: "supplier_quote", label: "Supplier quote", required: true },
  ],
};

// --- Exported API used by Step 5 ---
export async function listDocuments(input: RequiredDocsInput): Promise<RequiredDoc[]> {
  try {
    const r = await fetch("/api/required-docs", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify(input),
    });
    if (r.ok) {
      const j = await r.json();
      const docs = j?.documents ?? j?.requiredDocs ?? j?.data ?? [];
      if (Array.isArray(docs) && docs.length) return docs as RequiredDoc[];
    }
  } catch {
    // fall through to fallback
  }
  const cat = input.category ?? "Working Capital";
  return DOCS_FALLBACK[cat] ?? [];
}


2) Ensure the Step-5 component imports the new export and normalizes items.

// client/src/components/DynamicDocumentRequirements.tsx
import { listDocuments } from "@/lib/api";

// when mapping docs to UI items:
const items = (docs ?? []).map((d, i) =>
  typeof d === "string" ? { key: `doc_${i}`, label: d, required: true } : d
);


Build hint: if the component was importing from a relative path, switch to @/lib/api so the bundler resolves it consistently.

Effect: resolves the missing export build error and keeps Step 5 functional (server-backed when available; category-based fallback otherwise).