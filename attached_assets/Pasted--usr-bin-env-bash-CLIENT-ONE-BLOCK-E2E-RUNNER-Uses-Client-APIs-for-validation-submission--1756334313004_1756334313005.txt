#!/usr/bin/env bash
# CLIENT — ONE-BLOCK E2E RUNNER
# - Uses Client APIs for validation/submission
# - (If a Staff ingest is available) mirrors the app to Staff and uploads two test docs
# - Writes a continuity trace to /tmp/submission_continuity.json

set -euo pipefail
need(){ command -v "$1" >/dev/null || { echo "Missing $1"; exit 1; }; }
need curl; need jq

# ---- Config (override as needed) ------------------------------------------------
CLIENT_BASE="${CLIENT_BASE:-http://localhost:5000}"
STAFF_INGEST="${STAFF_INGEST:-http://localhost:5050}"   # <- point at Staff shim (below) if running
STAFF_PRODUCTS="${STAFF_PRODUCTS:-https://staff.boreal.financial/api/v1/products}"
TRACE="${TRACE:-/tmp/submission_continuity.json}"

echo "== CLIENT: fetch Staff products =="
S_RAW="$(curl -fsS "$STAFF_PRODUCTS")"
S_LIST="$(echo "$S_RAW" | jq -c 'if type=="array" then . else .items // [] end')"
[ "$(echo "$S_LIST" | jq 'length')" -gt 0 ] || { echo "No Staff products found."; exit 1; }

# Prefer US then CA, then first
PID="$(echo "$S_LIST" | jq -r '([.[]|select((.countryOffered // .country_offered // .country)=="US")][0].id)
                              //([.[]|select((.countryOffered // .country_offered // .country)=="CA")][0].id)
                              // .[0].id')"
SPROD="$(echo "$S_LIST" | jq -c --arg id "$PID" '.[]|select(.id==$id)')"
SCNTRY="$(echo "$SPROD" | jq -r '.countryOffered // .country_offered // .country // "US"')"

# Derive amounts from product min/max if present, else safe mids
SMIN="$(echo "$SPROD" | jq -r '.minimumLendingAmount // .min_amount // empty')"
SMAX="$(echo "$SPROD" | jq -r '.maximumLendingAmount // .max_amount // empty')"
if [[ -n "${SMIN:-}" && -n "${SMAX:-}" && "${SMIN//[^0-9.]}" != "" && "${SMAX//[^0-9.]}" != "" ]]; then
  AMOUNT="$(( ( ${SMIN%.*:-0} + ${SMAX%.*:-0} ) / 2 ))"
else
  AMOUNT="25000"
fi
STIB="$(echo "$SPROD" | jq -r '.min_time_in_business // empty')"
SREV="$(echo "$SPROD" | jq -r '.min_monthly_revenue // empty')"
TIB="${TIB:-$([ -n "${STIB:-}" ] && echo "${STIB%.*}" || echo 120)}"
REV="${REV:-$([ -n "${SREV:-}" ] && echo "${SREV%.*}" || echo 100000)}"
INDUSTRY="${INDUSTRY:-Technology}"

echo "== CLIENT: build & validate intake =="
INTAKE="$(jq -n --arg pid "$PID" --arg c "$SCNTRY" \
  --argjson amt "$AMOUNT" --argjson tib "$TIB" --argjson rev "$REV" \
  --arg ind "$INDUSTRY" \
  '{product_id:$pid,country:$c,amount:$amt,timeInBusinessMonths:$tib,monthlyRevenue:$rev,industry:$ind}')"

VRESP="$(curl -fsS -X POST "$CLIENT_BASE/api/applications/validate-intake?diag=1" \
  -H 'content-type: application/json' -d "$INTAKE")"
[[ "$(echo "$VRESP" | jq -r '.ok // false')" == "true" ]] || { echo "Validation failed"; echo "$VRESP" | jq .; exit 1; }

echo "== CLIENT: submit application =="
SRESP="$(curl -fsS -X POST "$CLIENT_BASE/api/applications" -H 'content-type: application/json' -d "$INTAKE")"
APP_ID="$(echo "$SRESP" | jq -r '.id // .application_id // .applicationId // empty')"
[ -n "$APP_ID" ] || { echo "No application id returned from Client"; echo "$SRESP" | jq .; exit 1; }
echo "APP_ID=$APP_ID"

# ---- Optional: mirror the application into Staff (if a shim is running) --------
echo "== STAFF MIRROR (optional) =="
MIRROR_OK=false
if curl -fsS "$STAFF_INGEST/api/health" >/dev/null 2>&1; then
  MIRR="$(jq -n --arg id "$APP_ID" --argjson intake "$INTAKE" --argjson prod "$SPROD" \
    '$intake + { id:$id, product_snapshot: $prod, required_documents: ($prod.required_documents // []) }')"
  MRESP="$(curl -fsS -X POST "$STAFF_INGEST/api/applications" -H 'content-type: application/json' -d "$MIRR")"
  MID="$(echo "$MRESP" | jq -r '.id // empty')"
  [[ "$MID" == "$APP_ID" ]] && MIRROR_OK=true
  echo "Mirrored to Staff ingest: $MIRROR_OK"
else
  echo "Staff ingest not detected at $STAFF_INGEST (skipping mirror)."
fi

# ---- Upload two tiny docs (prefer through Client; fall back direct to Staff) ----
mkdir -p /tmp/test_docs
printf "Example bank statement for %s\n" "$APP_ID" > /tmp/test_docs/bank_statement.txt
printf "Example tax return for %s\n" "$APP_ID" > /tmp/test_docs/tax_return.txt
UPLOADED='[]'

upload_try(){
  local base="$1" ep="$2" file="$3" dtype="$4"
  resp="$(curl -s -w '\n%{http_code}' -X POST "${base}${ep}" \
    -F "file=@${file}" -F "doc_type=${dtype}" -F "application_id=${APP_ID}" 2>/dev/null || echo -e "{}\n000")"
  code="$(echo "$resp" | tail -n1)"
  if [[ "$code" == "200" || "$code" == "201" ]]; then
    UPLOADED="$(jq -c --arg t "$dtype" --arg f "$(basename "$file")" '. + [{type:$t,file:$f}]' <<<"$UPLOADED")"
    echo "  ✅ ${dtype} -> ${base}${ep} ($code)"
    return 0
  else
    echo "  ❌ ${dtype} -> ${base}${ep} ($code)"
    return 1
  fi
}

echo "== DOC UPLOAD: bank statement =="
for base in "$CLIENT_BASE" "$STAFF_INGEST"; do
  for ep in "/api/applications/$APP_ID/documents" "/api/applications/$APP_ID/files" "/api/documents" "/api/upload"; do
    upload_try "$base" "$ep" "/tmp/test_docs/bank_statement.txt" "bank_statements" && break 2 || true
  done
done

echo "== DOC UPLOAD: tax return =="
for base in "$CLIENT_BASE" "$STAFF_INGEST"; do
  for ep in "/api/applications/$APP_ID/documents" "/api/applications/$APP_ID/files" "/api/documents" "/api/upload"; do
    upload_try "$base" "$ep" "/tmp/test_docs/tax_return.txt" "tax_returns" && break 2 || true
  done
done

# ---- Write continuity trace -----------------------------------------------------
REQ_DOCS="$(echo "$SPROD" | jq -c '.required_documents // []')"
jq -n \
  --arg app_id "$APP_ID" \
  --argjson intake "$INTAKE" \
  --argjson staff_product "$SPROD" \
  --arg client_base "$CLIENT_BASE" \
  --arg staff_base "$STAFF_PRODUCTS" \
  --arg timestamp "$(date -Iseconds)" \
  --argjson required_documents "$REQ_DOCS" \
  --argjson uploaded_documents "$UPLOADED" \
  '{ meta:{timestamp:$timestamp, client_base:$client_base, staff_base:$staff_base, test:"client_e2e"},
     app_id:$app_id, intake:$intake, staff_product_at_submit:$staff_product,
     required_documents:$required_documents, uploaded_documents:$uploaded_documents }' > "$TRACE"

echo
echo "🎉 CLIENT BLOCK COMPLETE"
echo "   app_id:   $APP_ID"
echo "   trace:    $TRACE"
echo "   uploads:  $(echo "$UPLOADED" | jq 'length') file(s)"
