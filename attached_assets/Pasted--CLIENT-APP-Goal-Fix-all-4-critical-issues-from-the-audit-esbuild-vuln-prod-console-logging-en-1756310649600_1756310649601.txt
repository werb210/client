[CLIENT APP]

Goal: Fix all 4 critical issues from the audit (esbuild vuln, prod console logging, env exposure, innerHTML/XSS) + reduce bundle size. Copy/paste the edits and commands below in order.

# 1) package.json — pin safe esbuild, add scripts, guard console in builds
# ----------------------------------------------------------------------
# FILE: client/package.json  (merge fields; add if missing)
{
  "overrides": {
    "esbuild": "^0.25.0"
  },
  "scripts": {
    "prebuild": "node -e \"try{require('fs').statSync('.env');console.log('⚠️  .env present – make sure secrets are NOT committed');}catch{}\"",
    "build": "vite build",
    "build:prod": "cross-env NODE_ENV=production vite build",
    "sec:scan": "node ./scripts/sec-qa.js",
    "postinstall": "node -e \"console.log('✅ esbuild pinned to', require('esbuild/package.json').version)\""
  },
  "devDependencies": {
    "cross-env": "^7.0.3",
    "dompurify": "^3.0.9"
  }
}

# 2) .gitignore — ensure env files never commit
# ---------------------------------------------
# FILE: .gitignore  (append lines)
.env
.env.* 
!.env.example

# 3) Vite config — strip console/debugger in production & split bundles
# ---------------------------------------------------------------------
# FILE: client/vite.config.ts  (replace/merge build section)
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig(({ mode }) => ({
  plugins: [react()],
  esbuild: mode === 'production' ? { drop: ['console', 'debugger'] } : {},
  build: {
    sourcemap: false,
    target: 'es2019',
    chunkSizeWarningLimit: 700,
    rollupOptions: {
      output: {
        manualChunks: {
          react: ['react', 'react-dom'],
          charts: ['recharts'],
          vendor: ['zustand','@tanstack/react-query']
        }
      }
    }
  }
}));

# 4) Production console guard — silence log/info/debug at runtime (prod only)
# ---------------------------------------------------------------------------
# FILE: client/src/lib/console-guard.ts
/* istanbul ignore file */
if (import.meta.env.PROD) {
  const noop = () => {};
  // keep errors/warnings; silence noisy logs in prod
  console.log = noop;
  console.info = noop;
  console.debug = noop;
}

# 5) Load the guard before anything else
# --------------------------------------
# FILE: client/src/main.tsx  (top of file, first import)
import './lib/console-guard';

# 6) Safe HTML utilities (DOMPurify) to replace innerHTML/dangerouslySetInnerHTML
# -------------------------------------------------------------------------------
# FILE: client/src/lib/safeHtml.tsx
import DOMPurify from 'dompurify';
import React from 'react';

export function sanitize(html: string) {
  return DOMPurify.sanitize(html, {
    ALLOWED_ATTR: ['class','href','target','rel','aria-*','role'],
    ALLOWED_TAGS: ['b','i','u','em','strong','a','p','span','div','ul','ol','li','br','small','code','pre','table','thead','tbody','tr','th','td','svg','path'],
    RETURN_TRUSTED_TYPE: false
  });
}

export function setSafeHtml(el: HTMLElement, html: string) {
  el.innerHTML = sanitize(html);
}

export const SafeHtml: React.FC<{ html: string; className?: string }> = ({ html, className }) => (
  <div className={className} dangerouslySetInnerHTML={{ __html: sanitize(html) }} />
);

# 7) Replace audit-flagged innerHTML usages (4 files)
# ---------------------------------------------------
# A) FILE: client/src/utils/cacheManager.ts
# Find lines that do: el.innerHTML = someHtml;
# REPLACE with:
import { setSafeHtml } from '@/lib/safeHtml';
// ...
setSafeHtml(el, someHtml);

# B) FILE: client/src/lib/pwa.ts
# Replace any element.innerHTML = content with setSafeHtml(element, content)
import { setSafeHtml } from '@/lib/safeHtml';
// ...
setSafeHtml(promptRoot, markup);

# C) FILE: client/src/components/ui/chart.tsx
# If using dangerouslySetInnerHTML or innerHTML for SVG snippets:
import { SafeHtml } from '@/lib/safeHtml';
// ...
return <SafeHtml html={svgMarkup} />;

# D) FILE: client/src/pages/MySearch.tsx
# Replace any direct HTML insertion:
import { SafeHtml } from '@/lib/safeHtml';
// ...
{resultHtml && <SafeHtml html={resultHtml} />}

# 8) Harden window.open/postMessage usage
# ---------------------------------------
# FILE: client/src/lib/safeOpen.ts
export function safeOpen(url: string, target: '_blank'|'_self'|'_parent'|'_top' = '_blank') {
  const w = window.open(url, target, 'noopener,noreferrer');
  if (w) try { w.opener = null; } catch {}
  return w;
}
# Replace calls:
# window.open(url)  ->  safeOpen(url)
# postMessage: ensure targetOrigin is explicit (not "*")

# 9) Lint rule to ban console in production builds (keeps warn/error)
# -------------------------------------------------------------------
# FILE: client/.eslintrc.cjs  (add/merge rules)
module.exports = {
  rules: {
    'no-console': process.env.NODE_ENV === 'production'
      ? ['error', { allow: ['warn', 'error'] }]
      : 'off'
  }
};

# 10) Security QA script (single runner)
# --------------------------------------
# FILE: client/scripts/sec-qa.js
#!/usr/bin/env node
const { execSync } = require('node:child_process');
const sh = (c)=>execSync(c,{stdio:'pipe'}).toString().trim();
const rg = (p)=>{ try{ return sh(`rg -n "${p}" client/src | wc -l`);}catch{return '0';} };
console.log('== Security QA ==');
try {
  console.log('esbuild version:', sh('node -e "console.log(require(\'esbuild/package.json\').version)"'));
} catch { console.log('esbuild version: (not found)'); }
console.log('innerHTML refs:', rg('\\binnerHTML\\b'));
console.log('dangerouslySetInnerHTML refs:', rg('dangerouslySetInnerHTML'));
console.log('console.log/info/debug refs:', rg('console\\.(log|info|debug)\\('));
console.log('window.open refs:', rg('window\\.open\\('));
console.log('postMessage refs:', rg('\\bpostMessage\\('));
try {
  sh('npm run build:prod');
  console.log('dist size (KB):', sh(`du -sk client/dist | awk '{print $1/1024}'`));
} catch (e) {
  console.log('build failed:', e?.message || e);
  process.exit(1);
}
console.log('✅ Security QA complete');

# 11) Run the fixes
# -----------------
cd client
npm i
npm run build:prod
npm run sec:scan

# 12) Replit / environment hygiene
# --------------------------------
# • Move secrets to Replit "Secrets" tab (VITE_* only for values needed in client)
# • Ensure only VITE_* variables are referenced in code.
# • Remove committed env files if any slipped in:
#   git rm --cached .env .env.*  # (do NOT delete locally)
#   git commit -m "chore: remove env files from repo"

# 13) Bundle-size trims (optional, improves mobile)
# ------------------------------------------------
# Lazy-load heavy pages:
# FILE: client/src/pages/HeavyCharts.tsx  (example)
import React from 'react';
const Charts = React.lazy(() => import('./Charts'));
export default function HeavyCharts() {
  return <React.Suspense fallback={null}><Charts/></React.Suspense>;
}

# 14) Verification checklist (must pass)
# --------------------------------------
# A) Dependency vuln gone:
node -e "console.log(require('esbuild/package.json').version)"  # >= 0.25.0
# B) No innerHTML/dangerous insertions left (only in safeHtml.tsx):
npm run sec:scan  # innerHTML==0 (or only safeHtml.tsx), dangerouslySetInnerHTML==0
# C) Console stripped in prod:
npm run build:prod && rg -n 'console\\.(log|info|debug)\\(' dist || true  # expect none
# D) Bundle size <= ~900 KB main (improve over time), chunks created:
ls -lh dist/assets | sort -k5 -h
# E) App boots and Step 2/Step 5 still work (manual click-through)

Outcome:
• esbuild vulnerability removed (pinned ≥0.25.0)
• console logs stripped in production (vite esbuild.drop + runtime guard)
• env files protected (.gitignore; secrets moved to Replit)
• XSS surface reduced (DOMPurify + SafeHtml; no raw innerHTML)
• Bundle size improved with code-splitting and vendor chunks
