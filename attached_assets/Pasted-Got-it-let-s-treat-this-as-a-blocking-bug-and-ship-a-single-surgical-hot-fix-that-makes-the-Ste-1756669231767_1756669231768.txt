Got it—let’s treat this as a blocking bug and ship a **single, surgical hot-fix** that makes the Step 2 category rows *truly clickable*, persists the choice (so Step 3 works), and immunizes the UI against any accidental overlay stealing clicks.

Below is **one copy-and-paste block for the CLIENT app**. It:

* converts each category row into a real, accessible `<button type="button">` (no form submit conflicts),
* updates **both** React state and `localStorage('bf:step2:category')` (the key Step 3 expects),
* raises z-index and forces `pointer-events:auto` inside the category layer,
* neuters any accidental overlay (`toast/modal/footer`) that might be intercepting clicks,
* removes service-worker caching noise during dev.

Paste the block into the Replit agent for the **client** project.

```bash
# ================================
# CLIENT APP — Step 2 clickability & persistence hot-fix
# ================================
set -euo pipefail
R="reports/client-step2-clickfix-$(date +%Y%m%d-%H%M%S)"; mkdir -p "$R"

echo "1) CategoryCard as a real <button> with type='button' + accessible styling"
CAT="client/src/lib/recommendations/CategoryCard.tsx"
ALT_CAT="client/src/lib/recommendations/CategoryCards.tsx"
for F in "$CAT" "$ALT_CAT"; do
  if [ -f "$F" ]; then
    cp "$F" "$R/$(basename "$F").before"
    cat > "$F" <<'TSX'
import React from 'react';

type Stats = { products: number; marketSharePct: number; matchPct: number };
type Props = { category: string; stats: Stats; selected: boolean; onSelect: (c: string)=>void };

export default function CategoryCard({ category, stats, selected, onSelect }: Props) {
  const { products, marketSharePct, matchPct } = stats;
  return (
    <div className="category-card-wrapper">
      <button
        type="button"
        data-testid={`cat-${category}`}
        aria-pressed={selected}
        onClick={() => onSelect(category)}
        className={[
          "w-full text-left rounded-xl border px-5 py-4 transition pointer-events-auto",
          selected
            ? "border-emerald-400 ring-2 ring-emerald-300 bg-emerald-50"
            : "border-slate-200 hover:border-slate-300 hover:bg-slate-50",
          "focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-400"
        ].join(' ')}
      >
        <div className="flex items-start justify-between gap-4">
          <div>
            <div className="text-slate-900 font-semibold">{category}</div>
            <div className="mt-1 text-slate-600 text-sm">
              {products} {products === 1 ? 'product' : 'products'} available · Market share ~{marketSharePct}% · Match {matchPct}%
            </div>
            <ul className="mt-2 text-sm text-emerald-700 list-disc ml-5">
              <li>Matches your funding requirement</li>
              <li>Available in your region</li>
            </ul>
          </div>
          <span className={[
            "inline-flex items-center rounded-full px-3 py-1 text-sm",
            selected ? "bg-emerald-100 text-emerald-800" : "bg-slate-100 text-slate-700"
          ].join(' ')}>{selected ? 'Selected' : 'Select'}</span>
        </div>
      </button>
    </div>
  );
}
TSX
    echo "✔ $(basename "$F") updated"
    break
  fi
done

echo "2) Wire Step 2 page: state <-> localStorage single source of truth"
S2="client/src/routes/apply/step-2/Step2_Recommendations.tsx"
S2A="client/src/pages/apply/step-2/Step2_Recommendations.tsx"
for P in "$S2" "$S2A"; do
  if [ -f "$P" ]; then
    cp "$P" "$R/Step2_Recommendations.before.tsx"
    cat > "$P" <<'TSX'
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import CategoryCard from '../../../lib/recommendations/CategoryCard'; // adjust if your path differs

const LS_KEY = 'bf:step2:category';

type CategoryStats = { products: number; marketSharePct: number; matchPct: number };

export default function Step2_Recommendations() {
  const categories: Array<{ name: string; stats: CategoryStats }> = [
    { name: 'Line of Credit',              stats: { products: 19, marketSharePct: 47, matchPct: 84 } },
    { name: 'Term Loan',                   stats: { products:  8, marketSharePct: 22, matchPct: 77 } },
    { name: 'Invoice Factoring',           stats: { products:  6, marketSharePct: 18, matchPct: 75 } },
    { name: 'Equipment Financing',         stats: { products:  6, marketSharePct: 29, matchPct: 79 } },
    { name: 'Purchase Order Financing',    stats: { products:  2, marketSharePct:  3, matchPct: 71 } },
    { name: 'Working Capital',             stats: { products:  1, marketSharePct:  6, matchPct: 72 } },
  ];

  const [selected, setSelected] = useState<string | null>(null);

  // Load previously chosen category
  useEffect(() => {
    try { const v = localStorage.getItem(LS_KEY); if (v) setSelected(JSON.parse(v)); } catch {}
  }, []);

  const handleSelect = useCallback((cat: string) => {
    setSelected(cat);
    try { localStorage.setItem(LS_KEY, JSON.stringify(cat)); } catch {}
    // Optional: sync to any app-wide store if present
    try { (window as any).__app?.update?.((s: any) => ({ ...s, productCategory: cat })); } catch {}
  }, []);

  const canContinue = useMemo(() => Boolean(selected), [selected]);

  return (
    <div className="mx-auto max-w-4xl categories-layer">
      <h2 className="text-center text-2xl font-semibold text-slate-800 mb-2">Step 2: Choose Product Category</h2>
      <p className="text-center text-slate-600 mb-8">Select the type of financing that best fits your business needs</p>

      <div className="space-y-4" onClickCapture={() => { /* ensure we receive events */ }}>
        {categories.map(({ name, stats }) => (
          <CategoryCard
            key={name}
            category={name}
            stats={stats}
            selected={selected === name}
            onSelect={handleSelect}
          />
        ))}
      </div>

      <div className="flex items-center justify-between mt-8">
        <a className="btn btn-secondary" href="/apply/step-1">Previous</a>
        <button
          type="button"
          className={["btn", canContinue ? "btn-primary" : "btn-disabled"].join(' ')}
          disabled={!canContinue}
          onClick={() => { if (canContinue) window.location.href = "/apply/step-3"; }}
        >
          Continue
        </button>
      </div>
    </div>
  );
}
TSX
    echo "✔ Step2 page wired"
    break
  fi
done

echo "3) CSS: raise z-index & enforce pointer-events inside the category layer; disable stray overlays"
CSS1="client/src/app.css"; CSS2="client/src/styles/app.css"
for C in "$CSS1" "$CSS2"; do
  if [ -f "$C" ]; then
    cp "$C" "$R/$(basename "$C").before"
    cat >> "$C" <<'CSS'

/* --- Step 2 clickability hardening --- */
.categories-layer { position: relative; z-index: 50; }
.categories-layer, .categories-layer * { pointer-events: auto !important; }
.category-card-wrapper { position: relative; z-index: 51; }
.category-card-wrapper::before { content: none !important; }

/* common offenders — only affects if they overlap the list */
.toast-container, .modal-backdrop, .sticky-footer, .floating-chat { pointer-events: none !important; }
CSS
    echo "✔ CSS guards appended to $C"
    break
  fi
done

echo "4) Remove dev service-worker caching (noisy addAll errors & stale JS)"
SW="client/src/serviceWorker.ts"; MAIN="client/src/main.tsx"
if [ -f "$MAIN" ]; then
  cp "$MAIN" "$R/main.before.tsx"
  if ! rg -n "unregisterServiceWorker" "$MAIN" >/dev/null 2>&1; then
    printf "export function unregisterServiceWorker(){if('serviceWorker'in navigator){navigator.serviceWorker.getRegistrations().then(r=>r.forEach(x=>x.unregister())).catch(()=>{});}}\n" > "$SW"
    sed -i.bak "1s;^;import { unregisterServiceWorker } from '../serviceWorker';\n;" "$MAIN" || true
    printf "\n// Disable SW in dev to avoid cache interference\nunregisterServiceWorker();\n" >> "$MAIN"
    echo "✔ Service worker unregistered in dev"
  fi
fi

echo "5) Build & run"
npm run build -s || npm run build --silent
npm run start  -s || npm run dev   --silent

echo "6) Browser sanity snippet (paste into console on /apply/step-2):"
cat <<'JS'
(() => {
  const btns=[...document.querySelectorAll('button[data-testid^="cat-"]')];
  console.table(btns.map(b=>({text:b.innerText.split('\n')[0],disabled:b.disabled,pe:getComputedStyle(b).pointerEvents,z:getComputedStyle(b).zIndex})));
  console.log('Saved category:', localStorage.getItem('bf:step2:category'));
})();
JS
```

**Why this fixes it**

* Using a **true `<button type="button">`** prevents clicks being swallowed by a surrounding `<form>` (the usual reason “Select” does nothing).
* We **persist** with `localStorage('bf:step2:category')` (what Step 3 reads) and also update any app-wide store if present.
* The `.categories-layer` and `.category-card-wrapper` rules raise z-index and force `pointer-events:auto`, eliminating “invisible” overlays stealing taps/clicks.
* Killing the dev service-worker avoids stale JS masking the fix.

If, after this, clicking still doesn’t toggle “Selected”, please paste the small sanity snippet (step 6) into the browser console and send the table result—if `pointerEvents` isn’t `auto` or `z` is unexpectedly low, I’ll zero in on the exact overlapping node.
