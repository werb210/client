Below is **everything the *Client* application needs** so that, the moment a borrower finishes Step 5 (document upload), the Staff API can generate the SignNow invite **without delay** and the user is taken straight to Step 6 (the signing screen).

---

## 1. UX & Control-Flow Checklist (Client-side)

| Step                          | What happens in the browser                                                   | Network call(s)                                                  | Success criteria                                       |
| ----------------------------- | ----------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------------------------------------------------------ |
| **3 & 4**                     | Borrower fills in the ‚ÄúBusiness Details‚Äù & ‚ÄúFinancial Info‚Äù forms             | `PATCH /api/applications/:id` (partial updates)                  | All form fields saved incrementally                    |
| **5 ‚Äì Uploads**               | Borrower uploads each required doc (multi-select or drag-and-drop)            | `POST /api/upload/:applicationId?category=‚Ä¶` ‚Äì one call per file | Server returns `201` + file metadata                   |
| **‚ÄúContinue to Sign‚Äù button** | Disabled until **all** required docs have `status === "uploaded"`             | none                                                             | Prevents premature advance                             |
| **Finalize & Fetch Sign URL** | Spinner shows ‚Üí mutation fires                                                | `POST /api/applications/:id/complete`<br>returns `{ signUrl }`   | <10 s round-trip                                       |
| **Step 6 (Sign)**             | React Router navigates to `/sign/:id` **OR** sets `window.location = signUrl` | none                                                             | Borrower sees SignNow iframe / hosted page immediately |

---

## 2. Client-side Data Contracts

### 2.1 Application payload (Steps 3 & 4)

```ts
// client/src/types/ApplicationForm.ts
export interface ApplicationForm {
  // Business Details
  legalName: string;
  industry: string;
  ein: string;
  entityType: string;
  address: Address;
  // Financial Info
  annualRevenue: number;
  averageBankBalance: number;
  requestedAmount: number;
  useOfFunds: string;
  // üëá any other fields Staff needs to merge into SignNow
}
```

### 2.2 `/api/applications/:id/complete` ‚ÄÉ‚á¢‚ÄÉ**Staff must return:**

```jsonc
{
  "applicationId": "uuid",
  "signUrl": "https://signnow.com/.../invite",
  "status": "signing_sent" // for optimistic UI
}
```

---

## 3. React Query Hooks  (üöÄ copy-paste ready)

```tsx
// client/src/api/applicationHooks.ts
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { api } from './apiRequest';

export const usePatchApplication = (id: string) =>
  useMutation((payload: Partial<ApplicationForm>) =>
    api.patch(`/api/applications/${id}`, payload)
  );

export const useUploadDocument = (applicationId: string) =>
  useMutation((filePayload: FormData) =>
    api.post(`/api/upload/${applicationId}`, filePayload, {
      headers: { 'Content-Type': 'multipart/form-data' },
    })
  );

export const useFinalizeApplication = (id: string) =>
  useMutation(() => api.post(`/api/applications/${id}/complete`));
```

---

## 4. Step 5 component snippet (core logic)

```tsx
// client/src/steps/Step5Documents.tsx
const Step5Documents: React.FC = () => {
  const { applicationId } = useAppContext();
  const [uploads, setUploads] = useState<DocStatus[]>([]);

  const uploadDoc = useUploadDocument(applicationId);
  const finalize  = useFinalizeApplication(applicationId);
  const navigate  = useNavigate();

  const allUploaded = REQUIRED_DOCS.every(req =>
    uploads.some(u => u.category === req && u.status === 'uploaded')
  );

  const handleContinue = () => {
    finalize.mutate(undefined, {
      onSuccess: ({ data }) => {
        // Option A ‚Äì internal route with iframe
        navigate(`/sign/${applicationId}`, { state: { signUrl: data.signUrl } });
        // Option B ‚Äì straight redirect:
        // window.location.href = data.signUrl;
      },
    });
  };

  return (
    <MainLayout>
      <DocumentUploader
        onUpload={(file, category) => {
          const form = new FormData();
          form.append('file', file);
          form.append('category', category);
          uploadDoc.mutate(form, {
            onSuccess: () =>
              setUploads(u => [...u, { category, status: 'uploaded' }]),
          });
        }}
      />

      <Button
        className="mt-6"
        disabled={!allUploaded || finalize.isLoading}
        onClick={handleContinue}
      >
        {finalize.isLoading ? 'Preparing documents‚Ä¶' : 'Continue to Sign'}
      </Button>
    </MainLayout>
  );
};
```

---

## 5. Step 6 (SignNow) route (iframe variant)

```tsx
// client/src/steps/Step6Sign.tsx
const Step6Sign: React.FC = () => {
  const location = useLocation() as Location & { state?: { signUrl?: string } };
  const signUrl  = location.state?.signUrl;

  if (!signUrl) return <Redirect to="/applications" />; // safety

  return (
    <MainLayout title="Review & Sign">
      <iframe
        src={signUrl}
        className="w-full h-[80vh] rounded-xl border"
        allow="fullscreen"
        title="SignNow Document"
      />
      <p className="mt-4 text-sm text-gray-500">
        When you finish signing, simply close this tab or click ‚ÄúDone‚Äù.
      </p>
    </MainLayout>
  );
};
```

---

## 6. Things the **Staff** API must already be doing

1. **Collect** every PATCH from Steps 3 & 4 into the `applications` row
   ‚Üí these fields match the SignNow merge tags in the template.

2. **Watch** upload callbacks (webhook or polling) ‚Üí update `documents` table.

3. **When `/complete` arrives**

   * validate required docs present
   * call `POST /signnow/v2/documents/:templateId/invite` (or SDK) with `prefill_tags`
   * write the returned `signUrl` into `applications.signUrl`
   * return it to the client immediately.

4. **Webhook `/signnow-completed`** updates status ‚Üí the Staff portal can now move the application to ‚ÄúSigned‚Äù or ‚ÄúOff to Lender‚Äù.

---

## 7. Testing Sequence (local or staging)

1. **Fill Steps 3 & 4** ‚Üí confirm `/api/applications/:id` fields patch.
2. **Upload Step 5 docs** ‚Üí files hit `/upload/:id`.
3. **Click ‚ÄúContinue to Sign‚Äù** ‚Üí observe spinner ‚â§ 10 s.
4. **Step 6 loads** with embedded SignNow ‚Üí complete signature.
5. Staff portal should receive webhook and update pipeline stage automatically.

---

### That‚Äôs **all** the Client side needs.

Everything else‚Äîtemplate IDs, merge-tag mapping, SignNow authentication, webhook security‚Äîremains on the **Staff** side.
