### **Client Application**

Below is a focused ‚Äúsurgical fix‚Äù playbook to ensure **all 14 required documents (including ‚ÄúEquipment Quote‚Äù) render in `DynamicDocumentRequirements`** and to retire the legacy `buildRequiredDocList` logic that is still trimming the list to 5.

---

#### 1. Remove the legacy helper everywhere

```bash
# from the client workspace root
grep -R "buildRequiredDocList" src --include="*.ts*" -n
```

* Delete every import **and** call; it served the older single-product flow and is now redundant.
* Commit one small refactor PR that touches nothing else.

---

#### 2. Refactor `DynamicDocumentRequirements.tsx`

```tsx
// client/src/components/DynamicDocumentRequirements.tsx
import { useEffect, useState } from "react";

interface DynamicDocumentRequirementsProps {
  requirements: string[];          // already the 14-item intersection
}

export default function DynamicDocumentRequirements({
  requirements,
}: DynamicDocumentRequirementsProps) {
  const [docs, setDocs] = useState<string[]>([]);

  /* 1Ô∏è‚É£ Always accept whatever the parent sends */
  useEffect(() => {
    setDocs(requirements);
    console.debug("üìÑ Final visible doc list:", requirements);
  }, [requirements]);

  /* 2Ô∏è‚É£ Render the list verbatim */
  return (
    <ul className="space-y-2">
      {docs.map((doc) => (
        <li key={doc} className="flex items-center gap-2">
          {/* Swap for your existing icon component if any */}
          <span className="i-lucide-file-text h-5 w-5 shrink-0" />
          <span>{doc}</span>
        </li>
      ))}
    </ul>
  );
}
```

**Key changes**

| Old behaviour                                           | New behaviour                               |
| ------------------------------------------------------- | ------------------------------------------- |
| Local call to `buildRequiredDocList()` ‚Üí returned **5** | Accept the `requirements` prop **as-is**    |
| Internal ‚Äúunique/compact‚Äù post-filter                   | *Removed*‚Äîintersection step already unique  |
| No explicit console trace                               | Adds `console.debug` to verify the 14 items |

---

#### 3. Verify the prop chain

1. **Intersection step** (likely in your step-5 container) should now:

   ```ts
   console.debug("‚úÖ Intersection result:", intersectionArray); // length 14
   ```
2. Pass that array directly:

   ```tsx
   <DynamicDocumentRequirements requirements={intersectionArray} />
   ```
3. Browser console should show:

   ```
   ‚úÖ Intersection result: (14) ["Bank Statements", ‚Ä¶ "Equipment Quote"]
   üìÑ Final visible doc list: (14) [‚Ä¶]
   ```

---

#### 4. Regression test

* **Unit test** with Jest + React Testing Library:

```ts
import { render, screen } from "@testing-library/react";
import DynamicDocumentRequirements from "./DynamicDocumentRequirements";

test("renders all provided requirements", () => {
  const requirements = ["Equipment Quote", "Tax Returns"];
  render(<DynamicDocumentRequirements requirements={requirements} />);
  requirements.forEach((doc) =>
    expect(screen.getByText(doc)).toBeInTheDocument()
  );
});
```

* **Manual test**: run the full client flow selecting a product that demands an ‚ÄúEquipment Quote‚Äù. The upload widget should now list **14/14** items.

---

### **Staff Application**

No changes required for this issue; the bug is isolated to the client-side rendering logic. (Continue with Twilio feature mounting separately.)

---

**That‚Äôs it‚Äîremove the stale helper, accept the prop verbatim, and confirm the console now shows the full 14-document list.** Let me know if any item still refuses to appear!
