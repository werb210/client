[CLIENT APP]

Goal: unbreak the build and make Step 5 “required docs” work even if the Staff endpoint isn’t ready.

What you’ll paste:

Add + export listDocuments (with safe fallback) to client/src/lib/api.ts.

Ensure the component imports from @/lib/api and can handle both object + string doc shapes.

// client/src/lib/api.ts
// ...existing imports/types...
export type RequiredDocsInput = {
  category?: string;
  country?: string;
  amount?: number;
  lenderId?: string;
  timeInBusinessMonths?: number;
  monthlyRevenue?: number;
  creditScore?: number;
};

export type RequiredDoc =
  | { key: string; label: string; required: boolean; reason?: string }
  | string;

// Minimal, sensible fallback sets by category
const DOCS_FALLBACK: Record<string, RequiredDoc[]> = {
  "Working Capital": [
    { key: "bank_3m", label: "Last 3 months bank statements", required: true },
    { key: "void_cheque", label: "Void cheque", required: true },
    { key: "gov_id", label: "Government-issued ID", required: true },
  ],
  "Business Line of Credit": [
    { key: "bank_6m", label: "Last 6 months bank statements", required: true },
    { key: "yr_fin", label: "Most recent year financials or NOA", required: false },
  ],
  "Term Loan": [
    { key: "tax_returns", label: "Most recent business tax return", required: true },
    { key: "fin_statements", label: "YTD financial statements", required: true },
  ],
  "Equipment Financing": [
    { key: "equipment_quote", label: "Equipment quote/invoice", required: true },
    { key: "bank_3m", label: "Last 3 months bank statements", required: true },
  ],
  "Invoice Factoring": [
    { key: "ar_aging", label: "A/R aging report", required: true },
    { key: "sample_invoices", label: "Sample customer invoices", required: true },
  ],
  "Purchase Order Financing": [
    { key: "purchase_orders", label: "Approved purchase orders", required: true },
    { key: "supplier_quote", label: "Supplier quote", required: true },
  ],
};

export async function listDocuments(input: RequiredDocsInput): Promise<RequiredDoc[]> {
  // Try Staff endpoint first (works with your optional-auth/public setup)
  try {
    const r = await fetch("/api/required-docs", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify(input),
    });
    if (r.ok) {
      const j = await r.json();
      const docs = j?.documents ?? j?.requiredDocs ?? j?.data ?? [];
      if (Array.isArray(docs) && docs.length) return docs as RequiredDoc[];
    }
  } catch {/* fall through to fallback */}
  // Fallback by category so Step 5 never blocks
  const cat = input.category ?? "Working Capital";
  return DOCS_FALLBACK[cat] ?? [];
}

// client/src/components/DynamicDocumentRequirements.tsx
// Ensure the import points at the api module that now exports listDocuments
import { listDocuments } from "@/lib/api";

// When rendering, normalize both string and object doc shapes:
const items = (docs ?? []).map((d, i) =>
  typeof d === "string"
    ? { key: `doc_${i}`, label: d, required: true }
    : d
);


Build hint: if you previously imported from a relative path, switch to @/lib/api (or your project’s alias) so the bundler resolves it correctly.

What this fixes right now: the missing export error; Step 5 will work against the Staff endpoint if present, and otherwise gracefully falls back so the client can deploy.