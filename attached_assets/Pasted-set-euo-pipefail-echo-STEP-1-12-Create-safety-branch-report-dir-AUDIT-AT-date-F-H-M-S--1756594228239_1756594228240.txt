set -euo pipefail
echo "STEP 1/12 Create safety branch & report dir"
AUDIT_AT="$(date +%F_%H-%M-%S)"
R="reports/client-rollback-dedupe-align-$AUDIT_AT"
git checkout -B chore/client-rollback-align || git checkout -b chore/client-rollback-align
mkdir -p "$R"

echo "STEP 2/12 Identify rollback point (prefer last commit mentioning 'Checkpoint' or 'stable')"
git log --pretty=format:'%h %s' -n 50 | tee "$R/00_gitlog.txt"
RB_HASH="$(git log --grep='Checkpoint made\|stable\|production-ready' --pretty=format:%h -n 1 || true)"
if [ -z "${RB_HASH:-}" ]; then
  RB_HASH="$(git rev-parse --short HEAD~5)" # fallback 5 commits back
fi
echo "Selected rollback: $RB_HASH" | tee "$R/01_rollback.txt"

echo "STEP 3/12 Soft reset (preserve untracked), then hard restore working tree to RB_HASH"
git branch backup/pre-rollback-$(date +%s)
git reset --hard "$RB_HASH"

echo "STEP 4/12 Inventory obvious duplicate files"
rg -nS "(copy|backup|legacy|old|temp|bak)\.|\.bak|\.old" client | tee "$R/10_dupes.txt" >/dev/null || true
find client -type f -name "*copy*" -o -name "*backup*" -o -name "*.bak" -o -name "*legacy*" -o -name "*old*" | tee "$R/11_dupe_files.txt" >/dev/null || true

echo "STEP 5/12 Quarantine duplicates (non-destructive move to .trash)"
TRASH=".trash-client-$AUDIT_AT"
mkdir -p "$TRASH"
while read -r f; do
  [ -n "$f" ] && [ -f "$f" ] && git mv "$f" "$TRASH/$(basename "$f")" || true
done < <(cat "$R/11_dupe_files.txt")
echo "Moved client duplicates to $TRASH" | tee -a "$R/20_actions.txt"

echo "STEP 6/12 Ensure product fetcher targets Staff API correctly"
# Report references; do not blindly editâ€”prefer central fetcher if present
rg -nS "fetchProducts|/v1/products|/lenders|/required-docs" client | tee "$R/12_product_refs.txt" >/dev/null || true

# If a central fetcher exists, normalize it to prefer /lenders and fallback to /v1/products
FETCHER="client/src/api/products.ts"
if [ -f "$FETCHER" ]; then
  cp "$FETCHER" "$R/products.ts.bak"
  node - <<'NODE'
    const fs=require('fs'), p=process.argv[1];
    let s=fs.readFileSync(p,'utf8');
    if(!/function\s+fetchProducts/.test(s)){
      s += `
export async function fetchProducts(base=import.meta.env.VITE_STAFF_API_URL, tok=import.meta.env.VITE_CLIENT_APP_SHARED_TOKEN){
  const hdr={Authorization:\`Bearer \${tok}\`};
  async function j(u){const r=await fetch(u,{headers:hdr}); if(!r.ok) throw new Error(\`HTTP \${r.status}\`); return r.json();}
  try{ return await j(\`\${base}/lenders\`);}catch(_){
    try{ return await j(\`\${base}/v1/products\`);}catch(e){ throw e; }
  }
}
`;
      fs.writeFileSync(p,s);
    }
NODE
  "$FETCHER"
else
  echo "INFO: No central products.ts; leaving as-is (see $R/12_product_refs.txt)" | tee -a "$R/20_actions.txt"
fi

echo "STEP 7/12 Production safeguards"
# Enforce no local fallback in production
echo "VITE_LOCAL_FALLBACK=false" > "$R/preview-env.txt"
echo "Set this in Deployment env: VITE_LOCAL_FALLBACK=false" | tee -a "$R/20_actions.txt"

echo "STEP 8/12 Verify env/token basics (read-only)"
BASE="${VITE_STAFF_API_URL:-https://staff.boreal.financial/api}"
TOK="${VITE_CLIENT_APP_SHARED_TOKEN:-$VITE_CLIENT_APP_SHARED_TOKEN}"
{
  echo "BASE=$BASE"
  echo "token_fp: $(node -e 'const c=require(\"crypto\");const s=process.env.VITE_CLIENT_APP_SHARED_TOKEN||\"\";console.log(c.createHash(\"sha256\").update(s).digest(\"hex\").slice(0,12))')"
} | tee "$R/30_env.txt"

echo "STEP 9/12 Live probes (read-only) to confirm Step 2/5 data sources"
{
  for p in "/lenders" "/v1/products" "/required-docs"; do
    code=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $TOK" "$BASE$p" || echo 000)
    cnt=$(curl -s -H "Authorization: Bearer $TOK" "$BASE$p" | jq 'if type=="array" then length else .count//null end' 2>/dev/null || echo "?")
    echo "GET $p -> $code  (count: $cnt)"
  done
} | tee "$R/31_live.txt"

echo "STEP 10/12 Quick static checks that Step 2 & 5 read from API (not local cache)"
rg -nS "FormDataContext|amountRequested|country" client | tee "$R/40_ctx_refs.txt" >/dev/null || true
rg -nS "(Step2|Recommendation).*fetchProducts" client | tee "$R/41_step2_refs.txt" >/dev/null || true
rg -nS "(Step5|Document).*required(-|)docs|/required-docs" client | tee "$R/42_step5_refs.txt" >/dev/null || true

echo "STEP 11/12 Build (no server run)"
npm run build >/dev/null 2>&1 || true

echo "STEP 12/12 Commit"
git add -A
git commit -m "chore(client): rollback to clean state; quarantine dupes; normalize product fetcher; prod no-local-fallback" || true

echo "FINAL SUMMARY -> $R (open 00_gitlog.txt, 01_rollback.txt, 12_product_refs.txt, 31_live.txt, 41_step2_refs.txt, 42_step5_refs.txt)"
