#!/usr/bin/env bash
# CLIENT API AUDIT (read-only). Verifies that client-proxied endpoints mirror Staff truth,
# detects wrong-path usage or stale cache, and exercises validate-intake via client path.
set -euxo pipefail

# ── Config (override via env) ────────────────────────────────────────────────────
CLIENT_BASE="${CLIENT_BASE:-http://localhost:5000}"
STAFF_BASE="${STAFF_BASE:-https://staff.boreal.financial}"

C_LEGACY="$CLIENT_BASE/api/lender-products"
C_V1="$CLIENT_BASE/api/v1/products"
C_VALIDATE="$CLIENT_BASE/api/applications/validate-intake"

S_LEGACY="$STAFF_BASE/api/lender-products"
S_V1="$STAFF_BASE/api/v1/products"

EXPECT_CA="${EXPECT_CA:-17}"
EXPECT_US="${EXPECT_US:-25}"

command -v curl >/dev/null || { echo "curl required"; exit 1; }
command -v jq >/dev/null || { echo "jq required"; exit 1; }

echo "[INFO] Client base: $CLIENT_BASE"
echo "[INFO] Staff  base: $STAFF_BASE"

# ── 1) Pull client & staff V1 (truth) ───────────────────────────────────────────
CV1_RAW="$(curl -fsS "$C_V1")"
CV1_ITEMS="$(printf '%s' "$CV1_RAW" | jq -c '.items // (if type=="array" then . else [] end)')"
CTOT="$(printf '%s' "$CV1_ITEMS" | jq 'length')"
echo "[CLIENT v1] total=$CTOT"
printf '%s' "$CV1_RAW" | jq '.items[0] // {} | {id,product_name,country,category,min_amount,max_amount,min_time_in_business,min_monthly_revenue,required_documents}'

SV1_RAW="$(curl -fsS "$S_V1")"
SV1_ITEMS="$(printf '%s' "$SV1_RAW" | jq -c '.items // (if type=="array" then . else [] end)')"
STOT="$(printf '%s' "$SV1_ITEMS" | jq 'length')"
echo "[STAFF v1] total=$STOT"

# ── 2) Country distribution comparison ──────────────────────────────────────────
C_CA="$(printf '%s' "$CV1_ITEMS" | jq '[.[] | select((.country // .countryOffered // "NULL")|ascii_upcase=="CA")] | length')"
C_US="$(printf '%s' "$CV1_ITEMS" | jq '[.[] | select((.country // .countryOffered // "NULL")|ascii_upcase=="US")] | length')"
S_CA="$(printf '%s' "$SV1_ITEMS" | jq '[.[] | select((.country // .countryOffered // "NULL")|ascii_upcase=="CA")] | length')"
S_US="$(printf '%s' "$SV1_ITEMS" | jq '[.[] | select((.country // .countryOffered // "NULL")|ascii_upcase=="US")] | length')"

echo "[CLIENT v1] CA=$C_CA US=$C_US"
echo "[STAFF  v1] CA=$S_CA US=$S_US"
[ "$S_CA" -eq "$EXPECT_CA" ] || { echo "❌ Staff CA not at expected $EXPECT_CA"; exit 2; }
[ "$S_US" -eq "$EXPECT_US" ] || { echo "❌ Staff US not at expected $EXPECT_US"; exit 2; }
[ "$C_CA" -eq "$S_CA" ] || { echo "❌ Client vs Staff CA mismatch (stale cache or wrong path)"; exit 3; }
[ "$C_US" -eq "$S_US" ] || { echo "❌ Client vs Staff US mismatch (stale cache or wrong path)"; exit 3; }

# ── 3) Field-by-field equality check (id → country/category/min/max) ────────────
MISMATCHES="$(jq -n --argjson c "$CV1_ITEMS" --argjson s "$SV1_ITEMS" '
  def idx(a): reduce a[] as $x ({}; .[$x.id] = {country: ($x.country // $x.countryOffered // "NULL"),
                                             category: ($x.category // $x.productCategory // "NULL"),
                                             min_amount: ($x.min_amount // $x.minimumLendingAmount // null),
                                             max_amount: ($x.max_amount // $x.maximumLendingAmount // null)});
  (idx($c) as $cm | idx($s) as $sm |
   [ keys_unsorted[] as $id
     | select($cm[$id] != null and $sm[$id] != null)
     | {id:$id, client:$cm[$id], staff:$sm[$id]}
     | select(.client.country != .staff.country or
              .client.category != .staff.category or
              (.client.min_amount // null) != (.staff.min_amount // null) or
              (.client.max_amount // null) != (.staff.max_amount // null))
   ] | length )')"
echo "[CHECK] field-level mismatches (country/category/min/max): $MISMATCHES"
[ "$MISMATCHES" -eq 0 ] || { echo "❌ Client fields diverge from Staff"; exit 4; }

# ── 4) validate-intake via CLIENT path (happy & mismatch) ───────────────────────
PID_US="$(printf '%s' "$CV1_ITEMS" | jq -r '[.[] | select((.country // .countryOffered // "")|ascii_upcase=="US")][0]?.id // empty')"
PID_CA="$(printf '%s' "$CV1_ITEMS" | jq -r '[.[] | select((.country // .countryOffered // "")|ascii_upcase=="CA")][0]?.id // empty')"

if [ -n "$PID_US" ]; then
  echo "[CLIENT validate] US happy path"
  curl -fsS -X POST "$C_VALIDATE" -H "Content-Type: application/json" \
    -d "$(jq -n --arg pid "$PID_US" '{product_id:$pid,country:"US",amount:25000,timeInBusinessMonths:24,monthlyRevenue:5000,industry:"Technology"}')" \
    | jq '{ok,errors,product:{id,country}}'
  echo "[CLIENT validate] US product, CA intake (expect failure)"
  curl -fsS -X POST "$C_VALIDATE" -H "Content-Type: application/json" \
    -d "$(jq -n --arg pid "$PID_US" '{product_id:$pid,country:"CA",amount:25000,timeInBusinessMonths:24,monthlyRevenue:5000,industry:"Technology"}')" \
    | jq '{ok,errors}'
fi

if [ -n "$PID_CA" ]; then
  echo "[CLIENT validate] CA happy path"
  curl -fsS -X POST "$C_VALIDATE" -H "Content-Type: application/json" \
    -d "$(jq -n --arg pid "$PID_CA" '{product_id:$pid,country:"CA",amount:25000,timeInBusinessMonths:24,monthlyRevenue:5000,industry:"Technology"}')" \
    | jq '{ok,errors,product:{id,country}}'
  echo "[CLIENT validate] CA product, US intake (expect failure)"
  curl -fsS -X POST "$C_VALIDATE" -H "Content-Type: application/json" \
    -d "$(jq -n --arg pid "$PID_CA" '{product_id:$pid,country:"US",amount:25000,timeInBusinessMonths:24,monthlyRevenue:5000,industry:"Technology"}')" \
    | jq '{ok,errors}'
fi

# ── 5) Legacy parity (optional) ────────────────────────────────────────────────
echo "[CLIENT legacy] sample + by_country"
CL_RAW="$(curl -fsS "$C_LEGACY")"
CL_LIST="$(printf '%s' "$CL_RAW" | jq -c 'if type=="array" then . else .products end // []')"
printf '%s' "$CL_RAW" | jq '.[0] // .products[0] // {} | {id,productName,countryOffered,minimumLendingAmount,maximumLendingAmount}'
printf '%s' "$CL_LIST" | jq '
  map((.countryOffered // .country // "NULL")|tostring|ascii_upcase) 
  | group_by(.) | map({k:.[0], n:length})'

echo "[DONE] Client API audit complete."
