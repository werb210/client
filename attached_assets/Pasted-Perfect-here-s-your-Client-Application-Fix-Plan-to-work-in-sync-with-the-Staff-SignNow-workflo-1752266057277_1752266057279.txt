Perfect ‚Äî here‚Äôs your **Client Application Fix Plan** to work in sync with the Staff SignNow workflow and ensure all 7 steps operate smoothly, including Step 5 (document upload) and Step 6 (SignNow signing).

---

# üõ† CLIENT APPLICATION FIX PLAN (SIGNNOW WORKFLOW)

### GOAL:

Ensure the client can:

1. ‚úÖ Upload documents (Step 5)
2. ‚úÖ Trigger document signing (Step 6)
3. ‚úÖ Track status after signing (Step 7)

---

## ‚úÖ STEP 1: Validate API Endpoint for Document Upload

**üìç File:** `client/src/lib/staffApi.ts`

### üîß Update Upload Function:

Make sure the document upload endpoint uses `multipart/form-data` correctly:

```ts
export async function uploadDocument(applicationId: string, file: File, documentType: string) {
  const formData = new FormData();
  formData.append('document', file);
  formData.append('documentType', documentType);

  const res = await fetch(`/api/public/upload/${applicationId}`, {
    method: 'POST',
    body: formData,
  });

  if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);
  return await res.json();
}
```

### ‚úÖ Test Upload from `Step5_Upload.tsx`:

Add debug UI if needed:

```tsx
try {
  const response = await uploadDocument(appId, file, 'bank_statements');
  console.log('‚úÖ Uploaded:', response);
} catch (err) {
  console.error('‚ùå Upload failed:', err);
}
```

---

## ‚úÖ STEP 2: Validate SignNow Integration (Step 6)

**üìç File:** `client/src/routes/Step6_SignNowIntegration.tsx`

### üîß Confirm Signing URL Fetch:

Make sure the fetch to the signing URL uses the right application ID and falls back if 404:

```ts
export async function getSignNowSigningUrl(appId: string) {
  const res = await fetch(`/api/applications/${appId}/signnow`);
  if (!res.ok) {
    const text = await res.text();
    console.error('‚ùå SignNow Fetch Error:', text);
    throw new Error(`SignNow fetch failed: ${res.status}`);
  }
  return await res.json();
}
```

### ‚úÖ Embed the IFrame:

```tsx
const { signingUrl } = await getSignNowSigningUrl(appId);
return <iframe src={signingUrl} width="100%" height="600" />;
```

---

## ‚úÖ STEP 3: Monitor Signing Status (Step 7)

**üìç File:** `client/src/routes/Step7_FinalSubmission.tsx`

### üîÑ Poll SignNow Status:

Call status endpoint until `signed: true`:

```ts
export async function checkSigningStatus(appId: string) {
  const res = await fetch(`/api/public/applications/${appId}/signing-status`);
  if (!res.ok) throw new Error('Failed to fetch signing status');
  return await res.json();
}
```

Use `useEffect` or a polling library (e.g. React Query‚Äôs `refetchInterval`) to check every 5s:

```tsx
useEffect(() => {
  const interval = setInterval(async () => {
    const status = await checkSigningStatus(appId);
    if (status.signed) {
      clearInterval(interval);
      setSigned(true);
    }
  }, 5000);

  return () => clearInterval(interval);
}, []);
```

---

## ‚úÖ STEP 4: Add Emergency UI Fallback for Errors

If the staff backend is unreachable or returns HTML/404:

* Show fallback banner:

```tsx
{errorMessage.includes('text/html') && (
  <Alert severity="warning">Backend error: SignNow unavailable. Demo mode active.</Alert>
)}
```

---

## ‚úÖ STEP 5: Production Test Flow (Client)

| Step | Action                           | Expected Behavior                                    |
| ---- | -------------------------------- | ---------------------------------------------------- |
| 1    | Fill out application (Steps 1‚Äì4) | Client receives `applicationId`                      |
| 2    | Upload documents (Step 5)        | Upload success toast/log                             |
| 3    | Load Step 6                      | IFrame appears with embedded SignNow signing URL     |
| 4    | Sign document                    | Webhook triggers backend status update               |
| 5    | Enter Step 7                     | Polling detects `signed: true`, finalization allowed |

---

Let me know if you‚Äôd like Replit to show console logs from each step, or generate a QA checklist to confirm all 7 steps now work in sequence.
