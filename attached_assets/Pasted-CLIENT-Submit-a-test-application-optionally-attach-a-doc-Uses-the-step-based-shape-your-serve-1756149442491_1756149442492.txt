CLIENT — Submit a test application + (optionally) attach a doc

Uses the step-based shape your server expects and preserves external_id.

# 1) Submit (create) an application from the Client side
EXT_ID="poi_$(date +%s)"
curl -s -X POST "$BASE/api/public/applications" \
  -H "Content-Type: application/json" \
  -d '{
        "external_id": "'"$EXT_ID"'",
        "step1": {"requestedAmount": 2000000},
        "step3": {"businessName": "POI Black Label Automation & Electrical"},
        "step4": {"email": "michael.kowalski@blacklabelauto.ca", "firstName": "Michael", "lastName": "Kowalski"}
      }' | jq

# 2) Resolve serverId from external_id (server’s internal UUID)
SERVER_ID=$(psql "$DATABASE_URL" -Atc \
  "SELECT id FROM applications WHERE external_id='${EXT_ID}' LIMIT 1;")
[ -n "$SERVER_ID" ] && echo "SERVER_ID ✅ $SERVER_ID" || echo "SERVER_ID ❌ Not found"

# 3) (Optional) Simulate post-upload doc finalize (what the client does after S3 upload)
# Pretend we already uploaded to S3 and have a fileKey like apps/<serverId>/<file>
curl -s -X POST "$BASE/api/applications/$SERVER_ID/documents/finalize" \
  -H "Content-Type: application/json" \
  -d '{"fileName":"bmo_bank_statement_apr2025.pdf","fileSize":245678,"docType":"bank_statements","fileKey":"apps/'"$SERVER_ID"'/bmo_bank_statement_apr2025.pdf"}' \
  | jq

# PASS/FAIL
[ -n "$SERVER_ID" ] && echo "CLIENT POI ✅ Submission created" || echo "CLIENT POI ❌ Submission failed"


PASS expects: JSON 201/ok on submit; SERVER_ID not empty; finalize returns { "ok": true }.
If FAIL: The submit format is wrong or multiple submission routes are conflicting—ensure only one /api/public/applications is mounted and it accepts step1/3/4.

SERVER/API/DB — Verify storage, mapping, and document rows
# 1) DB row exists and canonical fields are present
psql "$DATABASE_URL" -Atc \
"SELECT id, business_name, contact_email, requested_amount, (fields_canonical IS NOT NULL) AS has_canon
   FROM applications WHERE id='${SERVER_ID}';"

# 2) Board totals (sanity)
curl -s "$BASE/api/pipeline/board" | jq '{total, lanes: (keys | length)}'

# 3) Drawer data returns expected fields for this app
curl -s "$BASE/api/pipeline/cards/$SERVER_ID/application" \
  | jq '{name: .application.businessName, email: .application.email, amount: .application.requestedAmount}'

# 4) Documents list for this app
curl -s "$BASE/api/applications/$SERVER_ID/documents" \
  | jq '{count: (.data|length), sample: (.data[0] // null)}'

# PASS/FAIL
ROW_OK=$(psql "$DATABASE_URL" -Atc "SELECT COUNT(*) FROM applications WHERE id='${SERVER_ID}';")
DOCS_OK=$(curl -s "$BASE/api/applications/$SERVER_ID/documents" | jq '.data|length')
([ "$ROW_OK" = "1" ] && [ "$DOCS_OK" -ge 0 ]) && \
  echo "SERVER/API POI ✅ App & docs endpoints healthy" || \
  echo "SERVER/API POI ❌ Check storage/mounts"


PASS expects: 1 DB row; drawer JSON shows name/email/amount; docs endpoint returns data array (possibly length ≥ 1 if you finalized).
If FAIL:

DB row missing ⇒ submit didn’t store (client format or duplicate endpoints).

Drawer nulls ⇒ mapping not reading fields_canonical.

Docs null ⇒ finalize not called, or routes not mounted, or wrong SERVER_ID.