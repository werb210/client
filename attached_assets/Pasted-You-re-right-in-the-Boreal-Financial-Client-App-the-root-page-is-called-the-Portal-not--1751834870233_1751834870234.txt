You're right — in the **Boreal Financial Client App**, the root page is called the **Portal**, not “Home”. Here's the corrected version of the instructions with that terminology fixed and aligned to your architecture:

---

# ✅ RESTORE ORIGINAL CLIENT PORTAL VIEW

The client app is currently showing a test/status page. You need to **restore the real Portal page** — the one with:

* ✅ “Start Application” buttons
* ✅ Route to `/step-1`
* ✅ Full 7-step workflow
* ❌ *No debug/status screens*

---

## 📍 GOAL

Restore the original **`/` (root)** route to display the **Portal** page — not the debug page.

---

## 🛠 INSTRUCTIONS — Client App Only

### 1. ✅ Fix `main.tsx` (App Bootstrapper)

File: `client/src/main.tsx`

Ensure it points to the real `App` and **not a test or status page**:

```tsx
import React from "react";
import ReactDOM from "react-dom/client";
import { App } from "./App";  // ✅ Must point to App.tsx
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
```

---

### 2. ✅ Fix `App.tsx` (Client Router)

File: `client/src/App.tsx`

This file controls all routes. Restore the **Portal** route (`/`) and 7-step workflow:

```tsx
import { Route, Switch } from "wouter";
import { Portal } from "./pages/Portal";
import { Step1 } from "./pages/application/Step1";
import { Step2 } from "./pages/application/Step2";
// ... other steps

export function App() {
  return (
    <div className="min-h-screen bg-white">
      <Switch>
        <Route path="/" component={Portal} />
        <Route path="/step-1" component={Step1} />
        <Route path="/step-2" component={Step2} />
        {/* Continue up to step 7 */}
      </Switch>
    </div>
  );
}
```

---

### 3. ✅ Restore `Portal.tsx`

File: `client/src/pages/Portal.tsx`

Make sure this file exists and looks like:

```tsx
import { useLocation } from "wouter";

export function Portal() {
  const [, navigate] = useLocation();

  return (
    <div className="flex flex-col items-center justify-center h-screen p-6 bg-gray-50 text-center">
      <h1 className="text-4xl font-bold mb-6">Welcome to Boreal Financial</h1>
      <p className="mb-6 text-gray-600">Start your funding application in minutes.</p>
      <button
        onClick={() => navigate("/step-1")}
        className="bg-blue-600 text-white px-6 py-3 rounded-lg shadow hover:bg-blue-700 transition"
      >
        Start Application
      </button>
    </div>
  );
}
```

This **is the real Portal**, and it’s what should be shown at `/`.

---

### 4. ✅ Rebuild and Restart the App

From Replit shell:

```bash
npm run build
```

Then:

```bash
npm run start
```

---

### 5. ✅ Confirm Server Setup

Ensure your server (likely `server/index.ts`) is serving the **React build** correctly:

```ts
import path from "path";
import express from "express";

const app = express();
app.use(express.static("client/dist"));

app.get("*", (req, res) => {
  res.sendFile(path.resolve("client", "dist", "index.html"));
});
```

> 🔐 Make sure this is used only in production mode — Vite dev server takes over in dev.

---

## ❌ REMOVE THESE TEST ARTIFACTS (If Present)

* `TestPortal.tsx`, `StatusPage.tsx`, or any test JSX shown at `/`
* Any override in `main.tsx` that points to a status page
* Any Vite-only routes injected during crash recovery

---

## ✅ FINAL CHECK

Visit:
🔗 [https://clientportal.boreal.financial](https://clientportal.boreal.financial)

You should now see:

* The correct **Portal** screen
* “Start Application” button
* Navigation to `/step-1`

---

Let me know if you want the original `Portal.tsx` or routing structure fully reconstructed.
