#!/usr/bin/env bash
# ============================
# CLIENT APP — ONE-BLOCK E2E SUBMISSION + TRACE WRITER
# - Picks a Staff V1 product (prefer US, else CA, else first)
# - Builds a compliant intake from Staff truth (safe fallbacks)
# - Validates + submits via Client
# - (Best-effort) uploads two tiny test files
# - Writes /tmp/submission_continuity.json for Staff verification
# ============================

set -euo pipefail
need(){ command -v "$1" >/dev/null || { echo "Missing $1"; exit 1; }; }
need curl; need jq

# ---- Config (override via env if desired)
CLIENT_BASE="${CLIENT_BASE:-http://localhost:5000}"
STAFF_BASE="${STAFF_BASE:-https://staff.boreal.financial}"
TRACE="${TRACE:-/tmp/submission_continuity.json}"

echo "== Fetch Staff V1 catalog =="
S_RAW="$(curl -fsS "$STAFF_BASE/api/v1/products")"
PID="$(echo "$S_RAW" | jq -r '
  ([.[]|select((.countryOffered // .country_offered // .country)=="US")][0].id)
  // ([.[]|select((.countryOffered // .country_offered // .country)=="CA")][0].id)
  // .[0].id
')"
[ -n "$PID" ] && [ "$PID" != "null" ] || { echo "No Staff product found"; exit 1; }

SPROD="$(echo "$S_RAW" | jq -c --arg id "$PID" '.[]|select(.id==$id)')"
SCNTRY="$(echo "$SPROD" | jq -r '.countryOffered // .country_offered // .country // "US"')"

# ---- Derive intake values from Staff constraints (safe fallbacks)
SMIN="$(echo "$SPROD" | jq -r '.minimumLendingAmount // .min_amount // empty')"
SMAX="$(echo "$SPROD" | jq -r '.maximumLendingAmount // .max_amount // empty')"
if [[ -n "${SMIN:-}" && -n "${SMAX:-}" && "${SMIN//[^0-9.]}" != "" && "${SMAX//[^0-9.]}" != "" ]]; then
  AMOUNT="$(( ( ${SMIN%.*:-0} + ${SMAX%.*:-0} ) / 2 ))"
else
  AMOUNT="${AMOUNT:-25000}"
fi
STIB="$(echo "$SPROD" | jq -r '.min_time_in_business // empty')"
SREV="$(echo "$SPROD" | jq -r '.min_monthly_revenue // empty')"
TIB="${TIB:-$([ -n "${STIB:-}" ] && echo "${STIB%.*}" || echo 120)}"
REV="${REV:-$([ -n "${SREV:-}" ] && echo "${SREV%.*}" || echo 100000)}"
IND="${IND:-Technology}"

echo "== Build intake =="
INTAKE="$(jq -n --arg pid "$PID" --arg c "$SCNTRY" \
  --argjson amt "$AMOUNT" --argjson tib "$TIB" --argjson rev "$REV" \
  --arg ind "$IND" \
  '{product_id:$pid,country:$c,amount:$amt,timeInBusinessMonths:$tib,monthlyRevenue:$rev,industry:$ind}')"
echo "$INTAKE" | jq .

echo "== Step 2 validation (/api/applications/validate-intake?diag=1) =="
VRESP="$(curl -s -X POST "$CLIENT_BASE/api/applications/validate-intake?diag=1" -H 'content-type: application/json' -d "$INTAKE")"
echo "$VRESP" | jq .
[[ "$(echo "$VRESP" | jq -r '.ok // false')" == "true" ]] || { echo "Validation failed"; exit 1; }

echo "== Submit application (/api/applications) =="
SRESP="$(curl -s -X POST "$CLIENT_BASE/api/applications" -H 'content-type: application/json' -d "$INTAKE")"
echo "$SRESP" | jq .
APP_ID="$(echo "$SRESP" | jq -r '.id // .application_id // .applicationId // empty')"
[ -n "$APP_ID" ] && [ "$APP_ID" != "null" ] || { echo "No application id returned"; exit 1; }
echo "✅ Application submitted: $APP_ID"

# ---- (Best-effort) document upload probes — optional
echo "== Try uploading 2 tiny test files (best-effort) =="
mkdir -p /tmp/test_docs
printf "Example bank statement for %s\n" "$APP_ID" > /tmp/test_docs/bank_statement.txt
printf "Example tax return for %s\n" "$APP_ID" > /tmp/test_docs/tax_return.txt
UPLOADED='[]'
try_upload(){ 
  local ep="$1" file="$2" dtype="$3"
  local resp; resp="$(curl -s -w '\n%{http_code}' -X POST "$CLIENT_BASE$ep" \
    -F "file=@${file}" -F "doc_type=${dtype}" -F "application_id=${APP_ID}" 2>/dev/null || echo -e "{}\n000")"
  local code; code="$(echo "$resp" | tail -n1)"
  local body; body="$(echo "$resp" | head -n -1)"
  if [[ "$code" == "200" || "$code" == "201" ]]; then
    UPLOADED="$(jq -c --arg t "$dtype" --arg f "$(basename "$file")" '. + [{type:$t,file:$f}]' <<<"$UPLOA
