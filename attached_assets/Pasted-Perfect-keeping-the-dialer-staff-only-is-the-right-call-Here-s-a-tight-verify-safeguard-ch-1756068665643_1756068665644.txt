Perfect—keeping the dialer **staff-only** is the right call. Here’s a tight “verify + safeguard + chatbot health” kit so you can (a) confirm the client app has **zero** dialer code, (b) prevent it from creeping back in, and (c) prove the chatbot greets + captures lead info every time.

---

# 1) Quick verification (terminal)

Run from the **client** repo root:

```bash
# prove there are no dialer bits in the client app
rg -n "dialer|Dialer|Open Dialer|Slide-?in|Twilio.*(call|voice)" client/src || echo "✅ no dialer refs"

# sanity: only “invoice” matches, not “voice calls”
rg -n "voice[^a-z]" client/src | rg -v "invoice" || echo "✅ 'voice' only appears in 'invoice' contexts"

# confirm chatbot component exists
rg -n "ChatBot|FinBot" client/src
```

**Expected:** first two print `✅ …` lines; last one shows `ChatBot.tsx` (FinBot).

---

# 2) Build-time guard (fails CI if someone re-adds a dialer)

Create **client/scripts/no\_dialer\_guard.sh**:

```bash
#!/usr/bin/env bash
set -euo pipefail
rg -n "dialer|Open Dialer|Slide-?in|Twilio.*(call|voice)" client/src && {
  echo "❌ Dialer references found in CLIENT app. Dialer is staff-only."
  exit 1
}
echo "✅ Client app free of dialer code."
```

Wire it into the client build:

**package.json**

```json
{
  "scripts": {
    "ci:preflight": "bash client/scripts/no_dialer_guard.sh",
    "build": "npm run ci:preflight && vite build"
  }
}
```

Add the same step to your GitHub Action for the client.

---

# 3) Chatbot “always greets + lead capture” test (Playwright)

Create **client/tests/chatbot.welcome.spec.ts**:

```ts
import { test, expect } from "@playwright/test";

test("Chatbot greets and captures name+email", async ({ page }) => {
  await page.goto(process.env.CLIENT_BASE || "http://localhost:5000", { waitUntil: "domcontentloaded" });

  // open widget (adjust selector to your chat button)
  await page.getByRole("button", { name: /finbot|chat|need help/i }).click();

  // 1) welcome appears
  await expect(page.getByText(/hi|hello|welcome/i)).toBeVisible({ timeout: 5000 });

  // 2) name prompt
  await page.getByRole("textbox").fill("Jane Tester");
  await page.keyboard.press("Enter");
  await expect(page.getByText(/great|thanks.*jane/i)).toBeVisible({ timeout: 5000 });

  // 3) email prompt
  await page.getByRole("textbox").fill("jane.tester@example.com");
  await page.keyboard.press("Enter");
  await expect(page.getByText(/consent|email ok|privacy/i)).toBeVisible({ timeout: 5000 });

  // 4) consent “yes”
  await page.getByRole("textbox").fill("yes");
  await page.keyboard.press("Enter");
  await expect(page.getByText(/you’re all set|ready|ask me/i)).toBeVisible({ timeout: 5000 });
});
```

Run:

```bash
npx playwright test client/tests/chatbot.welcome.spec.ts
```

---

# 4) If the chatbot doesn’t greet immediately (checklist)

1. **Service worker nuked** (dev/staging):
   In browser console:

   ```js
   (async () => {
     for (const r of await navigator.serviceWorker.getRegistrations()) await r.unregister();
     const keys = await caches.keys(); await Promise.all(keys.map(k => caches.delete(k)));
     sessionStorage.clear(); localStorage.clear(); location.reload(true);
   })();
   ```

   Console after reload should show: **“Disabling service worker in dev/staging mode”**.

2. **Fresh build visible**: open `/__version` — timestamp must be current.

3. **Network**: when opening the bot, you should see a call to your init/chat endpoint (even if it’s HTTP polling). If it 404s, your staff chat endpoint mapping is off; if 401, that’s expected if chat is protected—client should be using the public/polling path.

4. **Fallbacks**: your bot should show a graceful “AI temporarily unavailable” reply if the staff API is down. If not, wire a catch block around the init call to render the canned response.

---

# 5) Staff-only dialer reminder

You asked earlier to restore the floating FAB dialer to **staff** pages only. Keep the dialer component under the staff app and gate it by layout/role:

```tsx
// staff/src/components/GlobalDialerFab.tsx
export default function GlobalDialerFab() {
  // only on staff app, not client
  return (
    <button
      aria-label="Open Dialer"
      className="fixed bottom-6 right-6 h-14 w-14 rounded-full bg-green-500 shadow-lg"
      onClick={() => window.dispatchEvent(new CustomEvent("open-dialer"))}
      data-testid="fab-dialer"
    >
      📞
    </button>
  );
}
```

Mount it once in the **staff** shell/layout (not in the client).

---

# 6) One last “stale UI” guardrail for client (so this doesn’t regress)

* Keep **service worker disabled** in dev/staging; enable only in prod.
* Add `Cache-Control: no-store` on HTML in dev.
* Pin the welcome flow behind deterministic local state (not network) so the first greeting never waits on the API.

---

## TL;DR

* Client app is clean (no dialer) ✅
* Added **build/CI guard** to keep it that way ✅
* Provided a **Playwright test** to prove chatbot greets & captures lead info ✅
* Included **stale cache** eradication + debugging checklist ✅
* Dialer FAB guidance stays **staff-only** ✅

If you want, I can bundle the Playwright test + guard into a PR template so every change runs them automatically.
