#!/usr/bin/env bash
# CLIENT APP â€” ONE-BLOCK E2E TESTER
# - Pulls latest products (optional)
# - Selects a Staff V1 product (USâ†’CAâ†’first)
# - Builds a canonical intake (amount/TIB/revenue derived safely)
# - Validates (Step 2) and Submits application
# - (Best-effort) uploads two sample docs if an endpoint exists
# - Writes /tmp/submission_continuity.json for Staff verification

set -euo pipefail
need(){ command -v "$1" >/dev/null || { echo "Missing $1"; exit 1; }; }
need curl; need jq

# ---- Config (override via env if needed)
CLIENT_BASE="${CLIENT_BASE:-http://localhost:5000}"
STAFF_BASE="${STAFF_BASE:-https://staff.boreal.financial}"
TRACE="${TRACE:-/tmp/submission_continuity.json}"

echo "== CLIENT: optional pull from Staff =="
if curl -fsS -X POST "$CLIENT_BASE/internal/pull-staff-products" -H 'content-type: application/json' -d '{}' >/dev/null; then
  echo "Pulled from Staff âœ”"
else
  echo "Pull endpoint not available (continuing)â€¦"
fi

echo
echo "== Select Staff product (truth source) =="
S_RAW="$(curl -fsS "$STAFF_BASE/api/v1/products")"
PID="$(echo "$S_RAW" | jq -r '([.[]|select((.countryOffered // .country_offered // .country)=="US")][0].id) // ([.[]|select((.countryOffered // .country_offered // .country)=="CA")][0].id) // .[0].id')"
[ -n "$PID" ] && [ "$PID" != "null" ] || { echo "No Staff product found"; exit 1; }
SPROD="$(echo "$S_RAW" | jq -c --arg id "$PID" '.[]|select(.id==$id)')"
SCNTRY="$(echo "$SPROD" | jq -r '.countryOffered // .country_offered // .country // "US"')"
S_DOCS="$(echo "$SPROD" | jq -c '.required_documents // []')"
PNAME="$(echo "$SPROD" | jq -r '.productName // .product_name // .name // "Unknown Product"')"
LNAME="$(echo "$SPROD" | jq -r '.lenderName  // .lender_name  // "Unknown Lender"')"
echo "Chosen: $PNAME ($LNAME) [$SCNTRY] â€” $PID"

echo
echo "== Derive safe constraints & build intake (Step 1â†’2 feed) =="
SMIN="$(echo "$SPROD" | jq -r '.minimumLendingAmount // .min_amount // empty')"
SMAX="$(echo "$SPROD" | jq -r '.maximumLendingAmount // .max_amount // empty')"
if [[ -n "${SMIN:-}" && -n "${SMAX:-}" && "${SMIN//[^0-9.]}" != "" && "${SMAX//[^0-9.]}" != "" ]]; then
  AMOUNT="$(( ( ${SMIN%.*:-0} + ${SMAX%.*:-0} ) / 2 ))"
else
  AMOUNT="${AMOUNT:-25000}"
fi
STIB="$(echo "$SPROD" | jq -r '.min_time_in_business // empty')"
SREV="$(echo "$SPROD" | jq -r '.min_monthly_revenue // empty')"
TIB="${TIB:-$([ -n "${STIB:-}" ] && echo "${STIB%.*}" || echo 120)}"
REV="${REV:-$([ -n "${SREV:-}" ] && echo "${SREV%.*}" || echo 100000)}"
IND="${IND:-Technology}"

INTAKE="$(jq -n \
  --arg pid "$PID" --arg c "$SCNTRY" \
  --argjson amt "$AMOUNT" --argjson tib "$TIB" --argjson rev "$REV" \
  --arg ind "$IND" \
  '{product_id:$pid,country:$c,amount:$amt,timeInBusinessMonths:$tib,monthlyRevenue:$rev,industry:$ind}')"
echo "$INTAKE" | jq '{_intake_preview:.}'

echo
echo "== Step 2: validate-intake (diag tolerant) =="
VRESP="$(curl -s -X POST "$CLIENT_BASE/api/applications/validate-intake?diag=1" -H 'content-type: application/json' -d "$INTAKE" || true)"
OK="$(echo "$VRESP" | jq -r '.ok // empty' 2>/dev/null || true)"
if [[ "$OK" != "true" && -n "$VRESP" ]]; then
  echo "Validation response (non-OK but proceeding):"; echo "$VRESP" | jq . || echo "$VRESP"
else
  echo "Validation OK âœ”"
fi

echo
echo "== Submit application (Step 3/4) =="
SRESP="$(curl -fsS -X POST "$CLIENT_BASE/api/applications" -H 'content-type: application/json' -d "$INTAKE")"
APP_ID="$(echo "$SRESP" | jq -r '.id // .application_id // .applicationId // empty')"
[ -n "$APP_ID" ] && [ "$APP_ID" != "null" ] || { echo "No application id returned"; echo "$SRESP" | jq .; exit 1; }
echo "Application ID: $APP_ID"

echo
echo "== (Best-effort) document uploads (Step 5 prep) =="
mkdir -p /tmp/test_docs
echo "Example bank statement for $APP_ID" > /tmp/test_docs/bank_statement.txt
echo "Example tax return for $APP_ID"     > /tmp/test_docs/tax_return.txt
UPLOADED='[]'
try_upload(){ # endpoint file type
  local ep="$1" file="$2" dtype="$3"
  local resp code body
  resp="$(curl -s -w '\n%{http_code}' -X POST "$CLIENT_BASE$ep" -F "file=@$file" -F "doc_type=$dtype" -F "application_id=$APP_ID" || echo -e "{}\n000")"
  code="$(echo "$resp" | tail -n1)"; body="$(echo "$resp" | head -n -1)"
  if [[ "$code" == "200" || "$code" == "201" ]]; then
    UPLOADED="$(jq -c --arg t "$dtype" --arg f "$(basename "$file")" '. + [{type:$t,file:$f}]' <<<"$UPLOADED")"
    echo "Uploaded $dtype to $ep âœ”"
    return 0
  else
    echo "No upload at $ep ($code)"
    return 1
  fi
}
for ep in "/api/applications/$APP_ID/documents" "/api/applications/$APP_ID/files" "/api/documents" "/api/upload"; do
  try_upload "$ep" "/tmp/test_docs/bank_statement.txt" "bank_statements" && break || true
done
for ep in "/api/applications/$APP_ID/documents" "/api/applications/$APP_ID/files" "/api/documents" "/api/upload"; do
  try_upload "$ep" "/tmp/test_docs/tax_return.txt" "tax_returns" && break || true
done
UPLOAD_COUNT="$(echo "$UPLOADED" | jq 'length')"
echo "Uploaded docs (best-effort): $UPLOAD_COUNT"

echo
echo "== Write continuity trace (stable schema) =="
jq -n \
  --arg app_id "$APP_ID" \
  --argjson intake "$INTAKE" \
  --argjson staff_product "$SPROD" \
  --arg client_base "$CLIENT_BASE" \
  --arg staff_base "$STAFF_BASE" \
  --arg timestamp "$(date -Iseconds)" \
  --argjson required_documents "$S_DOCS" \
  --argjson uploaded_documents "$UPLOADED" \
  '{meta:{timestamp:$timestamp,client_base:$client_base,staff_base:$staff_base,test:"client_e2e_submission"},
    app_id:$app_id,intake:$intake,staff_product_at_submit:$staff_product,
    required_documents:$required_documents,uploaded_documents:$uploaded_documents}' \
  > "$TRACE"

echo
echo "ðŸŽ‰ CLIENT OK â€” wrote $TRACE"
jq '.meta, {app_id, required_documents, uploaded_documents}' "$TRACE"
