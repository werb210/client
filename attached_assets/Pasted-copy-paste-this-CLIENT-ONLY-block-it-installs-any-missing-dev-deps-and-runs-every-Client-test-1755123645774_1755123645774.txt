copy/paste this **CLIENT-ONLY** block. it installs any missing dev deps and runs **every Client test & audit** (typecheck, lint, static duplicate audit, Playwright UI crawl + runtime guard, auth smoke vs Staff, unit tests if present, Lighthouse perf, prod build, consolidated report). itâ€™s idempotent.

---

# ðŸŸ© CLIENT APPLICATION â€” RUN **ALL** TESTS (single, complete block)

```bash
############################################
# BOREAL CLIENT â€¢ RUN EVERYTHING (ALL TESTS)
# Safe to re-run. Outputs reports into ./reports
############################################
set -euo pipefail

ROOT="$(pwd)"
STAMP="$(date +%Y%m%d-%H%M%S)"
REPORT_DIR="reports"
mkdir -p "$REPORT_DIR" scripts tests tests/e2e

# You can override these when running in CI/preview:
export CLIENT_URL="${CLIENT_URL:-http://127.0.0.1:5173}"
export STAFF_URL="${STAFF_URL:-http://127.0.0.1:5000}"
export SLOW_API_MS="${SLOW_API_MS:-1500}"

echo "=== CLIENT FULL SUITE START === $(date)"

echo "== 0) Ensure deps/tools =="
npm i -D --silent \
  typescript @types/node \
  eslint \
  @playwright/test playwright \
  vitest \
  lighthouse-ci \
  ripgrep >/dev/null 2>&1 || true
npx playwright install --with-deps >/dev/null 2>&1 || true

echo "== 1) TypeScript + Lint =="
if [ -f tsconfig.json ]; then
  echo ">>> tsc --noEmit"
  npx tsc --noEmit
else
  echo "[INFO] tsconfig.json not found; skipping typecheck"
fi

if npx -y eslint -v >/dev/null 2>&1; then
  echo ">>> eslint ."
  npx eslint . --ext .ts,.tsx,.js,.jsx || true
else
  echo "[INFO] eslint not configured; skipping lint"
fi

echo "== 2) Static audit (duplicates & heuristics) =="
cat > scripts/static_audit_client.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
echo "=== CLIENT STATIC AUDIT ==="
echo "--- Duplicate data-testid in client/** ---"
rg -No 'data-testid=[\"\x27]([^\"\x27]+)[\"\x27]' client \
 | sed -E 's/.*data-testid=[\"\x27]([^\"\x27]+)[\"\x27].*/\1/' \
 | sort | uniq -d || true

echo "--- Duplicate visible button labels ---"
rg -No '<(Button|button)[^>]*>([^<]{1,120})</\1>' client \
 | sed -E 's/.*>([^<]+)</\1/' | awk '{$1=$1;print}' \
 | sort | uniq -d || true

echo "--- Files with many onClick handlers (top 20) ---"
rg -n --no-heading 'onClick=\{[^}]+\}' client \
 | awk -F: '{print $1}' | sort | uniq -c | sort -nr | head -20
echo "=== DONE (static) ==="
EOF
chmod +x scripts/static_audit_client.sh
bash scripts/static_audit_client.sh | tee "${REPORT_DIR}/client-static-audit-${STAMP}.log"

echo "== 3) Playwright tests: UI crawl + runtime guard =="
# UI Crawl ensures core nav exists and reports runtime duplicates it sees
cat > tests/ui_crawl_client.spec.ts <<'EOF'
import { test, expect } from "@playwright/test";
const START = process.env.CLIENT_URL || "http://127.0.0.1:5173/";
test("UI crawl: nav present & duplicates snapshot", async ({ page }) => {
  await page.goto(START, { waitUntil: "domcontentloaded" });
  const navSelectors = [
    "[data-testid='nav-start-application']",
    "[data-testid='nav-documents']",
    "[data-testid='nav-recommendations']",
    "[data-testid='nav-help']",
  ];
  for (const sel of navSelectors) {
    const el = await page.$(sel);
    expect(el, `Missing nav item ${sel}`).not.toBeNull();
  }
  const elems = page.locator('button,[role="button"],[data-testid],[role="menuitem"],[role="tab"]');
  const map = new Map<string, number>();
  const n = await elems.count();
  for (let i=0;i<n;i++){
    const el = elems.nth(i);
    const text = (await el.textContent()||"").replace(/\s+/g," ").trim();
    const key = text || (await el.getAttribute("data-testid")) || "";
    if (!key) continue;
    map.set(key, (map.get(key)||0)+1);
  }
  const dups = [...map.entries()].filter(([_,c])=>c>1);
  console.log("CLIENT_RUNTIME_DUPLICATES", JSON.stringify(dups, null, 2));
});
EOF

# Runtime guard: no console errors, no 4xx/5xx, no slow APIs
cat > tests/runtime_guard_client.spec.ts <<'EOF'
import { test, expect } from "@playwright/test";
const START = process.env.CLIENT_URL || "http://127.0.0.1:5173/";
const SLOW_MS = Number(process.env.SLOW_API_MS || 1500);
test("runtime guard: no console errors, no broken/slow APIs", async ({ page }) => {
  const errors:string[]=[]; page.on("console", m => { if (m.type()==="error") errors.push(m.text()); });
  const bad:string[]=[]; page.on("response", async r => { if (r.status()>=400) bad.push(`${r.status()} ${r.url()}`); });
  await page.goto(START); await page.waitForLoadState("networkidle");
  const perf = await page.evaluate(()=>performance.getEntriesByType("resource")
    .filter((e:any)=>e.initiatorType==="fetch"||e.initiatorType==="xmlhttprequest")
    .map((e:any)=>({name:e.name,duration:e.duration})));
  const slow = (perf as any[]).filter(p=>p.duration>SLOW_MS);
  expect(errors, "Console errors").toHaveLength(0);
  expect(bad, "Broken network calls").toHaveLength(0);
  expect(slow, `Slow API calls > ${SLOW_MS}ms`).toHaveLength(0);
});
EOF

echo "== 4) Auth smoke (client â†” staff) =="
# Proves the browser session stays logged in and avoids /login loops
cat > tests/e2e/auth_client_smoke.spec.ts <<'EOF'
import { test, expect } from "@playwright/test";
const STAFF = process.env.STAFF_URL || "http://127.0.0.1:5000";
const CLIENT = process.env.CLIENT_URL || "http://127.0.0.1:5173";
test("client keeps session (bf_auth) and does not bounce to /login", async ({ page, request }) => {
  // 1) Ask Staff to mint a test cookie (requires TEST_AUTH_ENABLED=true on Staff)
  const mint = await request.post(`${STAFF}/api/auth/test-login`, { data: {} });
  expect(mint.ok()).toBeTruthy();

  // 2) Load the client app; its API calls should include credentials and succeed
  await page.goto(CLIENT, { waitUntil: "domcontentloaded" });
  // Optional: depending on your app, you can verify a logged-in signal on the UI:
  // await expect(page.locator("[data-testid='user-avatar']")).toBeVisible();

  // 3) Reload shouldn't send you back to /login
  await page.reload();
  // If your app calls /api/auth/user, we trust that it stays 200; else, just ensure no redirect.
  expect(page.url()).toMatch(/^(?!.*\/login)/);
});
EOF

echo "== 5) Run Playwright (all specs) =="
npx playwright test --reporter=list | tee "${REPORT_DIR}/client-playwright-${STAMP}.log" || true

echo "== 6) Unit tests (Vitest/Jest) if present =="
if npm run -s | grep -qE '^ *test(\:|$)'; then
  npm run test | tee "${REPORT_DIR}/client-unit-${STAMP}.log" || true
else
  echo "[INFO] No unit test script found; skipping"
fi

echo "== 7) Production build (vite) =="
if npm run -s | grep -q 'build'; then
  npm run build
else
  echo "[WARN] No build script; attempting vite build directly"
  npx vite build
fi

echo "== 8) Lighthouse performance (against local preview) =="
PREVIEW_LOG="${REPORT_DIR}/client-preview-${STAMP}.log"
npx vite preview --host 127.0.0.1 --port 5173 > "$PREVIEW_LOG" 2>&1 & PREV_PID=$!
sleep 2

# Minimal LHCI config if missing
if [ ! -f lighthouserc.json ]; then
cat > lighthouserc.json <<'JSON'
{
  "ci": {
    "collect": {
      "url": ["http://127.0.0.1:5173/"],
      "startServerCommand": "",
      "numberOfRuns": 1
    },
    "assert": {
      "assertions": {
        "categories:performance": ["warn", {"minScore": 0.75}],
        "categories:accessibility": ["warn", {"minScore": 0.85}],
        "categories:best-practices": ["warn", {"minScore": 0.85}],
        "categories:seo": ["warn", {"minScore": 0.80}]
      }
    }
  }
}
JSON
fi

npx lhci autorun | tee "${REPORT_DIR}/client-lighthouse-${STAMP}.log" || true
kill "$PREV_PID" 2>/dev/null || true

echo "== 9) Consolidated report =="
{
  echo "# Client Test Run â€” ${STAMP}"
  echo
  echo "## TypeScript & Lint"
  echo "- tsc --noEmit run (if tsconfig present)"
  echo "- eslint run (see console/logs for warnings)"
  echo
  echo "## Static Audit"
  echo "- ${REPORT_DIR}/client-static-audit-${STAMP}.log"
  echo
  echo "## Playwright"
  echo "- ${REPORT_DIR}/client-playwright-${STAMP}.log"
  echo
  echo "## Unit Tests"
  echo "- ${REPORT_DIR}/client-unit-${STAMP}.log (if any)"
  echo
  echo "## Lighthouse"
  echo "- ${REPORT_DIR}/client-lighthouse-${STAMP}.log"
  echo
  echo "## Build"
  echo "- Production build completed (vite)"
} | tee "${REPORT_DIR}/client-fullsuite-${STAMP}.md"

echo "=== CLIENT FULL SUITE COMPLETE === $(date)"
```

---

If any check throws red, drop the failing lines here and Iâ€™ll produce a zero-friction patch block to fix and re-run.
