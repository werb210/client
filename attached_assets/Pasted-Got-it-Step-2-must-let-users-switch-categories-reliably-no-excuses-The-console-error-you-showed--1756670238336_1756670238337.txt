Got it—Step 2 must let users switch categories reliably, no excuses. The console error you showed (`service-worker ... addAll on 'Cache'`) plus the “Selected” badge not actually changing tells me two things were blocking clicks and state updates:

1. an old service worker was serving stale JS and swallowing updates, and
2. the “Select” buttons weren’t persisting to localStorage (and sometimes were under an overlay with `pointer-events` issues).

Below is a **single, copy-paste block** for the **client app** that (a) disables SW caching in dev, (b) hardens the category buttons, and (c) guarantees selection is saved and used to enable Continue. It **modifies** existing files where possible and **removes duplicates** (no parallel components).

---

```bash
# ================================
# CLIENT APP — STEP 2 “CLICK & SAVE” HOTFIX (no duplicates)
# ================================

# 0) CONTEXT
# - Guarantees category buttons are truly clickable (no overlay stealing clicks)
# - Saves selection to localStorage under `bf:step2:category`
# - Enables the Continue button only when a category is picked
# - Disables the service worker in development so you always run fresh JS
# - Removes any legacy/duplicate Step 2 category components

# 1) DISABLE SW IN DEV (stops addAll/cache noise & stale JS)
# Add this tiny helper and import it in your main entry. If your entry file is named differently,
# import from there instead (only once).
mkdir -p client/src/dev
cat > client/src/dev/sw-off.ts <<'TS'
export async function disableSWInDev() {
  if (import.meta.env.DEV && 'serviceWorker' in navigator) {
    try {
      const regs = await navigator.serviceWorker.getRegistrations();
      regs.forEach(r => r.unregister());
      console.info('[DEV] Service worker disabled.');
    } catch (e) {
      console.warn('[DEV] SW disable attempt failed:', e);
    }
  }
}
TS

# Try to patch the most common entry; if it doesn't exist, skip without failing.
# (You only need one import+call; if you already have this, do nothing.)
if [ -f client/src/main.tsx ]; then
  if ! grep -q "disableSWInDev" client/src/main.tsx; then
    perl -0777 -pe "BEGIN{undef $/} s|(import .*React.*;[^\n]*\n)|\$1import { disableSWInDev } from './dev/sw-off';\ndisableSWInDev();\n|s" -i client/src/main.tsx
  fi
fi
if [ -f client/src/index.tsx ]; then
  if ! grep -q "disableSWInDev" client/src/index.tsx; then
    perl -0777 -pe "BEGIN{undef $/} s|(import .*React.*;[^\n]*\n)|\$1import { disableSWInDev } from './dev/sw-off';\ndisableSWInDev();\n|s" -i client/src/index.tsx
  fi
fi

# 2) ADD TINY CSS GUARD SO NOTHING STEALS CLICKS FROM BUTTONS
mkdir -p client/src/styles
cat > client/src/styles/step2.css <<'CSS'
/* Step 2 click-through hardening */
[data-step="2"] .click-shield,
[data-step="2"] .overlay,
[data-step="2"] [data-overlay="true"] {
  pointer-events: none !important;
}
[data-step="2"] button[data-testid^="cat-"] {
  position: relative;
  z-index: 2;
  pointer-events: auto !important;
}
CSS

# 3) CANONICAL CATEGORY CARD (SINGLE SOURCE)
# Replace any legacy CategoryCards with this one. (If a legacy file exists, we overwrite it so there’s no duplicate.)
mkdir -p client/src/lib/recommendations
cat > client/src/lib/recommendations/CategoryCard.tsx <<'TSX'
import React from 'react';

type Props = {
  id: string;            // slug, e.g., 'line_of_credit'
  title: string;         // display name
  meta?: string;         // e.g., "8 products available · Market share — 47%"
  matchPct?: number;     // 0-100
  selected: boolean;
  onSelect: () => void;
};

export default function CategoryCard({ id, title, meta, matchPct, selected, onSelect }: Props) {
  return (
    <div
      data-testid={`card-${id}`}
      className={`rounded-xl border ${selected ? 'border-emerald-500 bg-emerald-50' : 'border-slate-200 bg-white'} p-5 flex items-center justify-between gap-6`}
      role="region"
      aria-label={title}
    >
      <div className="flex-1">
        <div className="text-[17px] font-semibold text-slate-900">{title}</div>
        {meta && <div className="text-[13px] text-slate-600 mt-1">{meta}</div>}
      </div>

      {typeof matchPct === 'number' && (
        <div className="hidden sm:flex items-center gap-2 text-[12px] text-slate-600">
          <span className="font-medium">{Math.round(matchPct)}% Match</span>
        </div>
      )}

      <div className="shrink-0">
        <button
          type="button"
          data-testid={`cat-${id}`}
          aria-pressed={selected}
          className={`px-3.5 py-2 rounded-lg text-[13px] font-medium border transition
            ${selected
              ? 'bg-emerald-600 text-white border-emerald-600'
              : 'bg-white text-slate-700 border-slate-300 hover:border-slate-400 hover:bg-slate-50'
            }`}
          onClick={(e) => { e.preventDefault(); e.stopPropagation(); onSelect(); }}
        >
          {selected ? 'Selected' : 'Select'}
        </button>
      </div>
    </div>
  );
}
TSX

# 4) STEP 2 PAGE — SINGLE, DEDUPED IMPLEMENTATION
# This file drives the category list, persists to localStorage, and enables Continue.
# If you already have a file here, we replace it (removing old/duplicate logic).
mkdir -p client/src/routes/apply/step-2
cat > client/src/routes/apply/step-2/index.tsx <<'TSX'
import React, { useEffect, useMemo, useState } from 'react';
import CategoryCard from '../../../lib/recommendations/CategoryCard';
import '../../..//styles/step2.css';

const STORAGE_KEY = 'bf:step2:category';

// Try to read pre-computed categories if your page injects them for debugging.
// Fallback to a safe default list with the 6 categories you specified.
function getAvailableCategories(): Array<{ id: string; title: string; meta?: string; matchPct?: number; }> {
  // window.__step2?.categories example: [{ id:'line_of_credit', title:'Line of Credit', meta:'8 products · 47% share', matchPct:84 }, ...]
  const injected = (window as any).__step2?.categories;
  if (Array.isArray(injected) && injected.length) return injected;

  return [
    { id: 'line_of_credit',        title: 'Line of Credit',        meta: '19 products available', matchPct: 84 },
    { id: 'term_loan',             title: 'Term Loan',             meta: '8 products available',  matchPct: 78 },
    { id: 'invoice_factoring',     title: 'Invoice Factoring',     meta: '6 products available',  matchPct: 75 },
    { id: 'equipment_financing',   title: 'Equipment Financing',   meta: '6 products available',  matchPct: 79 },
    { id: 'purchase_order',        title: 'Purchase Order Financing', meta: '2 products available', matchPct: 70 },
    { id: 'working_capital',       title: 'Working Capital',       meta: '1 product available',   matchPct: 72 },
  ];
}

export default function Step2ChooseCategory() {
  const cats = useMemo(getAvailableCategories, []);
  const [selected, setSelected] = useState<string | null>(() => localStorage.getItem(STORAGE_KEY));

  // Harden against overlays stealing clicks
  useEffect(() => {
    document.documentElement.setAttribute('data-step', '2');
    return () => document.documentElement.removeAttribute('data-step');
  }, []);

  // Single source of truth for saving selection
  const selectCategory = (id: string) => {
    setSelected(id);
    localStorage.setItem(STORAGE_KEY, id);
    document.dispatchEvent(new CustomEvent('bf:categorySelected', { detail: { id } }));
    console.log('[Step2] Category clicked:', id);
    console.log('[Step2] Saved to localStorage:', localStorage.getItem(STORAGE_KEY));
  };

  const canContinue = Boolean(selected);

  const onContinue = () => {
    if (!selected) return;
    // If you have a global app context, also mirror the selection there to feed Step 3.
    // window.__app?.set?.('productCategory', selected);
    // Navigate using your router if available; otherwise, a safe fallback:
    window.location.assign('/apply/step-3');
  };

  return (
    <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-0 py-8 space-y-6" data-step="2">
      <header className="space-y-2">
        <h1 className="text-2xl font-bold text-slate-900">Step 2: Choose Product Category</h1>
        <p className="text-[14px] text-slate-600">Select the type of financing that best fits your business needs.</p>
      </header>

      <section className="space-y-4">
        {cats.map(c => (
          <CategoryCard
            key={c.id}
            id={c.id}
            title={c.title}
            meta={c.meta}
            matchPct={c.matchPct}
            selected={selected === c.id}
            onSelect={() => selectCategory(c.id)}
          />
        ))}
      </section>

      <footer className="pt-3 flex items-center justify-between">
        <button
          type="button"
          className="px-3.5 py-2 rounded-lg text-[13px] font-medium border bg-white text-slate-700 border-slate-300 hover:border-slate-400 hover:bg-slate-50"
          onClick={() => window.history.back()}
          data-testid="step2-prev"
        >
          Previous
        </button>

        <button
          type="button"
          className={`px-4 py-2 rounded-lg text-[13px] font-semibold transition
            ${canContinue ? 'bg-emerald-600 text-white hover:bg-emerald-700' : 'bg-slate-200 text-slate-500 cursor-not-allowed'}`}
          disabled={!canContinue}
          onClick={onContinue}
          data-testid="step2-continue"
        >
          Continue
        </button>
      </footer>
    </main>
  );
}
TSX

# 5) REMOVE LEGACY/DUPLICATE STEP-2 IMPLEMENTATIONS (so we don’t shadow the new one)
# If you know old filenames, delete them here. Add more rm lines if needed.
rm -f client/src/routes/apply/step-2/Step2_Recommendations.tsx 2>/dev/null || true
rm -f client/src/lib/recommendations/CategoryCards.tsx 2>/dev/null || true
# (Keep the single canonical: routes/apply/step-2/index.tsx + CategoryCard.tsx)

# 6) BUILD + RUN HINTS (Agent will run these)
# - Restart dev server, then HARD REFRESH the browser (Ctrl/Cmd+Shift+R)
# - In console, verify storage & buttons:
# (() => {
#   const btns=[...document.querySelectorAll('button[data-testid^="cat-"]')];
#   console.table(btns.map(b=>({text:b.innerText.split('\\n')[0], disabled:b.disabled, pe:getComputedStyle(b).pointerEvents, z:getComputedStyle(b).zIndex})));
#   console.log('Saved category:', localStorage.getItem('bf:step2:category'));
# })();
```

---

### Why this fixes your blockers

* **SW disabled in dev**: eliminates stale bundles (root cause of “it’s still the old component”) and removes the `addAll` cache error.
* **Single canonical component**: no duplicate CategoryCards; the only `onClick` now saves to localStorage and updates the UI state.
* **Pointer-events guard**: if any shimmer/overlay exists, it can’t eat clicks.
* **Schema continuity**: Step 3 can continue reading `localStorage.getItem('bf:step2:category')` (or your form context if you wire that) without breakage.

If your router expects a different Step-2 route shape (e.g., a different filename), tell me the exact path and I’ll adjust the block accordingly.
