âœ… Understood. Let's proceed with the **Client Application Fix** for Step 5 document uploads.

---

## âœ… CLIENT APPLICATION â€“ STEP 5 DOCUMENT UPLOAD FIX

### ðŸŽ¯ GOAL

Ensure all uploaded documents are tied to the **correct application ID** throughout the flow (from Step 1 to Step 6). Prevent duplicate or orphaned applications by enforcing ID consistency.

---

### ðŸ”§ INSTRUCTIONS FOR REPLIT (CLIENT APP)

#### 1. **Enforce a Single Persistent `applicationId`**

Ensure only **one** UUID is generated at Step 1 and reused in all subsequent steps.

```ts
// Step 1 - after generating new application
const uuid = generateUUID();
localStorage.setItem("applicationId", uuid);
```

In **all other steps (2-7)**:

```ts
const applicationId = localStorage.getItem("applicationId");
if (!applicationId) {
  throw new Error("Application ID missing. Cannot continue.");
}
```

---

#### 2. **Update Step 5 Upload Logic to Use Stored ID**

Inside `uploadDocuments.ts` or Step 5 logic:

```ts
const applicationId = localStorage.getItem("applicationId");
const uploadUrl = `${API_BASE_URL}/api/public/upload/${applicationId}`;

const formData = new FormData();
formData.append("document", selectedFile);
formData.append("documentType", selectedCategory);

await fetch(uploadUrl, {
  method: "POST",
  body: formData,
});
```

âœ… Make sure `applicationId` is never passed from form state or props â€” it must always come from `localStorage`.

---

#### 3. **Add Fallback Safety Check**

Add a reusable utility:

```ts
export function getApplicationIdOrFail(): string {
  const id = localStorage.getItem("applicationId");
  if (!id || !/^[\w\d-]{36}$/.test(id)) {
    throw new Error("Application ID invalid or missing.");
  }
  return id;
}
```

Use this in all API calls including Step 6 Finalize:

```ts
const id = getApplicationIdOrFail();
fetch(`${API_BASE_URL}/api/public/applications/${id}/finalize`, { method: "PATCH" });
```

---

#### 4. **\[Optional] Detect Mismatches Before Finalizing**

Before calling the finalize endpoint:

```ts
const uploads = await fetch(`/api/public/uploads/${applicationId}`).then(res => res.json());
if (uploads.length === 0) {
  showWarning("No documents found for this application. Please upload before submitting.");
}
```

---

#### 5. **Test Case Checklist (Replit QA)**

* [x] Step 1 generates UUID and saves to `localStorage`
* [x] Step 5 uploads use the same `applicationId`
* [x] Step 6 finalize uses the same `applicationId`
* [x] Refreshing the page keeps ID intact
* [x] All uploads appear correctly in the Staff Application under the correct application card

---

When complete, please report back to me here so we can move on to the **Staff Upload Guard** implementation.
