Below is a **single, copy-paste instruction block** you can drop into the **client-side Replit AI chat** to wire everything exactly as you asked:

---

## üüß CLIENT-APP ‚Äì First-Sign-In ‚Üí Step 1, Later-Sign-In ‚Üí Portal

### 1  Add/Update first-visit utility

`src/lib/visitFlags.ts`

```ts
const KEY_APPLY_STARTED   = "bf:applyStarted";     // set when user first lands on step-1
const KEY_PORTAL_DEFAULT  = "bf:portalDefault";    // set after they reach portal page

export function shouldGoToApplication() {
  return !localStorage.getItem(KEY_APPLY_STARTED);
}

export function markApplicationStarted() {
  localStorage.setItem(KEY_APPLY_STARTED, "true");
}

export function shouldShowPortalAfterLogin() {
  return !!localStorage.getItem(KEY_PORTAL_DEFAULT);
}

export function markPortalDefault() {
  localStorage.setItem(KEY_PORTAL_DEFAULT, "true");
}
```

### 2  Convert **dashboard.html** ‚Üí `src/pages/PortalPage.tsx`

*Strip `<html>/<head>/<body>`; convert to JSX (`class` ‚Üí `className`).*
*Replace static ‚ÄúTodd‚Äù with `{user.firstName}` from AuthContext.*
Hook buttons:

```tsx
import { useNavigate } from "react-router-dom";
import { markPortalDefault } from "@/lib/visitFlags";

const navigate = useNavigate();

<button onClick={() => {
  markPortalDefault();               // user has reached portal once
  navigate("/application/step-1");   // Start Application CTA
}}>Start Application</button>
```

> **Note:** Any ‚ÄúGet Help‚Äù button can `navigate("/support")` or similar.

### 3  Login success routing

In your Auth provider or wherever you handle **login success**:

```ts
import {
  shouldGoToApplication,
  markApplicationStarted,
  shouldShowPortalAfterLogin,
} from "@/lib/visitFlags";

if (shouldGoToApplication()) {
  navigate("/application/step-1");
  markApplicationStarted();       // first-ever login ‚Üí kickoff wizard
} else if (shouldShowPortalAfterLogin()) {
  navigate("/portal");            // later logins
} else {
  // fallback if they somehow skipped portal flag
  navigate("/portal");
}
```

### 4  Route table in `App.tsx`

```tsx
import PortalPage from "@/pages/PortalPage";

<Routes>
  <Route path="/"            element={<LandingPage />} />
  <Route path="/login"       element={<LoginPage />}   />
  <Route path="/register"    element={<RegisterPage />} />
  <Route path="/portal"      element={<PortalPage />}   />
  <Route path="/application/*" element={<ApplicationWizard />} />
</Routes>
```

### 5  Wizard step-1 **component** marks flag

In `ApplicationStep1.tsx`:

```tsx
import { useEffect } from "react";
import { markApplicationStarted } from "@/lib/visitFlags";

useEffect(() => {
  markApplicationStarted();   // ensures flag even if user hits step-1 directly
}, []);
```

### 6  Landing-page CTA buttons

```tsx
import { shouldGoToApplication } from "@/lib/visitFlags";

const target = shouldGoToApplication() ? "/register" : "/portal";
navigate(target);
```

(You can still route `/login` via header link.)

### 7  Smoke-test checklist

| Scenario                                           | Expected                             |
| -------------------------------------------------- | ------------------------------------ |
| Brand-new incognito ‚Üí Register ‚Üí OTP ‚Üí first login | Auto-redirects `/application/step-1` |
| Complete a bit of app, click dashboard icon        | `markPortalDefault()` set            |
| Log out ‚Üí fresh login                              | Lands at `/portal`                   |
| Landing page CTA after first visit                 | Goes to `/portal`                    |

---

### üìã Replit AI command (paste verbatim)

> **‚ÄúCreate `src/lib/visitFlags.ts` with first-visit logic, convert uploaded dashboard.html into `src/pages/PortalPage.tsx` (JSX, Tailwind), wire buttons to `/application/step-1`, add flag setters, update login success handler to redirect first-time users to step-1 and returning users to `/portal`, update LandingPage CTA to use the new flag logic, ensure route `/portal` in App.tsx, and add `markApplicationStarted()` in ApplicationStep1. Then run dev server.‚Äù**

---

No staff-side changes are needed for this redirection logic.
