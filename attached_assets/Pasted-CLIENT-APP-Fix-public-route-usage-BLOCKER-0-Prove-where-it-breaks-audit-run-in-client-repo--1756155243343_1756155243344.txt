CLIENT APP — Fix public route usage (BLOCKER)
0) Prove where it breaks (audit)
# run in client repo
rg -n "/api/public/applications/.*/documents" src \
| tee /tmp/public-docs-usage.txt
# You should see the 6 files your report listed.

1) Hard contract: public docs route disallowed in PROD

Replace your docs helpers with this single source of truth.

// client/src/lib/api.ts
const BASE = ""; // same-origin

const ALLOW_PUBLIC_DOCS_IN_DEV =
  import.meta.env.DEV && import.meta.env.VITE_ALLOW_PUBLIC_DOCS_DEV === "1";

export async function uploadDocument(appId: string, file: File, documentType: string) {
  const fd = new FormData();
  fd.append("file", file);
  fd.append("document_type", documentType);
  const r = await fetch(`${BASE}/api/applications/${appId}/documents/upload`, {
    method: "POST", body: fd, credentials: "include"
  });
  if (!r.ok) throw new Error(`upload failed: ${r.status}`); return r.json();
}

export async function listDocuments(appId: string) {
  const path = ALLOW_PUBLIC_DOCS_IN_DEV
    ? `/api/public/applications/${appId}/documents` // **dev only**
    : `/api/applications/${appId}/documents`;        // **prod & default**
  const r = await fetch(path, { credentials: "include" });
  if (!r.ok) throw new Error(`list failed: ${r.status}`); return r.json();
}

export async function setDocumentStatus(docId: string, status: "accepted"|"rejected"|"pending") {
  const r = await fetch(`/api/documents/${docId}`, {
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    credentials: "include",
    body: JSON.stringify({ status }),
  });
  if (!r.ok) throw new Error(`patch failed: ${r.status}`); return r.json();
}

2) Mechanical replacement (convert all callers to the wrapper)
# replace raw fetches to public docs with wrapper usage
# (keeps diffs small; you can still tidy imports after)

# A) Step6_TypedSignature.tsx
sed -i '' -E 's#fetch\(`/api/public/applications/\$\{appId\}/documents`[^\)]*\)#listDocuments(appId)#g' \
  src/routes/Step6_TypedSignature.tsx

# B) Step5_DocumentUpload.tsx
sed -i '' -E 's#fetch\(`/api/public/applications/\$\{appId\}/documents`[^\)]*\)#listDocuments(appId)#g' \
  src/routes/Step5_DocumentUpload.tsx

# C) applicationHooks.ts
sed -i '' -E 's#`/api/public/applications/\$\{appId\}/documents`#`/api/applications/${appId}/documents`#g' \
  src/api/applicationHooks.ts

# D) useDocumentVerification.ts
sed -i '' -E 's#`/api/public/applications/\$\{appId\}/documents`#`/api/applications/${appId}/documents`#g' \
  src/hooks/useDocumentVerification.ts

# E) TaxReturnFixer.tsx
sed -i '' -E 's#`/api/public/applications/\$\{appId\}/documents`#`/api/applications/${appId}/documents`#g' \
  src/components/TaxReturnFixer.tsx

# F) UploadMissingDocuments.tsx
sed -i '' -E 's#`/api/public/applications/\$\{appId\}/documents`#`/api/applications/${appId}/documents`#g' \
  src/pages/UploadMissingDocuments.tsx


If any of those components assemble fetch() options, replace the raw fetch call with:

const { data } = await listDocuments(appId);


and add:

import { listDocuments, uploadDocument, setDocumentStatus } from "@/lib/api";

3) CI gate that fails the build if a public docs route sneaks in
# package.json (add these scripts)
# "scripts": {
#   ...
#   "gate:public-docs:src": "rg -n \"/api/public/applications/.*/documents\" src && echo '❌ public docs in src' && exit 1 || echo '✅ src clean'",
#   "gate:public-docs:dist": "rg -n \"/api/public/applications/.*/documents\" dist && echo '❌ public docs in dist' && exit 1 || echo '✅ dist clean'",
#   "build:prod": "npm run gate:public-docs:src && vite build && npm run gate:public-docs:dist"
# }

# run it now
npm run build:prod

4) Runtime smoke (auth’d browser session)
// DevTools on your client site
const appId = "2ebf6120-512e-428f-b1c1-094acf4b6edc";
(await fetch(`/api/public/applications/${appId}/documents`, {credentials:"include"})).status;
// ✅ Expect 404/403 in PROD

const fd = new FormData();
fd.append("file", new File([new Blob(["ok"],{type:"text/plain"})], "hello.txt"));
fd.append("document_type", "bank_statements");
(await fetch(`/api/applications/${appId}/documents/upload`, {method:"POST", body:fd, credentials:"include"})).status;
// ✅ Expect 200 (if your auth cookie/JWT is present)