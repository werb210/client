CLIENT APPLICATION — Add Playwright API smoke + curl helper

Files touched

tests/api.smoke.spec.ts (new)

scripts/smoke.client.sh (new)

package.json (add a test script if needed)

Block (paste in Client repo root shell):

set -euo pipefail
mkdir -p tests scripts

# 1) Playwright API smoke (no UI; hits Staff API)
cat > tests/api.smoke.spec.ts <<'EOF'
import { test, expect, request } from '@playwright/test';

const BASE = process.env.VITE_STAFF_API_URL || 'https://staff.boreal.financial/api';
const TOK  = process.env.VITE_CLIENT_APP_SHARED_TOKEN || '';

test.describe('Client↔Staff API smoke', () => {
  test('products list returns expected count', async ({ playwright }) => {
    const api = await request.newContext({ baseURL: BASE, extraHTTPHeaders: { Authorization: `Bearer ${TOK}` }});
    const res = await api.get('/v1/products');
    expect(res.ok()).toBeTruthy();
    const data = await res.json();
    expect(Array.isArray(data)).toBeTruthy();
    expect(data.length).toBeGreaterThanOrEqual(44); // allow >= in case catalog grows
  });

  test('lenders list returns expected count', async ({ playwright }) => {
    const api = await request.newContext({ baseURL: BASE, extraHTTPHeaders: { Authorization: `Bearer ${TOK}` }});
    const res = await api.get('/lenders');
    expect(res.ok()).toBeTruthy();
    const data = await res.json();
    expect(Array.isArray(data)).toBeTruthy();
    expect(data.length).toBeGreaterThanOrEqual(30);
  });

  test('validate-intake (old schema) responds with ok flag', async ({ playwright }) => {
    const api = await request.newContext({ baseURL: BASE, extraHTTPHeaders: { Authorization: `Bearer ${TOK}`, 'Content-Type': 'application/json' }});
    const res = await api.post('/applications/validate-intake', { data: { product_id: 'PRODUCT_ID', country: 'US', amount: 25000 }});
    expect(res.ok()).toBeTruthy();
    const data = await res.json();
    expect(typeof data.ok).toBe('boolean');
  });

  test('validate-intake (new schema) responds with ok flag', async ({ playwright }) => {
    const api = await request.newContext({ baseURL: BASE, extraHTTPHeaders: { Authorization: `Bearer ${TOK}`, 'Content-Type': 'application/json' }});
    const res = await api.post('/applications/validate-intake', { data: { business: { name: 'Co' }, owners: [{ name: 'A' }], amountRequested: 50000 }});
    expect(res.ok()).toBeTruthy();
    const data = await res.json();
    expect(typeof data.ok).toBe('boolean');
  });
});
EOF

# 2) Curl helper (quick CLI verification)
cat > scripts/smoke.client.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
BASE="${VITE_STAFF_API_URL:-https://staff.boreal.financial/api}"
TOK="${VITE_CLIENT_APP_SHARED_TOKEN:-}"

if [ -z "${TOK}" ]; then echo "❌ VITE_CLIENT_APP_SHARED_TOKEN missing"; exit 1; fi

echo "Products (>=44):"
curl -sS -H "Authorization: Bearer $TOK" "$BASE/v1/products" | jq 'length'

echo "Lenders (>=30):"
curl -sS -H "Authorization: Bearer $TOK" "$BASE/lenders" | jq 'length'

echo "Validate (new schema):"
curl -sS -H "Authorization: Bearer $TOK" -H "Content-Type: application/json" \
  -X POST "$BASE/applications/validate-intake" \
  -d '{"business":{"name":"Co"}, "owners":[{"name":"A"}], "amountRequested":50000}' | jq '.ok'
EOF
chmod +x scripts/smoke.client.sh

# 3) Add Playwright script (if not present)
if ! jq -e '.scripts.test' package.json >/dev/null 2>&1; then
  jq '.scripts.test="playwright test"' package.json > package.json.tmp && mv package.json.tmp package.json
fi

echo "Run (with env set): VITE_STAFF_API_URL=https://staff.boreal.financial/api VITE_CLIENT_APP_SHARED_TOKEN=*** npx playwright test -g \"Client↔Staff API smoke\""
echo "Or quick curl: VITE_STAFF_API_URL=https://staff.boreal.financial/api VITE_CLIENT_APP_SHARED_TOKEN=*** ./scripts/smoke.client.sh"

🔒 Hardening (after first green run)

Diagnostics: If any internal diag endpoints are still enabled, set API_DIAG=0.

Shared token: Keep ALLOW_CLIENT_SHARED_TOKEN=1 for now; plan a cutover to your long-term JWT/session flow. Rotate CLIENT_SHARED_BEARER periodically.

CORS: Keep origins list current; add/remove preview domains as needed.