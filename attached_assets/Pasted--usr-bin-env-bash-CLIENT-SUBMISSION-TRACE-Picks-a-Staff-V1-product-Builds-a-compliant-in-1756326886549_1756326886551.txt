#!/usr/bin/env bash
# CLIENT SUBMISSION TRACE
# - Picks a Staff V1 product
# - Builds a compliant intake (no hardcoded country/amount beyond safe mids)
# - Validates via Client
# - Submits via Client
# - Writes /tmp/submission_continuity.json for Staff verification

set -euo pipefail
need(){ command -v "$1" >/dev/null || { echo "Missing $1"; exit 1; }; }
need curl; need jq

CLIENT_BASE="${CLIENT_BASE:-http://localhost:5000}"
STAFF_BASE="${STAFF_BASE:-https://staff.boreal.financial}"
TRACE="${TRACE:-/tmp/submission_continuity.json}"

echo "== Fetch Staff V1 catalog =="
S_RAW="$(curl -fsS "$STAFF_BASE/api/v1/products")"
S_TOT="$(echo "$S_RAW" | jq 'length')"
echo "Staff products: $S_TOT"

# Choose a product preferring US then CA (fall back to first), tolerate field-name variants
PID="$(echo "$S_RAW" | jq -r '
  ([.[] | select((.countryOffered // .country_offered // .country)=="US")][0].id) //
  ([.[] | select((.countryOffered // .country_offered // .country)=="CA")][0].id) //
  .[0].id
')"
[ -n "$PID" ] && [ "$PID" != "null" ] || { echo "No product found"; exit 1; }

SPROD="$(echo "$S_RAW" | jq -c --arg id "$PID" '.[]|select(.id==$id)')"
SCNTRY="$(echo "$SPROD" | jq -r '.countryOffered // .country_offered // .country // empty')"
[ -n "$SCNTRY" ] || { echo "Selected product missing country"; exit 1; }

# Derive amount from min/max if present, else use a safe mid
SMIN="$(echo "$SPROD" | jq -r '.minimumLendingAmount // .min_amount // empty')"
SMAX="$(echo "$SPROD" | jq -r '.maximumLendingAmount // .max_amount // empty')"
if [[ -n "${SMIN:-}" && -n "${SMAX:-}" && "${SMIN//[^0-9.]}" != "" && "${SMAX//[^0-9.]}" != "" ]]; then
  AMOUNT="$(( ( ${SMIN%.*:-0} + ${SMAX%.*:-0} ) / 2 ))"
else
  AMOUNT="${AMOUNT:-25000}"
fi

# Prefer Staff constraints if present; otherwise high safe values
STIB="$(echo "$SPROD" | jq -r '.min_time_in_business // empty')"
SREV="$(echo "$SPROD" | jq -r '.min_monthly_revenue // empty')"
TIB="${TIB:-$([ -n "${STIB:-}" ] && echo "${STIB%.*}" || echo 120)}"
REV="${REV:-$([ -n "${SREV:-}" ] && echo "${SREV%.*}" || echo 100000)}"
INDUSTRY="${INDUSTRY:-Technology}"

echo "== Build intake payload =="
INTAKE="$(jq -n --arg pid "$PID" --arg c "$SCNTRY" \
               --argjson amt "$AMOUNT" --argjson tib "$TIB" --argjson rev "$REV" \
               --arg ind "$INDUSTRY" \
               '{product_id:$pid,country:$c,amount:$amt,timeInBusinessMonths:$tib,monthlyRevenue:$rev,industry:$ind}')"
echo "$INTAKE" | jq .

echo "== Preflight validation via Client (/api/applications/validate-intake?diag=1) =="
VRESP="$(curl -s -X POST "$CLIENT_BASE/api/applications/validate-intake?diag=1" -H 'content-type: application/json' -d "$INTAKE")"
echo "$VRESP" | jq .
[[ "$(echo "$VRESP" | jq -r '.ok // false')" == "true" ]] || { echo "Validation failed"; exit 1; }

echo "== Submit via Client (/api/applications) =="
SRESP="$(curl -s -X POST "$CLIENT_BASE/api/applications" -H 'content-type: application/json' -d "$INTAKE")"
echo "$SRESP" | jq .
APP_ID="$(echo "$SRESP" | jq -r '.id // .application_id // .applicationId // empty')"
[ -n "$APP_ID" ] && [ "$APP_ID" != "null" ] || { echo "No application id returned"; exit 1; }

echo "== Write submission continuity trace =="
jq -n --arg app_id "$APP_ID" --argjson intake "$INTAKE" --argjson staff_product "$SPROD" \
      --arg client_base "$CLIENT_BASE" --arg staff_base "$STAFF_BASE" \
      '{meta:{timestamp:(now|todate),client_base:$client_base,staff_base:$staff_base},
        app_id:$app_id,intake:$intake,staff_product_at_submit:$staff_product}' \
  > "$TRACE"

echo "âœ… Trace saved: $TRACE"
echo "APP_ID=$APP_ID"
