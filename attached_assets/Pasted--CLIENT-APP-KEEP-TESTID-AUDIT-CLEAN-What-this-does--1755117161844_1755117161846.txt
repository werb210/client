############################################
# CLIENT APP: KEEP TESTID/AUDIT CLEAN
# What this does:
# 1) Keeps duplicate data-testid out of tests (auto-suffix per file)
# 2) Re-runs static audit + Playwright sanity checks
############################################

set -euo pipefail

echo "== 0) TOOLS =="
npm i -D ripgrep @playwright/test playwright
npx playwright install --with-deps

echo "== 1) AUTO-SUFFIX DUPLICATE TESTIDS IN TEST FILES ONLY =="
mkdir -p scripts
cat > scripts/refactor_testids_client.mjs <<'EOF'
import fs from "fs";
import path from "path";
const ROOT="client";
const IDS=new Set(["continue-without-signing","final-submit","product-card","success-message","upload-area"]);
const isTest=(p)=>/\b(tests|__tests__|e2e)\b/.test(p.replace(/\\/g,"/"))||/\.(spec|test)\.(t|j)sx?$/.test(p);
const walk=d=>fs.readdirSync(d,{withFileTypes:true}).flatMap(e=>e.isDirectory()?walk(path.join(d,e.name)):/\.(t|j)sx?$/.test(e.name)?[path.join(d,e.name)]:[]);
const files=fs.existsSync(ROOT)?walk(ROOT):[];
let changed=0;
for(const file of files){ if(!isTest(file)) continue;
  let txt=fs.readFileSync(file,"utf8"), before=txt, base=path.basename(file).replace(/\.(t|j)sx?$/,"");
  for(const id of IDS){
    txt=txt.replace(new RegExp(`data-testid="\\s*${id}\\s*"`,"g"),`data-testid="${id}--${base}"`);
    txt=txt.replace(new RegExp(`data-testid='\\s*${id}\\s*'`,"g"),`data-testid='${id}--${base}'`);
    txt=txt.replace(new RegExp(`getByTestId\\(['"]${id}['"]\\)`,"g"),`getByTestId('${id}--${base}')`);
    txt=txt.replace(new RegExp(`byTestId\\(['"]${id}['"]\\)`,"g"),`byTestId('${id}--${base}')`);
    txt=txt.replace(new RegExp(`\\[data-testid=['"]${id}['"]\\]`,"g"),`[data-testid='${id}--${base}']`);
  }
  if(txt!==before){ fs.writeFileSync(file,txt); console.log("UPDATED",file); changed++; }
}
console.log("Files changed:",changed);
EOF

# SHOW CONSOLE OUTPUT
node scripts/refactor_testids_client.mjs

echo "== 2) STATIC AUDIT =="
mkdir -p scripts
cat > scripts/static_audit_client.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
echo "=== CLIENT STATIC AUDIT ==="
echo "--- Duplicate data-testid values (client/**) ---"
rg -No 'data-testid=[\"\x27]([^\"\x27]+)[\"\x27]' client | sed -E 's/.*data-testid=[\"\x27]([^\"\x27]+)[\"\x27].*/\1/' | sort | uniq -d || true
echo "--- Suspicious repeated labels ---"
rg -No '<(Button|button|MenuItem|Tab)[^>]*>([^<]{1,60})</' client | sed -E 's/.*>([^<]+)</\1/' | awk '{$1=$1;print}' | sort | uniq -d || true
echo "--- Multiple onClick handlers per file ---"
rg -n --no-heading 'onClick=\{[^}]+\}' client | awk -F: '{print $1}' | sort | uniq -c | sort -nr | head -20
echo "=== DONE (static) ==="
EOF
chmod +x scripts/static_audit_client.sh

echo "== 3) PLAYWRIGHT SANITY =="
mkdir -p tests
cat > tests/ui_crawl_client.spec.ts <<'EOF'
import { test, expect } from "@playwright/test";
const START = process.env.CLIENT_URL || "http://localhost:5173/";
test("duplicate labels/testIDs and basic nav present", async ({ page }) => {
  await page.goto(START);
  const items=page.locator('button,[role="button"],[data-testid],[role="menuitem"],[role="tab"]');
  const map=new Map<string,number>(); const n=await items.count();
  for(let i=0;i<n;i++){
    const el=items.nth(i);
    const t=(await el.textContent()||"").replace(/\s+/g," ").trim();
    const key=t||(await el.getAttribute("data-testid"))||"";
    if(!key) continue;
    map.set(key,(map.get(key)||0)+1);
  }
  const dups=[...map.entries()].filter(([_,c])=>c>1);
  console.log("CLIENT_DUPLICATES", JSON.stringify(dups, null, 2));
  // Adjust to your nav ids if needed
  for (const sel of ["[data-testid='nav-start-application']","[data-testid='nav-documents']","[data-testid='nav-recommendations']","[data-testid='nav-help']"]) {
    const el = await page.$(sel);
    expect(el, `Missing nav item ${sel}`).not.toBeNull();
  }
});
EOF

cat > tests/runtime_guard_client.spec.ts <<'EOF'
import { test, expect } from "@playwright/test";
const START = process.env.CLIENT_URL || "http://localhost:5173/";
const SLOW_MS = 1500;
test("no console errors; no 4xx/5xx; no slow calls", async ({ page }) => {
  const errors:string[]=[]; page.on("console",m=>{ if(m.type()==="error") errors.push(m.text()); });
  const bad:string[]=[]; page.on("response",async r=>{ if(r.status()>=400) bad.push(`${r.status()} ${r.url()}`); });
  await page.goto(START); await page.waitForLoadState("networkidle");
  const perf = await page.evaluate(()=>performance.getEntriesByType("resource")
    .filter((e:any)=>e.initiatorType==="fetch"||e.initiatorType==="xmlhttprequest")
    .map((e:any)=>({name:e.name,dur:e.duration})));
  const slow = perf.filter((p:any)=>p.dur>SLOW_MS).map((p:any)=>`${Math.round(p.dur)}ms ${p.name}`);
  expect(errors,"Console errors").toHaveLength(0);
  expect(bad,"Broken network calls").toHaveLength(0);
  expect(slow,"Slow API calls >1.5s").toHaveLength(0);
});
EOF

echo "== 4) MASTER REPORT =="
cat > scripts/full_regression_client.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
STAMP=$(date +"%Y%m%d-%H%M%S")
OUT="client-regression-$STAMP.md"
echo "# Client Regression Report ($STAMP)" > "$OUT"
section(){ echo -e "\n## $1\n" | tee -a "$OUT"; }
section "Static Audit"
{ bash scripts/static_audit_client.sh; } 2>&1 | sed 's/\x1b\[[0-9;]*m//g' | tee -a "$OUT"
section "Playwright - UI Crawl"
{ npx playwright test tests/ui_crawl_client.spec.ts --reporter=list; } 2>&1 | tee -a "$OUT" || true
section "Playwright - Runtime Guard"
{ npx playwright test tests/runtime_guard_client.spec.ts --reporter=list; } 2>&1 | tee -a "$OUT" || true
echo -e "\n---\nLegend:\n- Duplicate testIDs should be 0 after refactor\n- No console errors or broken requests\n- No slow API calls (>1.5s)\n" | tee -a "$OUT"
echo "Wrote $OUT"
EOF
chmod +x scripts/full_regression_client.sh

# SHOW CONSOLE OUTPUT
bash scripts/static_audit_client.sh
npx playwright test tests/ui_crawl_client.spec.ts --reporter=list || true
npx playwright test tests/runtime_guard_client.spec.ts --reporter=list || true
bash scripts/full_regression_client.sh
