import { attachCategories } from "../api/submit-categories";
// Staff API client for application submission and SignNow integration

const STAFF_API_URL = import.meta.env.VITE_STAFF_API_URL || ""; // Single source of truth for all staff API calls

// ✅ Required Fields Validation Configuration
const REQUIRED_FIELDS = {
  step1: ["requestedAmount", "use_of_funds"], // Simplified - just core financial fields
  step3: ["operatingName", "legalName", "businessPhone", "businessState"], // Updated to match Step 3 form
  step4: ["applicantFirstName", "applicantLastName", "applicantEmail", "applicantPhone", "ownershipPercentage"] // SSN/SIN and DOB are optional
} as const;

// Field mapping for alternative field names
const FIELD_ALIASES = {
  step1: {
    requestedAmount: ["fundingAmount"],
    use_of_funds: ["fundsPurpose"],
    businessName: ["legalBusinessName", "operatingName"],
    businessPhone: ["phone"],
    businessState: ["state"]
  },
  step3: {
    operatingName: ["businessName", "businessDBAName"],
    legalName: ["businessLegalName", "legalBusinessName"],
    businessPhone: ["phone"],
    businessState: ["state", "province"]
  },
  step4: {
    applicantFirstName: ["firstName"],
    applicantLastName: ["lastName"], 
    applicantEmail: ["email", "personalEmail"],
    applicantPhone: ["phone", "personalPhone"],
    applicantDateOfBirth: ["dob", "dateOfBirth"],
    applicantSSN: ["sin", "socialSecurityNumber"]
  }
} as const;

// ✅ Validate Application Payload Helper
export function validateApplicationPayload(payload: any): { isValid: boolean; missingFields: Record<string, string[]> } {
  const missingFields: Record<string, string[]> = {};
  let isValid = true;

  // Check each step for required fields
  Object.entries(REQUIRED_FIELDS).forEach(([stepKey, requiredFields]) => {
    const requiredFieldsArray = [...requiredFields] as string[];
    const stepData = payload[stepKey];
    if (!stepData) {
      missingFields[stepKey] = requiredFieldsArray;
      isValid = false;
      return;
    }

    const stepMissing: string[] = [];
    requiredFieldsArray.forEach(field => {
      let fieldFound = false;
      
      // Check primary field name
      if (stepData[field] !== undefined && stepData[field] !== null && stepData[field] !== "") {
        fieldFound = true;
      }
      
      // Check aliases if primary field not found
      if (!fieldFound && FIELD_ALIASES[stepKey as keyof typeof FIELD_ALIASES]) {
        const aliases = FIELD_ALIASES[stepKey as keyof typeof FIELD_ALIASES][field as keyof typeof FIELD_ALIASES[keyof typeof FIELD_ALIASES]];
        if (aliases) {
          [...aliases].forEach(alias => {
            if (stepData[alias] !== undefined && stepData[alias] !== null && stepData[alias] !== "") {
              fieldFound = true;
            }
          });
        }
      }
      
      if (!fieldFound) {
        stepMissing.push(field);
      }
    });

    if (stepMissing.length > 0) {
      missingFields[stepKey] = stepMissing;
      isValid = false;
    }
  });

  return { isValid, missingFields };
}

export interface ApplicationSubmissionData {
  formFields: {
    // Step 1 Financial Profile
    headquarters: string;
    industry: string;
    lookingFor: string;
    fundingAmount: number;
    salesHistory: string;
    averageMonthlyRevenue: number;
    accountsReceivableBalance: number;
    fixedAssetsValue: number;
    equipmentValue?: number;
    
    // Step 3 Business Details
    businessName: string;
    businessAddress: string;
    businessCity: string;
    businessState: string;
    businessZipCode: string;
    businessPhone: string;
    businessEmail: string;
    businessWebsite?: string;
    businessStructure: string;
    businessRegistrationDate: string;
    businessTaxId: string;
    businessDescription: string;
    numberOfEmployees: number;
    primaryBankName: string;
    bankingRelationshipLength: string;
    
    // Step 4 Applicant Details
    firstName: string;
    lastName: string;
    title: string;
    dateOfBirth: string;
    socialSecurityNumber: string;
    personalEmail: string;
    personalPhone: string;
    homeAddress: string;
    homeCity: string;
    homeState: string;
    homeZipCode: string;
    personalIncome: string;
    creditScore: string;
    ownershipPercentage: string;
    yearsWithBusiness: string;
    previousLoans: string;
    bankruptcyHistory: string;
  };
  uploadedDocuments: Array<{
    id: string;
    name: string;
    documentType: string;
    size: number;
    type: string;
  }>;
  productId: string;
  clientId: string;
}

export interface ApplicationSubmissionResponse {
  status: 'submitted' | 'error';
  applicationId?: string;
  message?: string;
  error?: string;
}



export interface FinalizationResponse {
  status: 'finalized' | 'error';
  applicationId?: string;
  finalizedAt?: string;
  message?: string;
  error?: string;
}

class StaffApiClient {
  private baseUrl: string;
  private cache: Map<string, { data: any; timestamp: number; ttl: number }> = new Map();
  private offlineQueue: Array<{ endpoint: string; options: RequestInit; resolve: Function; reject: Function }> = [];

  constructor() {
    this.baseUrl = STAFF_API_URL;
    this.initializeOfflineHandling();
  }

  private initializeOfflineHandling() {
    // Monitor online/offline status
    window.addEventListener('online', () => {
      console.log('[STAFF_API] Back online - processing queued requests');
      this.processOfflineQueue();
    });

    window.addEventListener('offline', () => {
      console.log('[STAFF_API] Gone offline - will queue requests');
    });
  }

  private async processOfflineQueue() {
    while (this.offlineQueue.length > 0) {
      const request = this.offlineQueue.shift();
      if (request) {
        try {
          const result = await this.makeRequestWithRetry(request.endpoint, request.options);
          request.resolve(result);
        } catch (error) {
          request.reject(error);
        }
      }
    }
  }

  private getCacheKey(endpoint: string, options: RequestInit): string {
    const method = options.method || 'GET';
    const body = options.body ? JSON.stringify(options.body) : '';
    return `${method}:${endpoint}:${body}`;
  }

  private getCachedResponse<T>(cacheKey: string): T | null {
    const cached = this.cache.get(cacheKey);
    if (cached && Date.now() < cached.timestamp + cached.ttl) {
      console.log('[STAFF_API] Using cached response for:', cacheKey);
      return cached.data;
    }
    if (cached) {
      this.cache.delete(cacheKey);
    }
    return null;
  }

  private setCachedResponse(cacheKey: string, data: any, ttlMs: number = 300000) { // 5 min default
    this.cache.set(cacheKey, {
      data,
      timestamp: Date.now(),
      ttl: ttlMs
    });
  }

  private async sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  private async makeRequestWithRetry<T>(
    endpoint: string,
    options: RequestInit = {},
    maxRetries: number = 3
  ): Promise<T> {
    const cacheKey = this.getCacheKey(endpoint, options);
    
    // Check cache first for GET requests
    if ((!options.method || options.method === 'GET')) {
      const cachedResponse = this.getCachedResponse<T>(cacheKey);
      if (cachedResponse) {
        return cachedResponse;
      }
    }

    let lastError: Error;
    
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        const result = await this.makeRequest<T>(endpoint, options);
        
        // Cache successful GET responses
        if (!options.method || options.method === 'GET') {
          this.setCachedResponse(cacheKey, result);
        }
        
        return result;
      } catch (error) {
        lastError = error as Error;
        
        // Don't retry on authentication errors
        if (lastError.message.includes('Authentication failed') || 
            lastError.message.includes('Access forbidden')) {
          throw lastError;
        }
        
        if (attempt < maxRetries) {
          const backoffMs = Math.min(1000 * Math.pow(2, attempt), 10000); // Max 10s
          console.log(`[STAFF_API] Attempt ${attempt + 1} failed, retrying in ${backoffMs}ms...`);
          await this.sleep(backoffMs);
        }
      }
    }
    
    throw lastError!;
  }

  private async makeRequest<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;
    
    try {
      // Get the bearer token from environment - enhanced token handling
      const bearerToken = import.meta.env.VITE_CLIENT_APP_SHARED_TOKEN;
      
      // Enhanced headers with better auth handling
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
        'Origin': window.location.origin,
        'Referer': window.location.href,
        'X-Client-Version': '1.0.0',
        'X-Request-Source': 'client-app',
        ...(options.headers as Record<string, string> || {}),
      };
      
      // Only add Authorization header if token exists
      if (bearerToken && bearerToken.trim()) {
        headers['Authorization'] = `Bearer ${bearerToken.trim()}`;
      }
      
      const response = await fetch(url, {
        credentials: 'include', // Always include cookies/session for normal auth flow
        headers,
        signal: AbortSignal.timeout(15000), // 15 second timeout
        ...options,
      });

      if (!response.ok) {
        const errorText = await response.text().catch(() => 'Unknown error');
        
        // Enhanced error handling for specific status codes
        if (response.status === 401) {
          console.warn('[STAFF_API] Authentication failed - token may be invalid or expired');
          throw new Error(`Authentication failed: Invalid or expired bearer token`);
        } else if (response.status === 403) {
          console.warn('[STAFF_API] Access forbidden - insufficient permissions');
          throw new Error(`Access forbidden: Insufficient permissions for this operation`);
        } else if (response.status === 404) {
          console.warn('[STAFF_API] Resource not found');
          throw new Error(`Resource not found: ${endpoint}`);
        } else if (response.status >= 500) {
          console.warn('[STAFF_API] Server error detected');
          throw new Error(`Staff backend error: Service temporarily unavailable`);
        }
        
        throw new Error(`Staff API error: ${response.status} - ${errorText}`);
      }

      return response.json();
    } catch (error) {
      const err = error as Error;
      
      // Handle network errors and timeouts
      if (err.name === 'AbortError' || err.message.includes('timeout')) {
        console.warn('[STAFF_API] Request timeout');
        throw new Error('Request timeout: Staff backend is taking too long to respond');
      }
      
      if (err.message.includes('fetch')) {
        console.warn('[STAFF_API] Network error - staff backend may be unavailable');
        throw new Error('Network error: Unable to reach staff backend');
      }
      
      console.warn('[STAFF_API] Request failed:', err.message || error);
      throw error;
    }
  }

  private async uploadFiles(files: File[], applicationId?: string): Promise<Array<{
    id: string;
    name: string;
    documentType: string;
    size: number;
    type: string;
  }>> {
    // Upload files to staff backend using PUBLIC endpoint (no Authorization required)
    const uploadPromises = files.map(async (file) => {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('documentType', file.name.toLowerCase().includes('bank') ? 'bank_statement' : 'business_document');

      // Use public upload endpoint without Authorization headers
      const uploadUrl = applicationId 
        ? `${this.baseUrl}/applications/${applicationId}/documents`
        : `${this.baseUrl}/uploads`;
      
      const response = await fetch(uploadUrl, {
        method: 'POST',
        body: formData,
        // ⚠️ No Authorization headers for public upload!
      });

      if (!response.ok) {
        throw new Error(`File upload failed: ${response.status}`);
      }

      const result = await response.json();
      return {
        id: result.fileId || Math.random().toString(36).substr(2, 9),
        name: file.name,
        documentType: result.documentType || 'business_document',
        size: file.size,
        type: file.type,
      };
    });

    return Promise.all(uploadPromises);
  }

  async submitApplication(
    formData: any,
    uploadedFiles: Array<{ file: File; documentType: string }>,
    selectedProductId: string
  ): Promise<ApplicationSubmissionResponse> {
    try {
      console.log('📤 Starting application submission to staff API...');
      
      // Upload documents first with fallback handling
      const files = uploadedFiles.map(uf => uf.file);
      let uploadedDocuments: Array<{
        id: string;
        name: string;
        documentType: string;
        size: number;
        type: string;
      }> = [];
      
      if (files.length > 0) {
        console.log(`📁 Uploading ${files.length} documents...`);
        try {
          uploadedDocuments = await this.uploadFiles(files);
          console.log('✅ Documents uploaded successfully');
        } catch (uploadError) {
          console.warn('⚠️ Document upload failed, creating local references for offline queue');
          // Create local document references for offline queue
          uploadedDocuments = files.map((file, index) => ({
            id: `offline-${Date.now()}-${index}`,
            name: file.name,
            documentType: uploadedFiles[index]?.documentType || 'business_document',
            size: file.size,
            type: file.type,
          }));
        }
      }

      // ✅ CRITICAL FIX: Remove flat field references - use step-based structure only
      // console.log('🚫 DEPRECATED: Legacy flat field mapping removed - using step-based structure only');
      
      // Ensure formData already contains step-based structure
      if (!formData.step1 || !formData.step3 || !formData.step4) {
        console.error('❌ STRUCTURE VIOLATION: formData must contain {step1, step3, step4} format');
        throw new Error('Invalid application data structure - missing step-based format');
      }

      // console.log('📋 Submitting application with data:', {
      //   step1Fields: Object.keys(formData.step1 || {}).length,
      //   step3Fields: Object.keys(formData.step3 || {}).length,
      //   step4Fields: Object.keys(formData.step4 || {}).length,
      //   documentsCount: uploadedDocuments.length,
      //   productId: selectedProductId
      // });

      // ✅ ENFORCE STEP-BASED STRUCTURE: Use formData.step1, formData.step3, formData.step4 directly
      const correctPayload = {
        step1: formData.step1,
        step3: formData.step3,
        step4: formData.step4,
        uploadedDocuments,
        productId: selectedProductId,
      };

      // Add the exact API call structure as requested
      const API_BASE_URL = this.baseUrl;
      const sharedToken = import.meta.env.VITE_CLIENT_APP_SHARED_TOKEN;
      
      // console.log('🟢 Final payload being sent to API:', correctPayload);
      // console.log('🔍 API call structure verification:', {
      //   url: `${API_BASE_URL}/public/applications`,
      //   method: 'POST',
      //   headers: {
      //     'Content-Type': 'application/json',
      //     'Authorization': `Bearer ${sharedToken ? '[PRESENT]' : '[MISSING]'}`
      //   },
      //   bodyStructure: {
      //     step1: Object.keys(correctPayload.step1 || {}).length + ' fields',
      //     step3: Object.keys(correctPayload.step3 || {}).length + ' fields', 
      //     step4: Object.keys(correctPayload.step4 || {}).length + ' fields'
      //   }
      // });
      
      // ✅ FINAL VERIFICATION: Ensure no flat field references remain
      // console.log('📋 Step-based structure verification:');
      // console.log('  step1:', correctPayload.step1);
      // console.log('  step3:', correctPayload.step3);
      // console.log('  step4:', correctPayload.step4);

      // Use new retry logic with fallback handling
      try {
        const response = await this.makeRequestWithRetry<ApplicationSubmissionResponse>('/applications', {
          method: 'POST',
          body: JSON.stringify(correctPayload),
        });

        console.log('✅ Application submitted successfully via staff backend');
        return response;
      } catch (staffError) {
        console.warn('⚠️ Staff backend submission failed, implementing fallback strategy');
        
        // Fallback: Store submission locally for when backend comes online
        const fallbackResponse: ApplicationSubmissionResponse = {
          status: 'submitted',
          applicationId: `offline-${Date.now()}`,
          message: 'Application queued for submission when staff backend is available'
        };
        
        // Store in offline queue for later submission
        if (!navigator.onLine) {
          return new Promise((resolve, reject) => {
            this.offlineQueue.push({
              endpoint: '/applications',
              options: {
                method: 'POST',
                body: JSON.stringify(correctPayload),
              },
              resolve: (result: any) => {
                console.log('✅ Offline application submitted successfully');
                resolve(result);
              },
              reject: (error: any) => {
                console.error('❌ Failed to submit offline application');
                reject(error);
              }
            });
            
            // Immediately return fallback response for offline scenario
            resolve(fallbackResponse);
          });
        }
        
        // If online but staff backend has issues, return fallback response
        console.log('📤 Staff backend unavailable - returning fallback success response');
        return fallbackResponse;
      }

    } catch (error) {
      console.error('❌ Application submission failed:', error);
      // Production mode: Throw error instead of returning fallback response
      throw error;
    }
  }





  async finalizeApplication(applicationId: string): Promise<FinalizationResponse> {
    try {
      console.log(`🏁 Finalizing application: ${applicationId}`);
      
      const response = await this.makeRequestWithRetry<FinalizationResponse>(`/applications/${applicationId}/finalize`, {
        method: 'POST',
      });
      
      console.log('✅ Application finalized:', response);
      return response;
      
    } catch (error) {
      console.error('❌ Failed to finalize application, using fallback:', error);
      
      // Fallback response for offline scenarios
      return {
        status: 'finalized',
        applicationId,
        finalizedAt: new Date().toISOString(),
        message: 'Application finalized locally - will sync when backend is available'
      };
    }
  }



  async createApplication(applicationData: any): Promise<{ applicationId: string; signNowDocumentId?: string }> {
    try {
      // console.log('📝 Creating new application via POST /api/public/applications');
      // console.log('🟢 Final payload being sent to staff backend:', applicationData);
      
      // Critical field verification for SignNow population
      // console.log('🔍 Critical field verification for SignNow:', {
      //   'step1.fundingAmount': applicationData.step1?.fundingAmount,
      //   'step3.operatingName (businessName)': applicationData.step3?.operatingName,
      //   'step4.firstName': applicationData.step4?.firstName,
      //   'step4.personalEmail': applicationData.step4?.personalEmail,
      //   allFieldsPresent: !!(
      //     applicationData.step1?.fundingAmount && 
      //     applicationData.step3?.operatingName && 
      //     applicationData.step4?.firstName &&
      //     applicationData.step4?.personalEmail
      //   )
      // });
      
      // console.log('📋 Payload structure verification:', {
      //   hasStep1: !!applicationData.step1,
      //   hasStep3: !!applicationData.step3,
      //   hasStep4: !!applicationData.step4,
      //   step1FieldCount: Object.keys(applicationData.step1 || {}).length,
      //   step3FieldCount: Object.keys(applicationData.step3 || {}).length,
      //   step4FieldCount: Object.keys(applicationData.step4 || {}).length
      // });
      
      // console.log('🟢 Final payload being sent to staff backend:', applicationData);
      // console.log('📝 Complete application payload:', JSON.stringify(applicationData, null, 2));
      
      const response = await this.makeRequestWithRetry<{ applicationId: string; signNowDocumentId?: string }>('/applications', {
        method: 'POST',
        body: JSON.stringify(applicationData),
      });
      
      // console.log('✅ Application creation response received:', {
      //   applicationId: response?.applicationId,
      //   signNowDocumentId: response?.signNowDocumentId,
      //   fullResponse: JSON.stringify(response, null, 2)
      // });
      
      // Verify critical fields for webhook integration
      if (response?.applicationId && response?.signNowDocumentId) {
        // console.log('🔗 Webhook verification: applicationId and signNowDocumentId both present');
        // console.log('🔗 Document ID for webhook matching:', response.signNowDocumentId);
      } else {
        console.warn('⚠️ Missing critical fields for SignNow integration:');
        console.warn('   - applicationId:', !!response?.applicationId);
        console.warn('   - signNowDocumentId:', !!response?.signNowDocumentId);
      }
      
      return response;
      
    } catch (error) {
      console.error('❌ Failed to create application:', error);
      throw error;
    }
  }

  // Document verification - check uploaded documents
  async getUploadedDocuments(applicationId: string): Promise<{
    documents: Array<{
      id: string;
      documentType: string;
      fileName: string;
      uploadedAt: string;
    }>;
    requiredDocuments: string[];
    missingDocuments: string[];
    isComplete: boolean;
  }> {
    try {
      console.log(`📄 Fetching documents for application: ${applicationId}`);
      
      const response = await this.makeRequestWithRetry<any>(
        `/public/applications/${applicationId}/documents`
      );
      return response;
      
    } catch (error) {
      console.warn('⚠️ Failed to fetch documents from staff backend, using fallback:', error);
      // Return local fallback data
      return {
        documents: [],
        requiredDocuments: ['bank_statement', 'business_document'],
        missingDocuments: ['bank_statement', 'business_document'],
        isComplete: false
      };
    }
  }
}

export const staffApi = new StaffApiClient();