import { fetchProducts } from "../../api/products";
import { useState, useEffect } from 'react';
import { useMutation } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { useFormData } from '@/context/FormDataContext';
import { useLocation } from 'wouter';
import { useToast } from '@/hooks/use-toast';
import ArrowRight from 'lucide-react/dist/esm/icons/arrow-right';
import ArrowLeft from 'lucide-react/dist/esm/icons/arrow-left';
import Play from 'lucide-react/dist/esm/icons/play';
import CheckCircle from 'lucide-react/dist/esm/icons/check-circle';
import Loader2 from 'lucide-react/dist/esm/icons/loader-2';
import { apiRequest } from '@/lib/api';

interface LenderRecommendation {
  id: string;
  categoryName: string;
  description: string;
  matchScore: number; // 0-100
  benefits: string[];
  videoUrl?: string;
  estimatedRate?: string;
  maxAmount?: string;
  processingTime?: string;
}

interface RecommendationsResponse {
  recommendations: LenderRecommendation[];
  profileSummary: string;
}

export default function Recommendations() {
  const { state, dispatch } = useFormData();
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [recommendations, setRecommendations] = useState<LenderRecommendation[]>([]);

  const recommendationsMutation = useMutation({
    mutationFn: async () => {
      const payload = {
        businessProfile: {
          location: state.step1FinancialProfile.businessLocation,
          monthlyRevenue: state.step1FinancialProfile.monthlyRevenue,
          industry: state.step1FinancialProfile.industry,
          businessAge: state.step1FinancialProfile.businessAge,
          useOfFunds: state.step1FinancialProfile.useOfFunds,
        }
      };

      const response = await apiRequest<RecommendationsResponse>('/recommendations', {
        method: 'POST',
        body: JSON.stringify(payload),
      });

      return response;
    },
    onSuccess: (data) => {
      setRecommendations(data.recommendations);
      toast({
        title: "Recommendations Ready",
        description: `Found ${data.recommendations.length} matching lender categories for your business.`,
      });
    },
    onError: (error) => {
      console.error('Failed to fetch recommendations:', error);
      toast({
        title: "Error Loading Recommendations",
        description: "Unable to load personalized recommendations. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Fetch recommendations on component mount
  useEffect(() => {
    if (state.step1FinancialProfile.businessLocation) {
      recommendationsMutation.mutate();
    }
  }, []);

  const handleCategorySelect = (categoryId: string, categoryName: string) => {
    setSelectedCategory(categoryId);
    
    // Save selection to context
    dispatch({ 
      type: 'UPDATE_STEP1', 
      payload: { selectedCategory: categoryId, selectedCategoryName: categoryName } 
    });

    toast({
      title: "Category Selected",
      description: `Selected ${categoryName} as your preferred financing option.`,
    });
  };

  const handleContinue = () => {
    if (!selectedCategory) {
      toast({
        title: "Selection Required",
        description: "Please select a lender category to continue.",
        variant: "destructive",
      });
      return;
    }

    dispatch({ type: 'SET_CURRENT_STEP', payload: 3 });
    setLocation('/step3-business-details');
  };

  const handleBack = () => {
    setLocation('/step1-financial-profile');
  };

  const getMatchColor = (score: number) => {
    if (score >= 80) return 'bg-green-500';
    if (score >= 60) return 'bg-blue-500';
    if (score >= 40) return 'bg-yellow-500';
    return 'bg-gray-400';
  };

  const getMatchLabel = (score: number) => {
    if (score >= 80) return 'Excellent Match';
    if (score >= 60) return 'Good Match';
    if (score >= 40) return 'Fair Match';
    return 'Limited Match';
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Personalized Recommendations</h1>
          <p className="text-gray-600 mt-2">
            Based on your business profile, we've identified the best financing options for you
          </p>
          <div className="mt-4">
            <div className="text-sm text-gray-500">Step 2 of 4</div>
            <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
              <div className="bg-blue-600 h-2 rounded-full w-1/2"></div>
            </div>
          </div>
        </div>

        {/* Loading State */}
        {recommendationsMutation.isPending && (
          <Card className="mb-6">
            <CardContent className="flex items-center justify-center py-12">
              <div className="text-center">
                <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4 text-blue-600" />
                <p className="text-gray-600">Analyzing your business profile...</p>
                <p className="text-sm text-gray-500 mt-2">Finding the best lender matches</p>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Error State */}
        {recommendationsMutation.isError && (
          <Card className="mb-6">
            <CardContent className="text-center py-12">
              <p className="text-red-600 mb-4">Failed to load recommendations</p>
              <Button 
                onClick={() => recommendationsMutation.mutate()}
                variant="outline"
              >
                Try Again
              </Button>
            </CardContent>
          </Card>
        )}

        {/* Recommendations List */}
        {recommendations.length > 0 && (
          <>
            <div className="mb-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-2">
                Recommended Lender Categories
              </h2>
              <p className="text-gray-600">
                Select the category that best fits your financing needs:
              </p>
            </div>

            <div className="space-y-4 mb-8">
              {recommendations.map((recommendation) => (
                <Card 
                  key={recommendation.id}
                  className={`cursor-pointer transition-all hover:shadow-lg ${
                    selectedCategory === recommendation.id 
                      ? 'ring-2 ring-blue-500 bg-blue-50' 
                      : 'hover:border-blue-200'
                  }`}
                  onClick={() => handleCategorySelect(recommendation.id, recommendation.categoryName)}
                >
                  <CardHeader className="pb-4">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <CardTitle className="flex items-center gap-3">
                          {recommendation.categoryName}
                          {selectedCategory === recommendation.id && (
                            <CheckCircle className="h-5 w-5 text-blue-600" />
                          )}
                        </CardTitle>
                        <p className="text-gray-600 mt-2">{recommendation.description}</p>
                      </div>
                      <div className="ml-4 text-right">
                        <Badge 
                          variant="secondary" 
                          className={`${getMatchColor(recommendation.matchScore)} text-white`}
                        >
                          {recommendation.matchScore}% Match
                        </Badge>
                        <p className="text-sm text-gray-500 mt-1">
                          {getMatchLabel(recommendation.matchScore)}
                        </p>
                      </div>
                    </div>
                  </CardHeader>
                  
                  <CardContent>
                    {/* Match Score Progress Bar */}
                    <div className="mb-4">
                      <div className="flex justify-between text-sm text-gray-600 mb-1">
                        <span>Match Score</span>
                        <span>{recommendation.matchScore}%</span>
                      </div>
                      <Progress 
                        value={recommendation.matchScore} 
                        className="h-2"
                      />
                    </div>

                    {/* Key Details */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                      {recommendation.estimatedRate && (
                        <div>
                          <p className="text-sm text-gray-500">Est. Rate</p>
                          <p className="font-medium">{recommendation.estimatedRate}</p>
                        </div>
                      )}
                      {recommendation.maxAmount && (
                        <div>
                          <p className="text-sm text-gray-500">Max Amount</p>
                          <p className="font-medium">{recommendation.maxAmount}</p>
                        </div>
                      )}
                      {recommendation.processingTime && (
                        <div>
                          <p className="text-sm text-gray-500">Processing</p>
                          <p className="font-medium">{recommendation.processingTime}</p>
                        </div>
                      )}
                    </div>

                    {/* Benefits */}
                    {recommendation.benefits && recommendation.benefits.length > 0 && (
                      <div className="mb-4">
                        <p className="text-sm font-medium text-gray-700 mb-2">Key Benefits:</p>
                        <ul className="text-sm text-gray-600 space-y-1">
                          {recommendation.benefits.map((benefit, index) => (
                            <li key={index} className="flex items-start">
                              <span className="text-green-500 mr-2">•</span>
                              {benefit}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* Video Preview */}
                    {recommendation.videoUrl && (
                      <div className="flex items-center gap-2 text-blue-600 text-sm">
                        <Play className="h-4 w-4" />
                        <span>Watch explainer video</span>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </>
        )}

        {/* Navigation Buttons */}
        <div className="flex gap-4">
          <Button
            type="button"
            variant="outline"
            onClick={handleBack}
            className="flex-1"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Profile
          </Button>
          <Button
            onClick={handleContinue}
            disabled={!selectedCategory}
            className="flex-1 bg-blue-600 hover:bg-blue-700"
          >
            Continue with Selection
            <ArrowRight className="h-4 w-4 ml-2" />
          </Button>
        </div>
      </div>
    </div>
  );
}
// injected: local-first products fetch
import { getProducts, loadSelectedCategories } from "../api/products";
/* injected load on mount (pseudo):
useEffect(() => { (async () => {
  const cats = loadSelectedCategories();
  const products = await getProducts({ useCacheFirst: true });
  // apply category filter if present
  const selected = cats && cats.length ? products.filter(p => cats.includes((p.category||"").toLowerCase())) : products;
  setState({ products: selected });
})(); }, []);
*/
