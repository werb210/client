// AUTO-GENERATED — CANONICAL FIELD MANIFEST (Steps 1–5)
export const FIELD_MANIFEST = {
  "byStep": {
    "step1": [
      "accountsReceivableBalance",
      "averageMonthlyRevenue",
      "businessLocation",
      "equipmentValue",
      "fixedAssetsValue",
      "fundingAmount",
      "fundsPurpose",
      "headquarters",
      "headquartersState",
      "industry",
      "lookingFor",
      "revenueLastYear",
      "salesHistory"
    ],
    "step2": [
      "length",
      "map",
      "recommendations",
      "selectedProduct"
    ],
    "step3": [
      "businessAddress",
      "businessCity",
      "businessDescription",
      "businessEmail",
      "businessName",
      "businessPhone",
      "businessPostalCode",
      "businessStartDate",
      "businessState",
      "businessStreetAddress",
      "businessStructure",
      "businessTaxId",
      "businessWebsite",
      "businessZipCode",
      "employeeCount",
      "estimatedYearlyRevenue",
      "firstName",
      "invalid_type_error",
      "lastName",
      "legalName",
      "numberOfEmployees",
      "operatingName",
      "ownershipPercentage",
      "personalEmail",
      "personalPhone",
      "title",
      "undefined"
    ],
    "step4": [
      "applicantAddress",
      "applicantCity",
      "applicantDateOfBirth",
      "applicantEmail",
      "applicantFirstName",
      "applicantLastName",
      "applicantPhone",
      "applicantSSN",
      "applicantState",
      "applicantZipCode",
      "business",
      "contact",
      "funding",
      "hasPartner",
      "ownershipPercentage",
      "partnerAddress",
      "partnerCity",
      "partnerDateOfBirth",
      "partnerEmail",
      "partnerFirstName",
      "partnerLastName",
      "partnerOwnershipPercentage",
      "partnerPhone",
      "partnerSSN",
      "partnerState",
      "partnerZipCode"
    ],
    "step5": [
      "accountsReceivableBalance",
      "append",
      "application",
      "applicationId",
      "businessLocation",
      "documentType",
      "file",
      "form_data",
      "fundingAmount",
      "headquarters",
      "lookingFor",
      "products",
      "selectedProducts",
      "success",
      "useOfFunds"
    ],
    "other": [
      "/service-worker.js",
      "/sw.js",
      "3",
      "4",
      "accountsReceivableBalance",
      "amount",
      "append",
      "applicantBirthdate",
      "applicantCity",
      "applicantEmail",
      "applicantName",
      "applicantPostalCode",
      "applicantSSN",
      "applicantState",
      "applicantStreetAddress",
      "assistantId",
      "businessAge",
      "businessCity",
      "businessInfo",
      "businessLocation",
      "businessPhone",
      "businessPostalCode",
      "businessStartDate",
      "businessState",
      "businessStreetAddress",
      "businessStructure",
      "businessWebsite",
      "collateral",
      "count",
      "creditScore",
      "csrf-token",
      "currentStep",
      "data",
      "documents",
      "email",
      "employeeCount",
      "error",
      "escalated",
      "estimatedYearlyRevenue",
      "existingDebt",
      "forEach",
      "form-submission",
      "fundingAmount",
      "fundsPurpose",
      "headquarters",
      "industry",
      "ip",
      "items",
      "join",
      "lanes",
      "legalName",
      "length",
      "limit",
      "loanAmount",
      "lookingFor",
      "message",
      "missingDocuments",
      "mobilePhone",
      "monthlyRevenue",
      "name",
      "operatingName",
      "page",
      "partnerEmail",
      "partnerName",
      "partnerOwnership",
      "partnerPhone",
      "partnerSSN",
      "partnerTitle",
      "percentageOwnership",
      "personalDetails",
      "personalPhone",
      "personalPostalCode",
      "personalState",
      "phone",
      "productQuestions",
      "products",
      "progress",
      "publicKey",
      "queue",
      "recommendedAmount",
      "reply",
      "response",
      "revenue",
      "rules",
      "selectedProduct",
      "session",
      "sessionId",
      "sessions",
      "signUrl",
      "signature",
      "signing_status",
      "slice",
      "socialSecurityNumber",
      "status",
      "step1",
      "step1FinancialProfile",
      "step1FinancialProfile.businessLocation",
      "step3",
      "step4",
      "success",
      "termsAccepted",
      "timeInBusiness",
      "titleInBusiness",
      "total",
      "totalPages",
      "type",
      "url",
      "useOfFunds",
      "users"
    ]
  },
  "all": [
    "/service-worker.js",
    "/sw.js",
    "3",
    "4",
    "accountsReceivableBalance",
    "amount",
    "append",
    "applicantAddress",
    "applicantBirthdate",
    "applicantCity",
    "applicantDateOfBirth",
    "applicantEmail",
    "applicantFirstName",
    "applicantLastName",
    "applicantName",
    "applicantPhone",
    "applicantPostalCode",
    "applicantSSN",
    "applicantState",
    "applicantStreetAddress",
    "applicantZipCode",
    "application",
    "applicationId",
    "assistantId",
    "averageMonthlyRevenue",
    "business",
    "businessAddress",
    "businessAge",
    "businessCity",
    "businessDescription",
    "businessEmail",
    "businessInfo",
    "businessLocation",
    "businessName",
    "businessPhone",
    "businessPostalCode",
    "businessStartDate",
    "businessState",
    "businessStreetAddress",
    "businessStructure",
    "businessTaxId",
    "businessWebsite",
    "businessZipCode",
    "collateral",
    "contact",
    "count",
    "creditScore",
    "csrf-token",
    "currentStep",
    "data",
    "documentType",
    "documents",
    "email",
    "employeeCount",
    "equipmentValue",
    "error",
    "escalated",
    "estimatedYearlyRevenue",
    "existingDebt",
    "file",
    "firstName",
    "fixedAssetsValue",
    "forEach",
    "form-submission",
    "form_data",
    "funding",
    "fundingAmount",
    "fundsPurpose",
    "hasPartner",
    "headquarters",
    "headquartersState",
    "industry",
    "invalid_type_error",
    "ip",
    "items",
    "join",
    "lanes",
    "lastName",
    "legalName",
    "length",
    "limit",
    "loanAmount",
    "lookingFor",
    "map",
    "message",
    "missingDocuments",
    "mobilePhone",
    "monthlyRevenue",
    "name",
    "numberOfEmployees",
    "operatingName",
    "ownershipPercentage",
    "page",
    "partnerAddress",
    "partnerCity",
    "partnerDateOfBirth",
    "partnerEmail",
    "partnerFirstName",
    "partnerLastName",
    "partnerName",
    "partnerOwnership",
    "partnerOwnershipPercentage",
    "partnerPhone",
    "partnerSSN",
    "partnerState",
    "partnerTitle",
    "partnerZipCode",
    "percentageOwnership",
    "personalDetails",
    "personalEmail",
    "personalPhone",
    "personalPostalCode",
    "personalState",
    "phone",
    "productQuestions",
    "products",
    "progress",
    "publicKey",
    "queue",
    "recommendations",
    "recommendedAmount",
    "reply",
    "response",
    "revenue",
    "revenueLastYear",
    "rules",
    "salesHistory",
    "selectedProduct",
    "selectedProducts",
    "session",
    "sessionId",
    "sessions",
    "signUrl",
    "signature",
    "signing_status",
    "slice",
    "socialSecurityNumber",
    "status",
    "step1",
    "step1FinancialProfile",
    "step1FinancialProfile.businessLocation",
    "step3",
    "step4",
    "success",
    "termsAccepted",
    "timeInBusiness",
    "title",
    "titleInBusiness",
    "total",
    "totalPages",
    "type",
    "undefined",
    "url",
    "useOfFunds",
    "users"
  ]
} as const;
export type FieldName = typeof FIELD_MANIFEST.all[number];
export default FIELD_MANIFEST;
// injected: local-first products fetch
import { getProducts, loadSelectedCategories } from "../api/products";
/* injected load on mount (pseudo):
useEffect(() => { (async () => {
  const cats = loadSelectedCategories();
  const products = await getProducts({ useCacheFirst: true });
  // apply category filter if present
  const selected = cats && cats.length ? products.filter(p => cats.includes((p.category||"").toLowerCase())) : products;
  setState({ products: selected });
})(); }, []);
*/
