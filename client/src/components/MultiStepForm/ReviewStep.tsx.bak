import { attachCategories } from "../api/submit-categories";
import { useState } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useApplication } from '@/context/ApplicationContext';
import { useToast } from '@/hooks/use-toast';
import { logger } from '@/lib/utils';
import * as api from '@/lib/api';

import CheckCircle from 'lucide-react/dist/esm/icons/check-circle';
import AlertCircle from 'lucide-react/dist/esm/icons/alert-circle';

interface ReviewStepProps {
  onBack: () => void;
  onComplete: () => void;
  applicationId?: number;
}

export function ReviewStep({ onBack, onComplete, applicationId }: ReviewStepProps) {
  const { state } = useApplication();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const submitMutation = useMutation({
    mutationFn: async () => {
      // Prepare application data for staff backend submission
      const applicationData: api.ApplicationPayload = {
        businessInfo: {
          legalName: state.formData.businessInfo?.legalName || '',
          industry: state.formData.businessInfo?.industry || '',
          headquarters: state.formData.businessInfo?.headquarters || '',
          revenue: state.formData.businessInfo?.revenue || '',
          useOfFunds: state.formData.businessInfo?.useOfFunds || '',
          loanAmount: state.formData.businessInfo?.loanAmount || 0,
        },
        personalDetails: {
          name: state.formData.personalDetails?.name || '',
          email: state.formData.personalDetails?.email || '',
          phone: state.formData.personalDetails?.phone || '',
        },
        productQuestions: state.formData.productQuestions || {},
        selectedProduct: state.formData.selectedProduct || '',
        signature: {
          termsAccepted: state.formData.signature?.termsAccepted || false,
          signed: state.formData.signature?.signed || false,
        },
      };

      // Submit application to staff backend
      const result = await api.submitApplication(applicationData).catch(error => {
        logger.error('[REVIEW_STEP] Application submission failed:', error);
        throw error;
      });
      return result;
    },
    onSuccess: async (data) => {
      // Application submitted successfully
      queryClient.invalidateQueries({ queryKey: ['/api/applications'] });
      
      toast({
        title: "Application Submitted",
        description: "Your application has been submitted successfully.",
      });

      // Email-based signing workflow - show completion
      onComplete();
    },
    onError: (error) => {
      // Handle network errors gracefully
      if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
        toast({
          title: "Connection Error",
          description: "Please check your internet connection and try again.",
          variant: "destructive",
        });
        return;
      }
      
      toast({
        title: "Submission Failed",
        description: error instanceof Error ? error.message : "Failed to submit application",
        variant: "destructive",
      });
    },
  });

  const handleSubmit = async () => {
    setIsSubmitting(true);
    submitMutation.mutate();
    setIsSubmitting(false);
  };

  // Summary sections for review
  const businessInfo = state.formData.businessInfo;
  const personalDetails = state.formData.personalDetails;
  const selectedProduct = state.formData.selectedProduct;
  const documents = state.formData.documents || [];
  const signature = state.formData.signature;

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold text-gray-900">Review Your Application</h2>
        <p className="text-gray-600">Please review all information before submitting.</p>
      </div>

      {/* Business Information */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-green-600" />
            Business Information
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <span className="font-medium">Legal Name:</span>
              <p className="text-gray-600">{businessInfo?.legalName || 'Not provided'}</p>
            </div>
            <div>
              <span className="font-medium">Industry:</span>
              <p className="text-gray-600">{businessInfo?.industry || 'Not provided'}</p>
            </div>
            <div>
              <span className="font-medium">Headquarters:</span>
              <p className="text-gray-600">{businessInfo?.headquarters || 'Not provided'}</p>
            </div>
            <div>
              <span className="font-medium">Annual Revenue:</span>
              <p className="text-gray-600">{businessInfo?.revenue || 'Not provided'}</p>
            </div>
            <div>
              <span className="font-medium">Loan Amount:</span>
              <p className="text-gray-600">${businessInfo?.loanAmount?.toLocaleString() || '0'}</p>
            </div>
            <div>
              <span className="font-medium">Use of Funds:</span>
              <p className="text-gray-600">{businessInfo?.useOfFunds || 'Not provided'}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Personal Details */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-green-600" />
            Personal Details
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <span className="font-medium">Name:</span>
              <p className="text-gray-600">{personalDetails?.name || 'Not provided'}</p>
            </div>
            <div>
              <span className="font-medium">Email:</span>
              <p className="text-gray-600">{personalDetails?.email || 'Not provided'}</p>
            </div>
            <div>
              <span className="font-medium">Phone:</span>
              <p className="text-gray-600">{personalDetails?.phone || 'Not provided'}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Selected Product */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-green-600" />
            Selected Product
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Badge variant="outline" className="text-lg px-3 py-1">
            {selectedProduct || 'No product selected'}
          </Badge>
        </CardContent>
      </Card>

      {/* Documents */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            {documents.length > 0 ? (
              <CheckCircle className="h-5 w-5 text-green-600" />
            ) : (
              <AlertCircle className="h-5 w-5 text-yellow-600" />
            )}
            Documents ({documents.length})
          </CardTitle>
        </CardHeader>
        <CardContent>
          {documents.length > 0 ? (
            <div className="space-y-2">
              {documents.map((doc, index) => (
                <div key={index} className="flex items-center justify-between p-2 border rounded">
                  <span className="font-medium">{doc.name}</span>
                  <Badge variant={doc.uploaded ? "default" : "secondary"}>
                    {doc.uploaded ? "Uploaded" : "Pending"}
                  </Badge>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-600">No documents uploaded</p>
          )}
        </CardContent>
      </Card>

      {/* Signature Status */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            {signature?.termsAccepted ? (
              <CheckCircle className="h-5 w-5 text-green-600" />
            ) : (
              <AlertCircle className="h-5 w-5 text-yellow-600" />
            )}
            Terms and Signature
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <Badge variant={signature?.termsAccepted ? "default" : "secondary"}>
                {signature?.termsAccepted ? "Terms Accepted" : "Terms Not Accepted"}
              </Badge>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant={signature?.signed ? "default" : "secondary"}>
                {signature?.signed ? "Signed" : "Signature Pending"}
              </Badge>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <div className="flex justify-between pt-6">
        <Button variant="outline" onClick={onBack}>
          Back
        </Button>
        <Button 
          onClick={handleSubmit}
          disabled={isSubmitting || submitMutation.isPending}
          className="bg-blue-600 hover:bg-blue-700"
        >
          {isSubmitting || submitMutation.isPending ? "Submitting..." : "Submit Application"}
        </Button>
      </div>
    </div>
  );
}