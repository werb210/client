// ONE-LINER DIAGNOSTIC - Copy and paste into browser console
(async()=>{console.log('🚀 RUNNING COMPLETE DIAGNOSTIC');const{get,set}=await import('idb-keyval');let cache=await get('lender_products_cache');console.log('📊 Cache:',cache?.length||0,'products');try{const r=await fetch('/api/public/lenders');const d=await r.json();console.log('🔗 API:',r.status,d.success?`${d.products?.length} products`:'failed');if(r.ok&&d.products){await set('lender_products_cache',d.products);cache=d.products;console.log('✅ Sync: PASS');}else{console.log('❌ Sync: FAIL');}}catch(e){console.log('❌ API Error:',e.message);}if(cache?.length>0){const factoring=cache.filter(p=>p.category?.includes('Factoring')||p.category?.includes('factoring'));const docs=new Set();factoring.forEach(p=>p.requiredDocuments?.forEach(d=>docs.add(d)));console.log('📦 Step2:',factoring.length,'factoring products');console.log('📄 Step5:',docs.size,'unique documents');console.log('🎯 RESULT:',cache.length>=41&&factoring.length>0&&docs.size>0?'✅ ALL PASS':'❌ SOME FAIL');}else{console.log('❌ No data for Step2/5 tests');}})();